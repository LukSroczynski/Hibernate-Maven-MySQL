/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

eval("\n/* styles */\n__webpack_require__(10)\n\nvar Component = __webpack_require__(8)(\n  /* script */\n  __webpack_require__(2),\n  /* template */\n  __webpack_require__(9),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\nComponent.options.__file = \"C:\\\\Users\\\\user\\\\Desktop\\\\GIT\\\\Spring-Hibernate-Maven\\\\5-REST-API-NESTED-JSON\\\\src\\\\main\\\\js\\\\App.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key !== \"__esModule\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] App.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-39003b6f\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-39003b6f\", Component.options)\n  }\n})()}\n\nmodule.exports = Component.exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi9qcy9BcHAudnVlPzJiMTMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0Esc0JBQWtMOztBQUVsTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUFzRztBQUN0RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrRUFBK0UsaURBQWlELElBQUk7QUFDcEksbUNBQW1DOztBQUVuQztBQUNBLFlBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKiBzdHlsZXMgKi9cbnJlcXVpcmUoXCIhIXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMzkwMDNiNmZcXFwiLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0FwcC52dWVcIilcblxudmFyIENvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpKFxuICAvKiBzY3JpcHQgKi9cbiAgcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vQXBwLnZ1ZVwiKSxcbiAgLyogdGVtcGxhdGUgKi9cbiAgcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMzkwMDNiNmZcXFwifSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vQXBwLnZ1ZVwiKSxcbiAgLyogc2NvcGVJZCAqL1xuICBudWxsLFxuICAvKiBjc3NNb2R1bGVzICovXG4gIG51bGxcbilcbkNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiQzpcXFxcVXNlcnNcXFxcdXNlclxcXFxEZXNrdG9wXFxcXEdJVFxcXFxTcHJpbmctSGliZXJuYXRlLU1hdmVuXFxcXDUtUkVTVC1BUEktTkVTVEVELUpTT05cXFxcc3JjXFxcXG1haW5cXFxcanNcXFxcQXBwLnZ1ZVwiXG5pZiAoQ29tcG9uZW50LmVzTW9kdWxlICYmIE9iamVjdC5rZXlzKENvbXBvbmVudC5lc01vZHVsZSkuc29tZShmdW5jdGlvbiAoa2V5KSB7cmV0dXJuIGtleSAhPT0gXCJkZWZhdWx0XCIgJiYga2V5ICE9PSBcIl9fZXNNb2R1bGVcIn0pKSB7Y29uc29sZS5lcnJvcihcIm5hbWVkIGV4cG9ydHMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gKi52dWUgZmlsZXMuXCIpfVxuaWYgKENvbXBvbmVudC5vcHRpb25zLmZ1bmN0aW9uYWwpIHtjb25zb2xlLmVycm9yKFwiW3Z1ZS1sb2FkZXJdIEFwcC52dWU6IGZ1bmN0aW9uYWwgY29tcG9uZW50cyBhcmUgbm90IHN1cHBvcnRlZCB3aXRoIHRlbXBsYXRlcywgdGhleSBzaG91bGQgdXNlIHJlbmRlciBmdW5jdGlvbnMuXCIpfVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkgeyhmdW5jdGlvbiAoKSB7XG4gIHZhciBob3RBUEkgPSByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpXG4gIGhvdEFQSS5pbnN0YWxsKHJlcXVpcmUoXCJ2dWVcIiksIGZhbHNlKVxuICBpZiAoIWhvdEFQSS5jb21wYXRpYmxlKSByZXR1cm5cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgIGhvdEFQSS5jcmVhdGVSZWNvcmQoXCJkYXRhLXYtMzkwMDNiNmZcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH0gZWxzZSB7XG4gICAgaG90QVBJLnJlbG9hZChcImRhdGEtdi0zOTAwM2I2ZlwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfVxufSkoKX1cblxubW9kdWxlLmV4cG9ydHMgPSBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvbWFpbi9qcy9BcHAudnVlXG4vLyBtb2R1bGUgaWQgPSAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process, global) {Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/*!\r\n * Vue.js v2.2.6\r\n * (c) 2014-2017 Evan You\r\n * Released under the MIT License.\r\n */\r\n/*  */\r\n\r\n/**\r\n * Convert a value to a string that is actually rendered.\r\n */\r\nfunction _toString (val) {\r\n  return val == null\r\n    ? ''\r\n    : typeof val === 'object'\r\n      ? JSON.stringify(val, null, 2)\r\n      : String(val)\r\n}\r\n\r\n/**\r\n * Convert a input value to a number for persistence.\r\n * If the conversion fails, return original string.\r\n */\r\nfunction toNumber (val) {\r\n  var n = parseFloat(val);\r\n  return isNaN(n) ? val : n\r\n}\r\n\r\n/**\r\n * Make a map and return a function for checking if a key\r\n * is in that map.\r\n */\r\nfunction makeMap (\r\n  str,\r\n  expectsLowerCase\r\n) {\r\n  var map = Object.create(null);\r\n  var list = str.split(',');\r\n  for (var i = 0; i < list.length; i++) {\r\n    map[list[i]] = true;\r\n  }\r\n  return expectsLowerCase\r\n    ? function (val) { return map[val.toLowerCase()]; }\r\n    : function (val) { return map[val]; }\r\n}\r\n\r\n/**\r\n * Check if a tag is a built-in tag.\r\n */\r\nvar isBuiltInTag = makeMap('slot,component', true);\r\n\r\n/**\r\n * Remove an item from an array\r\n */\r\nfunction remove (arr, item) {\r\n  if (arr.length) {\r\n    var index = arr.indexOf(item);\r\n    if (index > -1) {\r\n      return arr.splice(index, 1)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Check whether the object has the property.\r\n */\r\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\r\nfunction hasOwn (obj, key) {\r\n  return hasOwnProperty.call(obj, key)\r\n}\r\n\r\n/**\r\n * Check if value is primitive\r\n */\r\nfunction isPrimitive (value) {\r\n  return typeof value === 'string' || typeof value === 'number'\r\n}\r\n\r\n/**\r\n * Create a cached version of a pure function.\r\n */\r\nfunction cached (fn) {\r\n  var cache = Object.create(null);\r\n  return (function cachedFn (str) {\r\n    var hit = cache[str];\r\n    return hit || (cache[str] = fn(str))\r\n  })\r\n}\r\n\r\n/**\r\n * Camelize a hyphen-delimited string.\r\n */\r\nvar camelizeRE = /-(\\w)/g;\r\nvar camelize = cached(function (str) {\r\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\r\n});\r\n\r\n/**\r\n * Capitalize a string.\r\n */\r\nvar capitalize = cached(function (str) {\r\n  return str.charAt(0).toUpperCase() + str.slice(1)\r\n});\r\n\r\n/**\r\n * Hyphenate a camelCase string.\r\n */\r\nvar hyphenateRE = /([^-])([A-Z])/g;\r\nvar hyphenate = cached(function (str) {\r\n  return str\r\n    .replace(hyphenateRE, '$1-$2')\r\n    .replace(hyphenateRE, '$1-$2')\r\n    .toLowerCase()\r\n});\r\n\r\n/**\r\n * Simple bind, faster than native\r\n */\r\nfunction bind (fn, ctx) {\r\n  function boundFn (a) {\r\n    var l = arguments.length;\r\n    return l\r\n      ? l > 1\r\n        ? fn.apply(ctx, arguments)\r\n        : fn.call(ctx, a)\r\n      : fn.call(ctx)\r\n  }\r\n  // record original fn length\r\n  boundFn._length = fn.length;\r\n  return boundFn\r\n}\r\n\r\n/**\r\n * Convert an Array-like object to a real Array.\r\n */\r\nfunction toArray (list, start) {\r\n  start = start || 0;\r\n  var i = list.length - start;\r\n  var ret = new Array(i);\r\n  while (i--) {\r\n    ret[i] = list[i + start];\r\n  }\r\n  return ret\r\n}\r\n\r\n/**\r\n * Mix properties into target object.\r\n */\r\nfunction extend (to, _from) {\r\n  for (var key in _from) {\r\n    to[key] = _from[key];\r\n  }\r\n  return to\r\n}\r\n\r\n/**\r\n * Quick object check - this is primarily used to tell\r\n * Objects from primitive values when we know the value\r\n * is a JSON-compliant type.\r\n */\r\nfunction isObject (obj) {\r\n  return obj !== null && typeof obj === 'object'\r\n}\r\n\r\n/**\r\n * Strict object type check. Only returns true\r\n * for plain JavaScript objects.\r\n */\r\nvar toString = Object.prototype.toString;\r\nvar OBJECT_STRING = '[object Object]';\r\nfunction isPlainObject (obj) {\r\n  return toString.call(obj) === OBJECT_STRING\r\n}\r\n\r\n/**\r\n * Merge an Array of Objects into a single Object.\r\n */\r\nfunction toObject (arr) {\r\n  var res = {};\r\n  for (var i = 0; i < arr.length; i++) {\r\n    if (arr[i]) {\r\n      extend(res, arr[i]);\r\n    }\r\n  }\r\n  return res\r\n}\r\n\r\n/**\r\n * Perform no operation.\r\n */\r\nfunction noop () {}\r\n\r\n/**\r\n * Always return false.\r\n */\r\nvar no = function () { return false; };\r\n\r\n/**\r\n * Return same value\r\n */\r\nvar identity = function (_) { return _; };\r\n\r\n/**\r\n * Generate a static keys string from compiler modules.\r\n */\r\nfunction genStaticKeys (modules) {\r\n  return modules.reduce(function (keys, m) {\r\n    return keys.concat(m.staticKeys || [])\r\n  }, []).join(',')\r\n}\r\n\r\n/**\r\n * Check if two values are loosely equal - that is,\r\n * if they are plain objects, do they have the same shape?\r\n */\r\nfunction looseEqual (a, b) {\r\n  var isObjectA = isObject(a);\r\n  var isObjectB = isObject(b);\r\n  if (isObjectA && isObjectB) {\r\n    try {\r\n      return JSON.stringify(a) === JSON.stringify(b)\r\n    } catch (e) {\r\n      // possible circular reference\r\n      return a === b\r\n    }\r\n  } else if (!isObjectA && !isObjectB) {\r\n    return String(a) === String(b)\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\nfunction looseIndexOf (arr, val) {\r\n  for (var i = 0; i < arr.length; i++) {\r\n    if (looseEqual(arr[i], val)) { return i }\r\n  }\r\n  return -1\r\n}\r\n\r\n/**\r\n * Ensure a function is called only once.\r\n */\r\nfunction once (fn) {\r\n  var called = false;\r\n  return function () {\r\n    if (!called) {\r\n      called = true;\r\n      fn();\r\n    }\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nvar config = {\r\n  /**\r\n   * Option merge strategies (used in core/util/options)\r\n   */\r\n  optionMergeStrategies: Object.create(null),\r\n\r\n  /**\r\n   * Whether to suppress warnings.\r\n   */\r\n  silent: false,\r\n\r\n  /**\r\n   * Show production mode tip message on boot?\r\n   */\r\n  productionTip: process.env.NODE_ENV !== 'production',\r\n\r\n  /**\r\n   * Whether to enable devtools\r\n   */\r\n  devtools: process.env.NODE_ENV !== 'production',\r\n\r\n  /**\r\n   * Whether to record perf\r\n   */\r\n  performance: false,\r\n\r\n  /**\r\n   * Error handler for watcher errors\r\n   */\r\n  errorHandler: null,\r\n\r\n  /**\r\n   * Ignore certain custom elements\r\n   */\r\n  ignoredElements: [],\r\n\r\n  /**\r\n   * Custom user key aliases for v-on\r\n   */\r\n  keyCodes: Object.create(null),\r\n\r\n  /**\r\n   * Check if a tag is reserved so that it cannot be registered as a\r\n   * component. This is platform-dependent and may be overwritten.\r\n   */\r\n  isReservedTag: no,\r\n\r\n  /**\r\n   * Check if a tag is an unknown element.\r\n   * Platform-dependent.\r\n   */\r\n  isUnknownElement: no,\r\n\r\n  /**\r\n   * Get the namespace of an element\r\n   */\r\n  getTagNamespace: noop,\r\n\r\n  /**\r\n   * Parse the real tag name for the specific platform.\r\n   */\r\n  parsePlatformTagName: identity,\r\n\r\n  /**\r\n   * Check if an attribute must be bound using property, e.g. value\r\n   * Platform-dependent.\r\n   */\r\n  mustUseProp: no,\r\n\r\n  /**\r\n   * List of asset types that a component can own.\r\n   */\r\n  _assetTypes: [\r\n    'component',\r\n    'directive',\r\n    'filter'\r\n  ],\r\n\r\n  /**\r\n   * List of lifecycle hooks.\r\n   */\r\n  _lifecycleHooks: [\r\n    'beforeCreate',\r\n    'created',\r\n    'beforeMount',\r\n    'mounted',\r\n    'beforeUpdate',\r\n    'updated',\r\n    'beforeDestroy',\r\n    'destroyed',\r\n    'activated',\r\n    'deactivated'\r\n  ],\r\n\r\n  /**\r\n   * Max circular updates allowed in a scheduler flush cycle.\r\n   */\r\n  _maxUpdateCount: 100\r\n};\r\n\r\n/*  */\r\n\r\nvar emptyObject = Object.freeze({});\r\n\r\n/**\r\n * Check if a string starts with $ or _\r\n */\r\nfunction isReserved (str) {\r\n  var c = (str + '').charCodeAt(0);\r\n  return c === 0x24 || c === 0x5F\r\n}\r\n\r\n/**\r\n * Define a property.\r\n */\r\nfunction def (obj, key, val, enumerable) {\r\n  Object.defineProperty(obj, key, {\r\n    value: val,\r\n    enumerable: !!enumerable,\r\n    writable: true,\r\n    configurable: true\r\n  });\r\n}\r\n\r\n/**\r\n * Parse simple path.\r\n */\r\nvar bailRE = /[^\\w.$]/;\r\nfunction parsePath (path) {\r\n  if (bailRE.test(path)) {\r\n    return\r\n  }\r\n  var segments = path.split('.');\r\n  return function (obj) {\r\n    for (var i = 0; i < segments.length; i++) {\r\n      if (!obj) { return }\r\n      obj = obj[segments[i]];\r\n    }\r\n    return obj\r\n  }\r\n}\r\n\r\n/*  */\r\n/* globals MutationObserver */\r\n\r\n// can we use __proto__?\r\nvar hasProto = '__proto__' in {};\r\n\r\n// Browser environment sniffing\r\nvar inBrowser = typeof window !== 'undefined';\r\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\r\nvar isIE = UA && /msie|trident/.test(UA);\r\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\r\nvar isEdge = UA && UA.indexOf('edge/') > 0;\r\nvar isAndroid = UA && UA.indexOf('android') > 0;\r\nvar isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);\r\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\r\n\r\n// this needs to be lazy-evaled because vue may be required before\r\n// vue-server-renderer can set VUE_ENV\r\nvar _isServer;\r\nvar isServerRendering = function () {\r\n  if (_isServer === undefined) {\r\n    /* istanbul ignore if */\r\n    if (!inBrowser && typeof global !== 'undefined') {\r\n      // detect presence of vue-server-renderer and avoid\r\n      // Webpack shimming the process\r\n      _isServer = global['process'].env.VUE_ENV === 'server';\r\n    } else {\r\n      _isServer = false;\r\n    }\r\n  }\r\n  return _isServer\r\n};\r\n\r\n// detect devtools\r\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\r\n\r\n/* istanbul ignore next */\r\nfunction isNative (Ctor) {\r\n  return /native code/.test(Ctor.toString())\r\n}\r\n\r\nvar hasSymbol =\r\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\r\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\r\n\r\n/**\r\n * Defer a task to execute it asynchronously.\r\n */\r\nvar nextTick = (function () {\r\n  var callbacks = [];\r\n  var pending = false;\r\n  var timerFunc;\r\n\r\n  function nextTickHandler () {\r\n    pending = false;\r\n    var copies = callbacks.slice(0);\r\n    callbacks.length = 0;\r\n    for (var i = 0; i < copies.length; i++) {\r\n      copies[i]();\r\n    }\r\n  }\r\n\r\n  // the nextTick behavior leverages the microtask queue, which can be accessed\r\n  // via either native Promise.then or MutationObserver.\r\n  // MutationObserver has wider support, however it is seriously bugged in\r\n  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\r\n  // completely stops working after triggering a few times... so, if native\r\n  // Promise is available, we will use it:\r\n  /* istanbul ignore if */\r\n  if (typeof Promise !== 'undefined' && isNative(Promise)) {\r\n    var p = Promise.resolve();\r\n    var logError = function (err) { console.error(err); };\r\n    timerFunc = function () {\r\n      p.then(nextTickHandler).catch(logError);\r\n      // in problematic UIWebViews, Promise.then doesn't completely break, but\r\n      // it can get stuck in a weird state where callbacks are pushed into the\r\n      // microtask queue but the queue isn't being flushed, until the browser\r\n      // needs to do some other work, e.g. handle a timer. Therefore we can\r\n      // \"force\" the microtask queue to be flushed by adding an empty timer.\r\n      if (isIOS) { setTimeout(noop); }\r\n    };\r\n  } else if (typeof MutationObserver !== 'undefined' && (\r\n    isNative(MutationObserver) ||\r\n    // PhantomJS and iOS 7.x\r\n    MutationObserver.toString() === '[object MutationObserverConstructor]'\r\n  )) {\r\n    // use MutationObserver where native Promise is not available,\r\n    // e.g. PhantomJS IE11, iOS7, Android 4.4\r\n    var counter = 1;\r\n    var observer = new MutationObserver(nextTickHandler);\r\n    var textNode = document.createTextNode(String(counter));\r\n    observer.observe(textNode, {\r\n      characterData: true\r\n    });\r\n    timerFunc = function () {\r\n      counter = (counter + 1) % 2;\r\n      textNode.data = String(counter);\r\n    };\r\n  } else {\r\n    // fallback to setTimeout\r\n    /* istanbul ignore next */\r\n    timerFunc = function () {\r\n      setTimeout(nextTickHandler, 0);\r\n    };\r\n  }\r\n\r\n  return function queueNextTick (cb, ctx) {\r\n    var _resolve;\r\n    callbacks.push(function () {\r\n      if (cb) { cb.call(ctx); }\r\n      if (_resolve) { _resolve(ctx); }\r\n    });\r\n    if (!pending) {\r\n      pending = true;\r\n      timerFunc();\r\n    }\r\n    if (!cb && typeof Promise !== 'undefined') {\r\n      return new Promise(function (resolve) {\r\n        _resolve = resolve;\r\n      })\r\n    }\r\n  }\r\n})();\r\n\r\nvar _Set;\r\n/* istanbul ignore if */\r\nif (typeof Set !== 'undefined' && isNative(Set)) {\r\n  // use native Set when available.\r\n  _Set = Set;\r\n} else {\r\n  // a non-standard Set polyfill that only works with primitive keys.\r\n  _Set = (function () {\r\n    function Set () {\r\n      this.set = Object.create(null);\r\n    }\r\n    Set.prototype.has = function has (key) {\r\n      return this.set[key] === true\r\n    };\r\n    Set.prototype.add = function add (key) {\r\n      this.set[key] = true;\r\n    };\r\n    Set.prototype.clear = function clear () {\r\n      this.set = Object.create(null);\r\n    };\r\n\r\n    return Set;\r\n  }());\r\n}\r\n\r\nvar warn = noop;\r\nvar tip = noop;\r\nvar formatComponentName;\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n  var hasConsole = typeof console !== 'undefined';\r\n  var classifyRE = /(?:^|[-_])(\\w)/g;\r\n  var classify = function (str) { return str\r\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\r\n    .replace(/[-_]/g, ''); };\r\n\r\n  warn = function (msg, vm) {\r\n    if (hasConsole && (!config.silent)) {\r\n      console.error(\"[Vue warn]: \" + msg + \" \" + (\r\n        vm ? formatLocation(formatComponentName(vm)) : ''\r\n      ));\r\n    }\r\n  };\r\n\r\n  tip = function (msg, vm) {\r\n    if (hasConsole && (!config.silent)) {\r\n      console.warn(\"[Vue tip]: \" + msg + \" \" + (\r\n        vm ? formatLocation(formatComponentName(vm)) : ''\r\n      ));\r\n    }\r\n  };\r\n\r\n  formatComponentName = function (vm, includeFile) {\r\n    if (vm.$root === vm) {\r\n      return '<Root>'\r\n    }\r\n    var name = typeof vm === 'string'\r\n      ? vm\r\n      : typeof vm === 'function' && vm.options\r\n        ? vm.options.name\r\n        : vm._isVue\r\n          ? vm.$options.name || vm.$options._componentTag\r\n          : vm.name;\r\n\r\n    var file = vm._isVue && vm.$options.__file;\r\n    if (!name && file) {\r\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\r\n      name = match && match[1];\r\n    }\r\n\r\n    return (\r\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\r\n      (file && includeFile !== false ? (\" at \" + file) : '')\r\n    )\r\n  };\r\n\r\n  var formatLocation = function (str) {\r\n    if (str === \"<Anonymous>\") {\r\n      str += \" - use the \\\"name\\\" option for better debugging messages.\";\r\n    }\r\n    return (\"\\n(found in \" + str + \")\")\r\n  };\r\n}\r\n\r\n/*  */\r\n\r\n\r\nvar uid$1 = 0;\r\n\r\n/**\r\n * A dep is an observable that can have multiple\r\n * directives subscribing to it.\r\n */\r\nvar Dep = function Dep () {\r\n  this.id = uid$1++;\r\n  this.subs = [];\r\n};\r\n\r\nDep.prototype.addSub = function addSub (sub) {\r\n  this.subs.push(sub);\r\n};\r\n\r\nDep.prototype.removeSub = function removeSub (sub) {\r\n  remove(this.subs, sub);\r\n};\r\n\r\nDep.prototype.depend = function depend () {\r\n  if (Dep.target) {\r\n    Dep.target.addDep(this);\r\n  }\r\n};\r\n\r\nDep.prototype.notify = function notify () {\r\n  // stabilize the subscriber list first\r\n  var subs = this.subs.slice();\r\n  for (var i = 0, l = subs.length; i < l; i++) {\r\n    subs[i].update();\r\n  }\r\n};\r\n\r\n// the current target watcher being evaluated.\r\n// this is globally unique because there could be only one\r\n// watcher being evaluated at any time.\r\nDep.target = null;\r\nvar targetStack = [];\r\n\r\nfunction pushTarget (_target) {\r\n  if (Dep.target) { targetStack.push(Dep.target); }\r\n  Dep.target = _target;\r\n}\r\n\r\nfunction popTarget () {\r\n  Dep.target = targetStack.pop();\r\n}\r\n\r\n/*\r\n * not type checking this file because flow doesn't play well with\r\n * dynamically accessing methods on Array prototype\r\n */\r\n\r\nvar arrayProto = Array.prototype;\r\nvar arrayMethods = Object.create(arrayProto);[\r\n  'push',\r\n  'pop',\r\n  'shift',\r\n  'unshift',\r\n  'splice',\r\n  'sort',\r\n  'reverse'\r\n]\r\n.forEach(function (method) {\r\n  // cache original method\r\n  var original = arrayProto[method];\r\n  def(arrayMethods, method, function mutator () {\r\n    var arguments$1 = arguments;\r\n\r\n    // avoid leaking arguments:\r\n    // http://jsperf.com/closure-with-arguments\r\n    var i = arguments.length;\r\n    var args = new Array(i);\r\n    while (i--) {\r\n      args[i] = arguments$1[i];\r\n    }\r\n    var result = original.apply(this, args);\r\n    var ob = this.__ob__;\r\n    var inserted;\r\n    switch (method) {\r\n      case 'push':\r\n        inserted = args;\r\n        break\r\n      case 'unshift':\r\n        inserted = args;\r\n        break\r\n      case 'splice':\r\n        inserted = args.slice(2);\r\n        break\r\n    }\r\n    if (inserted) { ob.observeArray(inserted); }\r\n    // notify change\r\n    ob.dep.notify();\r\n    return result\r\n  });\r\n});\r\n\r\n/*  */\r\n\r\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\r\n\r\n/**\r\n * By default, when a reactive property is set, the new value is\r\n * also converted to become reactive. However when passing down props,\r\n * we don't want to force conversion because the value may be a nested value\r\n * under a frozen data structure. Converting it would defeat the optimization.\r\n */\r\nvar observerState = {\r\n  shouldConvert: true,\r\n  isSettingProps: false\r\n};\r\n\r\n/**\r\n * Observer class that are attached to each observed\r\n * object. Once attached, the observer converts target\r\n * object's property keys into getter/setters that\r\n * collect dependencies and dispatches updates.\r\n */\r\nvar Observer = function Observer (value) {\r\n  this.value = value;\r\n  this.dep = new Dep();\r\n  this.vmCount = 0;\r\n  def(value, '__ob__', this);\r\n  if (Array.isArray(value)) {\r\n    var augment = hasProto\r\n      ? protoAugment\r\n      : copyAugment;\r\n    augment(value, arrayMethods, arrayKeys);\r\n    this.observeArray(value);\r\n  } else {\r\n    this.walk(value);\r\n  }\r\n};\r\n\r\n/**\r\n * Walk through each property and convert them into\r\n * getter/setters. This method should only be called when\r\n * value type is Object.\r\n */\r\nObserver.prototype.walk = function walk (obj) {\r\n  var keys = Object.keys(obj);\r\n  for (var i = 0; i < keys.length; i++) {\r\n    defineReactive$$1(obj, keys[i], obj[keys[i]]);\r\n  }\r\n};\r\n\r\n/**\r\n * Observe a list of Array items.\r\n */\r\nObserver.prototype.observeArray = function observeArray (items) {\r\n  for (var i = 0, l = items.length; i < l; i++) {\r\n    observe(items[i]);\r\n  }\r\n};\r\n\r\n// helpers\r\n\r\n/**\r\n * Augment an target Object or Array by intercepting\r\n * the prototype chain using __proto__\r\n */\r\nfunction protoAugment (target, src) {\r\n  /* eslint-disable no-proto */\r\n  target.__proto__ = src;\r\n  /* eslint-enable no-proto */\r\n}\r\n\r\n/**\r\n * Augment an target Object or Array by defining\r\n * hidden properties.\r\n */\r\n/* istanbul ignore next */\r\nfunction copyAugment (target, src, keys) {\r\n  for (var i = 0, l = keys.length; i < l; i++) {\r\n    var key = keys[i];\r\n    def(target, key, src[key]);\r\n  }\r\n}\r\n\r\n/**\r\n * Attempt to create an observer instance for a value,\r\n * returns the new observer if successfully observed,\r\n * or the existing observer if the value already has one.\r\n */\r\nfunction observe (value, asRootData) {\r\n  if (!isObject(value)) {\r\n    return\r\n  }\r\n  var ob;\r\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\r\n    ob = value.__ob__;\r\n  } else if (\r\n    observerState.shouldConvert &&\r\n    !isServerRendering() &&\r\n    (Array.isArray(value) || isPlainObject(value)) &&\r\n    Object.isExtensible(value) &&\r\n    !value._isVue\r\n  ) {\r\n    ob = new Observer(value);\r\n  }\r\n  if (asRootData && ob) {\r\n    ob.vmCount++;\r\n  }\r\n  return ob\r\n}\r\n\r\n/**\r\n * Define a reactive property on an Object.\r\n */\r\nfunction defineReactive$$1 (\r\n  obj,\r\n  key,\r\n  val,\r\n  customSetter\r\n) {\r\n  var dep = new Dep();\r\n\r\n  var property = Object.getOwnPropertyDescriptor(obj, key);\r\n  if (property && property.configurable === false) {\r\n    return\r\n  }\r\n\r\n  // cater for pre-defined getter/setters\r\n  var getter = property && property.get;\r\n  var setter = property && property.set;\r\n\r\n  var childOb = observe(val);\r\n  Object.defineProperty(obj, key, {\r\n    enumerable: true,\r\n    configurable: true,\r\n    get: function reactiveGetter () {\r\n      var value = getter ? getter.call(obj) : val;\r\n      if (Dep.target) {\r\n        dep.depend();\r\n        if (childOb) {\r\n          childOb.dep.depend();\r\n        }\r\n        if (Array.isArray(value)) {\r\n          dependArray(value);\r\n        }\r\n      }\r\n      return value\r\n    },\r\n    set: function reactiveSetter (newVal) {\r\n      var value = getter ? getter.call(obj) : val;\r\n      /* eslint-disable no-self-compare */\r\n      if (newVal === value || (newVal !== newVal && value !== value)) {\r\n        return\r\n      }\r\n      /* eslint-enable no-self-compare */\r\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\r\n        customSetter();\r\n      }\r\n      if (setter) {\r\n        setter.call(obj, newVal);\r\n      } else {\r\n        val = newVal;\r\n      }\r\n      childOb = observe(newVal);\r\n      dep.notify();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set a property on an object. Adds the new property and\r\n * triggers change notification if the property doesn't\r\n * already exist.\r\n */\r\nfunction set (target, key, val) {\r\n  if (Array.isArray(target) && typeof key === 'number') {\r\n    target.length = Math.max(target.length, key);\r\n    target.splice(key, 1, val);\r\n    return val\r\n  }\r\n  if (hasOwn(target, key)) {\r\n    target[key] = val;\r\n    return val\r\n  }\r\n  var ob = (target ).__ob__;\r\n  if (target._isVue || (ob && ob.vmCount)) {\r\n    process.env.NODE_ENV !== 'production' && warn(\r\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\r\n      'at runtime - declare it upfront in the data option.'\r\n    );\r\n    return val\r\n  }\r\n  if (!ob) {\r\n    target[key] = val;\r\n    return val\r\n  }\r\n  defineReactive$$1(ob.value, key, val);\r\n  ob.dep.notify();\r\n  return val\r\n}\r\n\r\n/**\r\n * Delete a property and trigger change if necessary.\r\n */\r\nfunction del (target, key) {\r\n  if (Array.isArray(target) && typeof key === 'number') {\r\n    target.splice(key, 1);\r\n    return\r\n  }\r\n  var ob = (target ).__ob__;\r\n  if (target._isVue || (ob && ob.vmCount)) {\r\n    process.env.NODE_ENV !== 'production' && warn(\r\n      'Avoid deleting properties on a Vue instance or its root $data ' +\r\n      '- just set it to null.'\r\n    );\r\n    return\r\n  }\r\n  if (!hasOwn(target, key)) {\r\n    return\r\n  }\r\n  delete target[key];\r\n  if (!ob) {\r\n    return\r\n  }\r\n  ob.dep.notify();\r\n}\r\n\r\n/**\r\n * Collect dependencies on array elements when the array is touched, since\r\n * we cannot intercept array element access like property getters.\r\n */\r\nfunction dependArray (value) {\r\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\r\n    e = value[i];\r\n    e && e.__ob__ && e.__ob__.dep.depend();\r\n    if (Array.isArray(e)) {\r\n      dependArray(e);\r\n    }\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\n/**\r\n * Option overwriting strategies are functions that handle\r\n * how to merge a parent option value and a child option\r\n * value into the final value.\r\n */\r\nvar strats = config.optionMergeStrategies;\r\n\r\n/**\r\n * Options with restrictions\r\n */\r\nif (process.env.NODE_ENV !== 'production') {\r\n  strats.el = strats.propsData = function (parent, child, vm, key) {\r\n    if (!vm) {\r\n      warn(\r\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\r\n        'creation with the `new` keyword.'\r\n      );\r\n    }\r\n    return defaultStrat(parent, child)\r\n  };\r\n}\r\n\r\n/**\r\n * Helper that recursively merges two data objects together.\r\n */\r\nfunction mergeData (to, from) {\r\n  if (!from) { return to }\r\n  var key, toVal, fromVal;\r\n  var keys = Object.keys(from);\r\n  for (var i = 0; i < keys.length; i++) {\r\n    key = keys[i];\r\n    toVal = to[key];\r\n    fromVal = from[key];\r\n    if (!hasOwn(to, key)) {\r\n      set(to, key, fromVal);\r\n    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {\r\n      mergeData(toVal, fromVal);\r\n    }\r\n  }\r\n  return to\r\n}\r\n\r\n/**\r\n * Data\r\n */\r\nstrats.data = function (\r\n  parentVal,\r\n  childVal,\r\n  vm\r\n) {\r\n  if (!vm) {\r\n    // in a Vue.extend merge, both should be functions\r\n    if (!childVal) {\r\n      return parentVal\r\n    }\r\n    if (typeof childVal !== 'function') {\r\n      process.env.NODE_ENV !== 'production' && warn(\r\n        'The \"data\" option should be a function ' +\r\n        'that returns a per-instance value in component ' +\r\n        'definitions.',\r\n        vm\r\n      );\r\n      return parentVal\r\n    }\r\n    if (!parentVal) {\r\n      return childVal\r\n    }\r\n    // when parentVal & childVal are both present,\r\n    // we need to return a function that returns the\r\n    // merged result of both functions... no need to\r\n    // check if parentVal is a function here because\r\n    // it has to be a function to pass previous merges.\r\n    return function mergedDataFn () {\r\n      return mergeData(\r\n        childVal.call(this),\r\n        parentVal.call(this)\r\n      )\r\n    }\r\n  } else if (parentVal || childVal) {\r\n    return function mergedInstanceDataFn () {\r\n      // instance merge\r\n      var instanceData = typeof childVal === 'function'\r\n        ? childVal.call(vm)\r\n        : childVal;\r\n      var defaultData = typeof parentVal === 'function'\r\n        ? parentVal.call(vm)\r\n        : undefined;\r\n      if (instanceData) {\r\n        return mergeData(instanceData, defaultData)\r\n      } else {\r\n        return defaultData\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Hooks and props are merged as arrays.\r\n */\r\nfunction mergeHook (\r\n  parentVal,\r\n  childVal\r\n) {\r\n  return childVal\r\n    ? parentVal\r\n      ? parentVal.concat(childVal)\r\n      : Array.isArray(childVal)\r\n        ? childVal\r\n        : [childVal]\r\n    : parentVal\r\n}\r\n\r\nconfig._lifecycleHooks.forEach(function (hook) {\r\n  strats[hook] = mergeHook;\r\n});\r\n\r\n/**\r\n * Assets\r\n *\r\n * When a vm is present (instance creation), we need to do\r\n * a three-way merge between constructor options, instance\r\n * options and parent options.\r\n */\r\nfunction mergeAssets (parentVal, childVal) {\r\n  var res = Object.create(parentVal || null);\r\n  return childVal\r\n    ? extend(res, childVal)\r\n    : res\r\n}\r\n\r\nconfig._assetTypes.forEach(function (type) {\r\n  strats[type + 's'] = mergeAssets;\r\n});\r\n\r\n/**\r\n * Watchers.\r\n *\r\n * Watchers hashes should not overwrite one\r\n * another, so we merge them as arrays.\r\n */\r\nstrats.watch = function (parentVal, childVal) {\r\n  /* istanbul ignore if */\r\n  if (!childVal) { return Object.create(parentVal || null) }\r\n  if (!parentVal) { return childVal }\r\n  var ret = {};\r\n  extend(ret, parentVal);\r\n  for (var key in childVal) {\r\n    var parent = ret[key];\r\n    var child = childVal[key];\r\n    if (parent && !Array.isArray(parent)) {\r\n      parent = [parent];\r\n    }\r\n    ret[key] = parent\r\n      ? parent.concat(child)\r\n      : [child];\r\n  }\r\n  return ret\r\n};\r\n\r\n/**\r\n * Other object hashes.\r\n */\r\nstrats.props =\r\nstrats.methods =\r\nstrats.computed = function (parentVal, childVal) {\r\n  if (!childVal) { return Object.create(parentVal || null) }\r\n  if (!parentVal) { return childVal }\r\n  var ret = Object.create(null);\r\n  extend(ret, parentVal);\r\n  extend(ret, childVal);\r\n  return ret\r\n};\r\n\r\n/**\r\n * Default strategy.\r\n */\r\nvar defaultStrat = function (parentVal, childVal) {\r\n  return childVal === undefined\r\n    ? parentVal\r\n    : childVal\r\n};\r\n\r\n/**\r\n * Validate component names\r\n */\r\nfunction checkComponents (options) {\r\n  for (var key in options.components) {\r\n    var lower = key.toLowerCase();\r\n    if (isBuiltInTag(lower) || config.isReservedTag(lower)) {\r\n      warn(\r\n        'Do not use built-in or reserved HTML elements as component ' +\r\n        'id: ' + key\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Ensure all props option syntax are normalized into the\r\n * Object-based format.\r\n */\r\nfunction normalizeProps (options) {\r\n  var props = options.props;\r\n  if (!props) { return }\r\n  var res = {};\r\n  var i, val, name;\r\n  if (Array.isArray(props)) {\r\n    i = props.length;\r\n    while (i--) {\r\n      val = props[i];\r\n      if (typeof val === 'string') {\r\n        name = camelize(val);\r\n        res[name] = { type: null };\r\n      } else if (process.env.NODE_ENV !== 'production') {\r\n        warn('props must be strings when using array syntax.');\r\n      }\r\n    }\r\n  } else if (isPlainObject(props)) {\r\n    for (var key in props) {\r\n      val = props[key];\r\n      name = camelize(key);\r\n      res[name] = isPlainObject(val)\r\n        ? val\r\n        : { type: val };\r\n    }\r\n  }\r\n  options.props = res;\r\n}\r\n\r\n/**\r\n * Normalize raw function directives into object format.\r\n */\r\nfunction normalizeDirectives (options) {\r\n  var dirs = options.directives;\r\n  if (dirs) {\r\n    for (var key in dirs) {\r\n      var def = dirs[key];\r\n      if (typeof def === 'function') {\r\n        dirs[key] = { bind: def, update: def };\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Merge two option objects into a new one.\r\n * Core utility used in both instantiation and inheritance.\r\n */\r\nfunction mergeOptions (\r\n  parent,\r\n  child,\r\n  vm\r\n) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    checkComponents(child);\r\n  }\r\n  normalizeProps(child);\r\n  normalizeDirectives(child);\r\n  var extendsFrom = child.extends;\r\n  if (extendsFrom) {\r\n    parent = typeof extendsFrom === 'function'\r\n      ? mergeOptions(parent, extendsFrom.options, vm)\r\n      : mergeOptions(parent, extendsFrom, vm);\r\n  }\r\n  if (child.mixins) {\r\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\r\n      var mixin = child.mixins[i];\r\n      if (mixin.prototype instanceof Vue$3) {\r\n        mixin = mixin.options;\r\n      }\r\n      parent = mergeOptions(parent, mixin, vm);\r\n    }\r\n  }\r\n  var options = {};\r\n  var key;\r\n  for (key in parent) {\r\n    mergeField(key);\r\n  }\r\n  for (key in child) {\r\n    if (!hasOwn(parent, key)) {\r\n      mergeField(key);\r\n    }\r\n  }\r\n  function mergeField (key) {\r\n    var strat = strats[key] || defaultStrat;\r\n    options[key] = strat(parent[key], child[key], vm, key);\r\n  }\r\n  return options\r\n}\r\n\r\n/**\r\n * Resolve an asset.\r\n * This function is used because child instances need access\r\n * to assets defined in its ancestor chain.\r\n */\r\nfunction resolveAsset (\r\n  options,\r\n  type,\r\n  id,\r\n  warnMissing\r\n) {\r\n  /* istanbul ignore if */\r\n  if (typeof id !== 'string') {\r\n    return\r\n  }\r\n  var assets = options[type];\r\n  // check local registration variations first\r\n  if (hasOwn(assets, id)) { return assets[id] }\r\n  var camelizedId = camelize(id);\r\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\r\n  var PascalCaseId = capitalize(camelizedId);\r\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\r\n  // fallback to prototype chain\r\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\r\n  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {\r\n    warn(\r\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\r\n      options\r\n    );\r\n  }\r\n  return res\r\n}\r\n\r\n/*  */\r\n\r\nfunction validateProp (\r\n  key,\r\n  propOptions,\r\n  propsData,\r\n  vm\r\n) {\r\n  var prop = propOptions[key];\r\n  var absent = !hasOwn(propsData, key);\r\n  var value = propsData[key];\r\n  // handle boolean props\r\n  if (isType(Boolean, prop.type)) {\r\n    if (absent && !hasOwn(prop, 'default')) {\r\n      value = false;\r\n    } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {\r\n      value = true;\r\n    }\r\n  }\r\n  // check default value\r\n  if (value === undefined) {\r\n    value = getPropDefaultValue(vm, prop, key);\r\n    // since the default value is a fresh copy,\r\n    // make sure to observe it.\r\n    var prevShouldConvert = observerState.shouldConvert;\r\n    observerState.shouldConvert = true;\r\n    observe(value);\r\n    observerState.shouldConvert = prevShouldConvert;\r\n  }\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    assertProp(prop, key, value, vm, absent);\r\n  }\r\n  return value\r\n}\r\n\r\n/**\r\n * Get the default value of a prop.\r\n */\r\nfunction getPropDefaultValue (vm, prop, key) {\r\n  // no default, return undefined\r\n  if (!hasOwn(prop, 'default')) {\r\n    return undefined\r\n  }\r\n  var def = prop.default;\r\n  // warn against non-factory defaults for Object & Array\r\n  if (process.env.NODE_ENV !== 'production' && isObject(def)) {\r\n    warn(\r\n      'Invalid default value for prop \"' + key + '\": ' +\r\n      'Props with type Object/Array must use a factory function ' +\r\n      'to return the default value.',\r\n      vm\r\n    );\r\n  }\r\n  // the raw prop value was also undefined from previous render,\r\n  // return previous default value to avoid unnecessary watcher trigger\r\n  if (vm && vm.$options.propsData &&\r\n    vm.$options.propsData[key] === undefined &&\r\n    vm._props[key] !== undefined) {\r\n    return vm._props[key]\r\n  }\r\n  // call factory function for non-Function types\r\n  // a value is Function if its prototype is function even across different execution context\r\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\r\n    ? def.call(vm)\r\n    : def\r\n}\r\n\r\n/**\r\n * Assert whether a prop is valid.\r\n */\r\nfunction assertProp (\r\n  prop,\r\n  name,\r\n  value,\r\n  vm,\r\n  absent\r\n) {\r\n  if (prop.required && absent) {\r\n    warn(\r\n      'Missing required prop: \"' + name + '\"',\r\n      vm\r\n    );\r\n    return\r\n  }\r\n  if (value == null && !prop.required) {\r\n    return\r\n  }\r\n  var type = prop.type;\r\n  var valid = !type || type === true;\r\n  var expectedTypes = [];\r\n  if (type) {\r\n    if (!Array.isArray(type)) {\r\n      type = [type];\r\n    }\r\n    for (var i = 0; i < type.length && !valid; i++) {\r\n      var assertedType = assertType(value, type[i]);\r\n      expectedTypes.push(assertedType.expectedType || '');\r\n      valid = assertedType.valid;\r\n    }\r\n  }\r\n  if (!valid) {\r\n    warn(\r\n      'Invalid prop: type check failed for prop \"' + name + '\".' +\r\n      ' Expected ' + expectedTypes.map(capitalize).join(', ') +\r\n      ', got ' + Object.prototype.toString.call(value).slice(8, -1) + '.',\r\n      vm\r\n    );\r\n    return\r\n  }\r\n  var validator = prop.validator;\r\n  if (validator) {\r\n    if (!validator(value)) {\r\n      warn(\r\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\r\n        vm\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Assert the type of a value\r\n */\r\nfunction assertType (value, type) {\r\n  var valid;\r\n  var expectedType = getType(type);\r\n  if (expectedType === 'String') {\r\n    valid = typeof value === (expectedType = 'string');\r\n  } else if (expectedType === 'Number') {\r\n    valid = typeof value === (expectedType = 'number');\r\n  } else if (expectedType === 'Boolean') {\r\n    valid = typeof value === (expectedType = 'boolean');\r\n  } else if (expectedType === 'Function') {\r\n    valid = typeof value === (expectedType = 'function');\r\n  } else if (expectedType === 'Object') {\r\n    valid = isPlainObject(value);\r\n  } else if (expectedType === 'Array') {\r\n    valid = Array.isArray(value);\r\n  } else {\r\n    valid = value instanceof type;\r\n  }\r\n  return {\r\n    valid: valid,\r\n    expectedType: expectedType\r\n  }\r\n}\r\n\r\n/**\r\n * Use function string name to check built-in types,\r\n * because a simple equality check will fail when running\r\n * across different vms / iframes.\r\n */\r\nfunction getType (fn) {\r\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\r\n  return match && match[1]\r\n}\r\n\r\nfunction isType (type, fn) {\r\n  if (!Array.isArray(fn)) {\r\n    return getType(fn) === getType(type)\r\n  }\r\n  for (var i = 0, len = fn.length; i < len; i++) {\r\n    if (getType(fn[i]) === getType(type)) {\r\n      return true\r\n    }\r\n  }\r\n  /* istanbul ignore next */\r\n  return false\r\n}\r\n\r\nfunction handleError (err, vm, info) {\r\n  if (config.errorHandler) {\r\n    config.errorHandler.call(null, err, vm, info);\r\n  } else {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      warn((\"Error in \" + info + \":\"), vm);\r\n    }\r\n    /* istanbul ignore else */\r\n    if (inBrowser && typeof console !== 'undefined') {\r\n      console.error(err);\r\n    } else {\r\n      throw err\r\n    }\r\n  }\r\n}\r\n\r\n/* not type checking this file because flow doesn't play well with Proxy */\r\n\r\nvar initProxy;\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n  var allowedGlobals = makeMap(\r\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\r\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\r\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\r\n    'require' // for Webpack/Browserify\r\n  );\r\n\r\n  var warnNonPresent = function (target, key) {\r\n    warn(\r\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\r\n      \"referenced during render. Make sure to declare reactive data \" +\r\n      \"properties in the data option.\",\r\n      target\r\n    );\r\n  };\r\n\r\n  var hasProxy =\r\n    typeof Proxy !== 'undefined' &&\r\n    Proxy.toString().match(/native code/);\r\n\r\n  if (hasProxy) {\r\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta');\r\n    config.keyCodes = new Proxy(config.keyCodes, {\r\n      set: function set (target, key, value) {\r\n        if (isBuiltInModifier(key)) {\r\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\r\n          return false\r\n        } else {\r\n          target[key] = value;\r\n          return true\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  var hasHandler = {\r\n    has: function has (target, key) {\r\n      var has = key in target;\r\n      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';\r\n      if (!has && !isAllowed) {\r\n        warnNonPresent(target, key);\r\n      }\r\n      return has || !isAllowed\r\n    }\r\n  };\r\n\r\n  var getHandler = {\r\n    get: function get (target, key) {\r\n      if (typeof key === 'string' && !(key in target)) {\r\n        warnNonPresent(target, key);\r\n      }\r\n      return target[key]\r\n    }\r\n  };\r\n\r\n  initProxy = function initProxy (vm) {\r\n    if (hasProxy) {\r\n      // determine which proxy handler to use\r\n      var options = vm.$options;\r\n      var handlers = options.render && options.render._withStripped\r\n        ? getHandler\r\n        : hasHandler;\r\n      vm._renderProxy = new Proxy(vm, handlers);\r\n    } else {\r\n      vm._renderProxy = vm;\r\n    }\r\n  };\r\n}\r\n\r\nvar mark;\r\nvar measure;\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n  var perf = inBrowser && window.performance;\r\n  /* istanbul ignore if */\r\n  if (\r\n    perf &&\r\n    perf.mark &&\r\n    perf.measure &&\r\n    perf.clearMarks &&\r\n    perf.clearMeasures\r\n  ) {\r\n    mark = function (tag) { return perf.mark(tag); };\r\n    measure = function (name, startTag, endTag) {\r\n      perf.measure(name, startTag, endTag);\r\n      perf.clearMarks(startTag);\r\n      perf.clearMarks(endTag);\r\n      perf.clearMeasures(name);\r\n    };\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nvar VNode = function VNode (\r\n  tag,\r\n  data,\r\n  children,\r\n  text,\r\n  elm,\r\n  context,\r\n  componentOptions\r\n) {\r\n  this.tag = tag;\r\n  this.data = data;\r\n  this.children = children;\r\n  this.text = text;\r\n  this.elm = elm;\r\n  this.ns = undefined;\r\n  this.context = context;\r\n  this.functionalContext = undefined;\r\n  this.key = data && data.key;\r\n  this.componentOptions = componentOptions;\r\n  this.componentInstance = undefined;\r\n  this.parent = undefined;\r\n  this.raw = false;\r\n  this.isStatic = false;\r\n  this.isRootInsert = true;\r\n  this.isComment = false;\r\n  this.isCloned = false;\r\n  this.isOnce = false;\r\n};\r\n\r\nvar prototypeAccessors = { child: {} };\r\n\r\n// DEPRECATED: alias for componentInstance for backwards compat.\r\n/* istanbul ignore next */\r\nprototypeAccessors.child.get = function () {\r\n  return this.componentInstance\r\n};\r\n\r\nObject.defineProperties( VNode.prototype, prototypeAccessors );\r\n\r\nvar createEmptyVNode = function () {\r\n  var node = new VNode();\r\n  node.text = '';\r\n  node.isComment = true;\r\n  return node\r\n};\r\n\r\nfunction createTextVNode (val) {\r\n  return new VNode(undefined, undefined, undefined, String(val))\r\n}\r\n\r\n// optimized shallow clone\r\n// used for static nodes and slot nodes because they may be reused across\r\n// multiple renders, cloning them avoids errors when DOM manipulations rely\r\n// on their elm reference.\r\nfunction cloneVNode (vnode) {\r\n  var cloned = new VNode(\r\n    vnode.tag,\r\n    vnode.data,\r\n    vnode.children,\r\n    vnode.text,\r\n    vnode.elm,\r\n    vnode.context,\r\n    vnode.componentOptions\r\n  );\r\n  cloned.ns = vnode.ns;\r\n  cloned.isStatic = vnode.isStatic;\r\n  cloned.key = vnode.key;\r\n  cloned.isCloned = true;\r\n  return cloned\r\n}\r\n\r\nfunction cloneVNodes (vnodes) {\r\n  var len = vnodes.length;\r\n  var res = new Array(len);\r\n  for (var i = 0; i < len; i++) {\r\n    res[i] = cloneVNode(vnodes[i]);\r\n  }\r\n  return res\r\n}\r\n\r\n/*  */\r\n\r\nvar normalizeEvent = cached(function (name) {\r\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\r\n  name = once$$1 ? name.slice(1) : name;\r\n  var capture = name.charAt(0) === '!';\r\n  name = capture ? name.slice(1) : name;\r\n  return {\r\n    name: name,\r\n    once: once$$1,\r\n    capture: capture\r\n  }\r\n});\r\n\r\nfunction createFnInvoker (fns) {\r\n  function invoker () {\r\n    var arguments$1 = arguments;\r\n\r\n    var fns = invoker.fns;\r\n    if (Array.isArray(fns)) {\r\n      for (var i = 0; i < fns.length; i++) {\r\n        fns[i].apply(null, arguments$1);\r\n      }\r\n    } else {\r\n      // return handler return value for single handlers\r\n      return fns.apply(null, arguments)\r\n    }\r\n  }\r\n  invoker.fns = fns;\r\n  return invoker\r\n}\r\n\r\nfunction updateListeners (\r\n  on,\r\n  oldOn,\r\n  add,\r\n  remove$$1,\r\n  vm\r\n) {\r\n  var name, cur, old, event;\r\n  for (name in on) {\r\n    cur = on[name];\r\n    old = oldOn[name];\r\n    event = normalizeEvent(name);\r\n    if (!cur) {\r\n      process.env.NODE_ENV !== 'production' && warn(\r\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\r\n        vm\r\n      );\r\n    } else if (!old) {\r\n      if (!cur.fns) {\r\n        cur = on[name] = createFnInvoker(cur);\r\n      }\r\n      add(event.name, cur, event.once, event.capture);\r\n    } else if (cur !== old) {\r\n      old.fns = cur;\r\n      on[name] = old;\r\n    }\r\n  }\r\n  for (name in oldOn) {\r\n    if (!on[name]) {\r\n      event = normalizeEvent(name);\r\n      remove$$1(event.name, oldOn[name], event.capture);\r\n    }\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nfunction mergeVNodeHook (def, hookKey, hook) {\r\n  var invoker;\r\n  var oldHook = def[hookKey];\r\n\r\n  function wrappedHook () {\r\n    hook.apply(this, arguments);\r\n    // important: remove merged hook to ensure it's called only once\r\n    // and prevent memory leak\r\n    remove(invoker.fns, wrappedHook);\r\n  }\r\n\r\n  if (!oldHook) {\r\n    // no existing hook\r\n    invoker = createFnInvoker([wrappedHook]);\r\n  } else {\r\n    /* istanbul ignore if */\r\n    if (oldHook.fns && oldHook.merged) {\r\n      // already a merged invoker\r\n      invoker = oldHook;\r\n      invoker.fns.push(wrappedHook);\r\n    } else {\r\n      // existing plain hook\r\n      invoker = createFnInvoker([oldHook, wrappedHook]);\r\n    }\r\n  }\r\n\r\n  invoker.merged = true;\r\n  def[hookKey] = invoker;\r\n}\r\n\r\n/*  */\r\n\r\n// The template compiler attempts to minimize the need for normalization by\r\n// statically analyzing the template at compile time.\r\n//\r\n// For plain HTML markup, normalization can be completely skipped because the\r\n// generated render function is guaranteed to return Array<VNode>. There are\r\n// two cases where extra normalization is needed:\r\n\r\n// 1. When the children contains components - because a functional component\r\n// may return an Array instead of a single root. In this case, just a simple\r\n// normalization is needed - if any child is an Array, we flatten the whole\r\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\r\n// because functional components already normalize their own children.\r\nfunction simpleNormalizeChildren (children) {\r\n  for (var i = 0; i < children.length; i++) {\r\n    if (Array.isArray(children[i])) {\r\n      return Array.prototype.concat.apply([], children)\r\n    }\r\n  }\r\n  return children\r\n}\r\n\r\n// 2. When the children contains constructs that always generated nested Arrays,\r\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\r\n// with hand-written render functions / JSX. In such cases a full normalization\r\n// is needed to cater to all possible types of children values.\r\nfunction normalizeChildren (children) {\r\n  return isPrimitive(children)\r\n    ? [createTextVNode(children)]\r\n    : Array.isArray(children)\r\n      ? normalizeArrayChildren(children)\r\n      : undefined\r\n}\r\n\r\nfunction normalizeArrayChildren (children, nestedIndex) {\r\n  var res = [];\r\n  var i, c, last;\r\n  for (i = 0; i < children.length; i++) {\r\n    c = children[i];\r\n    if (c == null || typeof c === 'boolean') { continue }\r\n    last = res[res.length - 1];\r\n    //  nested\r\n    if (Array.isArray(c)) {\r\n      res.push.apply(res, normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i)));\r\n    } else if (isPrimitive(c)) {\r\n      if (last && last.text) {\r\n        last.text += String(c);\r\n      } else if (c !== '') {\r\n        // convert primitive to vnode\r\n        res.push(createTextVNode(c));\r\n      }\r\n    } else {\r\n      if (c.text && last && last.text) {\r\n        res[res.length - 1] = createTextVNode(last.text + c.text);\r\n      } else {\r\n        // default key for nested array children (likely generated by v-for)\r\n        if (c.tag && c.key == null && nestedIndex != null) {\r\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\r\n        }\r\n        res.push(c);\r\n      }\r\n    }\r\n  }\r\n  return res\r\n}\r\n\r\n/*  */\r\n\r\nfunction getFirstComponentChild (children) {\r\n  return children && children.filter(function (c) { return c && c.componentOptions; })[0]\r\n}\r\n\r\n/*  */\r\n\r\nfunction initEvents (vm) {\r\n  vm._events = Object.create(null);\r\n  vm._hasHookEvent = false;\r\n  // init parent attached events\r\n  var listeners = vm.$options._parentListeners;\r\n  if (listeners) {\r\n    updateComponentListeners(vm, listeners);\r\n  }\r\n}\r\n\r\nvar target;\r\n\r\nfunction add (event, fn, once$$1) {\r\n  if (once$$1) {\r\n    target.$once(event, fn);\r\n  } else {\r\n    target.$on(event, fn);\r\n  }\r\n}\r\n\r\nfunction remove$1 (event, fn) {\r\n  target.$off(event, fn);\r\n}\r\n\r\nfunction updateComponentListeners (\r\n  vm,\r\n  listeners,\r\n  oldListeners\r\n) {\r\n  target = vm;\r\n  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);\r\n}\r\n\r\nfunction eventsMixin (Vue) {\r\n  var hookRE = /^hook:/;\r\n  Vue.prototype.$on = function (event, fn) {\r\n    var this$1 = this;\r\n\r\n    var vm = this;\r\n    if (Array.isArray(event)) {\r\n      for (var i = 0, l = event.length; i < l; i++) {\r\n        this$1.$on(event[i], fn);\r\n      }\r\n    } else {\r\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\r\n      // optimize hook:event cost by using a boolean flag marked at registration\r\n      // instead of a hash lookup\r\n      if (hookRE.test(event)) {\r\n        vm._hasHookEvent = true;\r\n      }\r\n    }\r\n    return vm\r\n  };\r\n\r\n  Vue.prototype.$once = function (event, fn) {\r\n    var vm = this;\r\n    function on () {\r\n      vm.$off(event, on);\r\n      fn.apply(vm, arguments);\r\n    }\r\n    on.fn = fn;\r\n    vm.$on(event, on);\r\n    return vm\r\n  };\r\n\r\n  Vue.prototype.$off = function (event, fn) {\r\n    var this$1 = this;\r\n\r\n    var vm = this;\r\n    // all\r\n    if (!arguments.length) {\r\n      vm._events = Object.create(null);\r\n      return vm\r\n    }\r\n    // array of events\r\n    if (Array.isArray(event)) {\r\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\r\n        this$1.$off(event[i$1], fn);\r\n      }\r\n      return vm\r\n    }\r\n    // specific event\r\n    var cbs = vm._events[event];\r\n    if (!cbs) {\r\n      return vm\r\n    }\r\n    if (arguments.length === 1) {\r\n      vm._events[event] = null;\r\n      return vm\r\n    }\r\n    // specific handler\r\n    var cb;\r\n    var i = cbs.length;\r\n    while (i--) {\r\n      cb = cbs[i];\r\n      if (cb === fn || cb.fn === fn) {\r\n        cbs.splice(i, 1);\r\n        break\r\n      }\r\n    }\r\n    return vm\r\n  };\r\n\r\n  Vue.prototype.$emit = function (event) {\r\n    var vm = this;\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      var lowerCaseEvent = event.toLowerCase();\r\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\r\n        tip(\r\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\r\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\r\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\r\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\r\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\r\n        );\r\n      }\r\n    }\r\n    var cbs = vm._events[event];\r\n    if (cbs) {\r\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\r\n      var args = toArray(arguments, 1);\r\n      for (var i = 0, l = cbs.length; i < l; i++) {\r\n        cbs[i].apply(vm, args);\r\n      }\r\n    }\r\n    return vm\r\n  };\r\n}\r\n\r\n/*  */\r\n\r\n/**\r\n * Runtime helper for resolving raw children VNodes into a slot object.\r\n */\r\nfunction resolveSlots (\r\n  children,\r\n  context\r\n) {\r\n  var slots = {};\r\n  if (!children) {\r\n    return slots\r\n  }\r\n  var defaultSlot = [];\r\n  var name, child;\r\n  for (var i = 0, l = children.length; i < l; i++) {\r\n    child = children[i];\r\n    // named slots should only be respected if the vnode was rendered in the\r\n    // same context.\r\n    if ((child.context === context || child.functionalContext === context) &&\r\n        child.data && (name = child.data.slot)) {\r\n      var slot = (slots[name] || (slots[name] = []));\r\n      if (child.tag === 'template') {\r\n        slot.push.apply(slot, child.children);\r\n      } else {\r\n        slot.push(child);\r\n      }\r\n    } else {\r\n      defaultSlot.push(child);\r\n    }\r\n  }\r\n  // ignore whitespace\r\n  if (!defaultSlot.every(isWhitespace)) {\r\n    slots.default = defaultSlot;\r\n  }\r\n  return slots\r\n}\r\n\r\nfunction isWhitespace (node) {\r\n  return node.isComment || node.text === ' '\r\n}\r\n\r\nfunction resolveScopedSlots (\r\n  fns\r\n) {\r\n  var res = {};\r\n  for (var i = 0; i < fns.length; i++) {\r\n    res[fns[i][0]] = fns[i][1];\r\n  }\r\n  return res\r\n}\r\n\r\n/*  */\r\n\r\nvar activeInstance = null;\r\n\r\nfunction initLifecycle (vm) {\r\n  var options = vm.$options;\r\n\r\n  // locate first non-abstract parent\r\n  var parent = options.parent;\r\n  if (parent && !options.abstract) {\r\n    while (parent.$options.abstract && parent.$parent) {\r\n      parent = parent.$parent;\r\n    }\r\n    parent.$children.push(vm);\r\n  }\r\n\r\n  vm.$parent = parent;\r\n  vm.$root = parent ? parent.$root : vm;\r\n\r\n  vm.$children = [];\r\n  vm.$refs = {};\r\n\r\n  vm._watcher = null;\r\n  vm._inactive = null;\r\n  vm._directInactive = false;\r\n  vm._isMounted = false;\r\n  vm._isDestroyed = false;\r\n  vm._isBeingDestroyed = false;\r\n}\r\n\r\nfunction lifecycleMixin (Vue) {\r\n  Vue.prototype._update = function (vnode, hydrating) {\r\n    var vm = this;\r\n    if (vm._isMounted) {\r\n      callHook(vm, 'beforeUpdate');\r\n    }\r\n    var prevEl = vm.$el;\r\n    var prevVnode = vm._vnode;\r\n    var prevActiveInstance = activeInstance;\r\n    activeInstance = vm;\r\n    vm._vnode = vnode;\r\n    // Vue.prototype.__patch__ is injected in entry points\r\n    // based on the rendering backend used.\r\n    if (!prevVnode) {\r\n      // initial render\r\n      vm.$el = vm.__patch__(\r\n        vm.$el, vnode, hydrating, false /* removeOnly */,\r\n        vm.$options._parentElm,\r\n        vm.$options._refElm\r\n      );\r\n    } else {\r\n      // updates\r\n      vm.$el = vm.__patch__(prevVnode, vnode);\r\n    }\r\n    activeInstance = prevActiveInstance;\r\n    // update __vue__ reference\r\n    if (prevEl) {\r\n      prevEl.__vue__ = null;\r\n    }\r\n    if (vm.$el) {\r\n      vm.$el.__vue__ = vm;\r\n    }\r\n    // if parent is an HOC, update its $el as well\r\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\r\n      vm.$parent.$el = vm.$el;\r\n    }\r\n    // updated hook is called by the scheduler to ensure that children are\r\n    // updated in a parent's updated hook.\r\n  };\r\n\r\n  Vue.prototype.$forceUpdate = function () {\r\n    var vm = this;\r\n    if (vm._watcher) {\r\n      vm._watcher.update();\r\n    }\r\n  };\r\n\r\n  Vue.prototype.$destroy = function () {\r\n    var vm = this;\r\n    if (vm._isBeingDestroyed) {\r\n      return\r\n    }\r\n    callHook(vm, 'beforeDestroy');\r\n    vm._isBeingDestroyed = true;\r\n    // remove self from parent\r\n    var parent = vm.$parent;\r\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\r\n      remove(parent.$children, vm);\r\n    }\r\n    // teardown watchers\r\n    if (vm._watcher) {\r\n      vm._watcher.teardown();\r\n    }\r\n    var i = vm._watchers.length;\r\n    while (i--) {\r\n      vm._watchers[i].teardown();\r\n    }\r\n    // remove reference from data ob\r\n    // frozen object may not have observer.\r\n    if (vm._data.__ob__) {\r\n      vm._data.__ob__.vmCount--;\r\n    }\r\n    // call the last hook...\r\n    vm._isDestroyed = true;\r\n    // invoke destroy hooks on current rendered tree\r\n    vm.__patch__(vm._vnode, null);\r\n    // fire destroyed hook\r\n    callHook(vm, 'destroyed');\r\n    // turn off all instance listeners.\r\n    vm.$off();\r\n    // remove __vue__ reference\r\n    if (vm.$el) {\r\n      vm.$el.__vue__ = null;\r\n    }\r\n    // remove reference to DOM nodes (prevents leak)\r\n    vm.$options._parentElm = vm.$options._refElm = null;\r\n  };\r\n}\r\n\r\nfunction mountComponent (\r\n  vm,\r\n  el,\r\n  hydrating\r\n) {\r\n  vm.$el = el;\r\n  if (!vm.$options.render) {\r\n    vm.$options.render = createEmptyVNode;\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      /* istanbul ignore if */\r\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\r\n        vm.$options.el || el) {\r\n        warn(\r\n          'You are using the runtime-only build of Vue where the template ' +\r\n          'compiler is not available. Either pre-compile the templates into ' +\r\n          'render functions, or use the compiler-included build.',\r\n          vm\r\n        );\r\n      } else {\r\n        warn(\r\n          'Failed to mount component: template or render function not defined.',\r\n          vm\r\n        );\r\n      }\r\n    }\r\n  }\r\n  callHook(vm, 'beforeMount');\r\n\r\n  var updateComponent;\r\n  /* istanbul ignore if */\r\n  if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\r\n    updateComponent = function () {\r\n      var name = vm._name;\r\n      var id = vm._uid;\r\n      var startTag = \"vue-perf-start:\" + id;\r\n      var endTag = \"vue-perf-end:\" + id;\r\n\r\n      mark(startTag);\r\n      var vnode = vm._render();\r\n      mark(endTag);\r\n      measure((name + \" render\"), startTag, endTag);\r\n\r\n      mark(startTag);\r\n      vm._update(vnode, hydrating);\r\n      mark(endTag);\r\n      measure((name + \" patch\"), startTag, endTag);\r\n    };\r\n  } else {\r\n    updateComponent = function () {\r\n      vm._update(vm._render(), hydrating);\r\n    };\r\n  }\r\n\r\n  vm._watcher = new Watcher(vm, updateComponent, noop);\r\n  hydrating = false;\r\n\r\n  // manually mounted instance, call mounted on self\r\n  // mounted is called for render-created child components in its inserted hook\r\n  if (vm.$vnode == null) {\r\n    vm._isMounted = true;\r\n    callHook(vm, 'mounted');\r\n  }\r\n  return vm\r\n}\r\n\r\nfunction updateChildComponent (\r\n  vm,\r\n  propsData,\r\n  listeners,\r\n  parentVnode,\r\n  renderChildren\r\n) {\r\n  // determine whether component has slot children\r\n  // we need to do this before overwriting $options._renderChildren\r\n  var hasChildren = !!(\r\n    renderChildren ||               // has new static slots\r\n    vm.$options._renderChildren ||  // has old static slots\r\n    parentVnode.data.scopedSlots || // has new scoped slots\r\n    vm.$scopedSlots !== emptyObject // has old scoped slots\r\n  );\r\n\r\n  vm.$options._parentVnode = parentVnode;\r\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\r\n  if (vm._vnode) { // update child tree's parent\r\n    vm._vnode.parent = parentVnode;\r\n  }\r\n  vm.$options._renderChildren = renderChildren;\r\n\r\n  // update props\r\n  if (propsData && vm.$options.props) {\r\n    observerState.shouldConvert = false;\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      observerState.isSettingProps = true;\r\n    }\r\n    var props = vm._props;\r\n    var propKeys = vm.$options._propKeys || [];\r\n    for (var i = 0; i < propKeys.length; i++) {\r\n      var key = propKeys[i];\r\n      props[key] = validateProp(key, vm.$options.props, propsData, vm);\r\n    }\r\n    observerState.shouldConvert = true;\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      observerState.isSettingProps = false;\r\n    }\r\n    // keep a copy of raw propsData\r\n    vm.$options.propsData = propsData;\r\n  }\r\n  // update listeners\r\n  if (listeners) {\r\n    var oldListeners = vm.$options._parentListeners;\r\n    vm.$options._parentListeners = listeners;\r\n    updateComponentListeners(vm, listeners, oldListeners);\r\n  }\r\n  // resolve slots + force update if has children\r\n  if (hasChildren) {\r\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\r\n    vm.$forceUpdate();\r\n  }\r\n}\r\n\r\nfunction isInInactiveTree (vm) {\r\n  while (vm && (vm = vm.$parent)) {\r\n    if (vm._inactive) { return true }\r\n  }\r\n  return false\r\n}\r\n\r\nfunction activateChildComponent (vm, direct) {\r\n  if (direct) {\r\n    vm._directInactive = false;\r\n    if (isInInactiveTree(vm)) {\r\n      return\r\n    }\r\n  } else if (vm._directInactive) {\r\n    return\r\n  }\r\n  if (vm._inactive || vm._inactive == null) {\r\n    vm._inactive = false;\r\n    for (var i = 0; i < vm.$children.length; i++) {\r\n      activateChildComponent(vm.$children[i]);\r\n    }\r\n    callHook(vm, 'activated');\r\n  }\r\n}\r\n\r\nfunction deactivateChildComponent (vm, direct) {\r\n  if (direct) {\r\n    vm._directInactive = true;\r\n    if (isInInactiveTree(vm)) {\r\n      return\r\n    }\r\n  }\r\n  if (!vm._inactive) {\r\n    vm._inactive = true;\r\n    for (var i = 0; i < vm.$children.length; i++) {\r\n      deactivateChildComponent(vm.$children[i]);\r\n    }\r\n    callHook(vm, 'deactivated');\r\n  }\r\n}\r\n\r\nfunction callHook (vm, hook) {\r\n  var handlers = vm.$options[hook];\r\n  if (handlers) {\r\n    for (var i = 0, j = handlers.length; i < j; i++) {\r\n      try {\r\n        handlers[i].call(vm);\r\n      } catch (e) {\r\n        handleError(e, vm, (hook + \" hook\"));\r\n      }\r\n    }\r\n  }\r\n  if (vm._hasHookEvent) {\r\n    vm.$emit('hook:' + hook);\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\n\r\nvar queue = [];\r\nvar has = {};\r\nvar circular = {};\r\nvar waiting = false;\r\nvar flushing = false;\r\nvar index = 0;\r\n\r\n/**\r\n * Reset the scheduler's state.\r\n */\r\nfunction resetSchedulerState () {\r\n  queue.length = 0;\r\n  has = {};\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    circular = {};\r\n  }\r\n  waiting = flushing = false;\r\n}\r\n\r\n/**\r\n * Flush both queues and run the watchers.\r\n */\r\nfunction flushSchedulerQueue () {\r\n  flushing = true;\r\n  var watcher, id, vm;\r\n\r\n  // Sort queue before flush.\r\n  // This ensures that:\r\n  // 1. Components are updated from parent to child. (because parent is always\r\n  //    created before the child)\r\n  // 2. A component's user watchers are run before its render watcher (because\r\n  //    user watchers are created before the render watcher)\r\n  // 3. If a component is destroyed during a parent component's watcher run,\r\n  //    its watchers can be skipped.\r\n  queue.sort(function (a, b) { return a.id - b.id; });\r\n\r\n  // do not cache length because more watchers might be pushed\r\n  // as we run existing watchers\r\n  for (index = 0; index < queue.length; index++) {\r\n    watcher = queue[index];\r\n    id = watcher.id;\r\n    has[id] = null;\r\n    watcher.run();\r\n    // in dev build, check and stop circular updates.\r\n    if (process.env.NODE_ENV !== 'production' && has[id] != null) {\r\n      circular[id] = (circular[id] || 0) + 1;\r\n      if (circular[id] > config._maxUpdateCount) {\r\n        warn(\r\n          'You may have an infinite update loop ' + (\r\n            watcher.user\r\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\r\n              : \"in a component render function.\"\r\n          ),\r\n          watcher.vm\r\n        );\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  // reset scheduler before updated hook called\r\n  var oldQueue = queue.slice();\r\n  resetSchedulerState();\r\n\r\n  // call updated hooks\r\n  index = oldQueue.length;\r\n  while (index--) {\r\n    watcher = oldQueue[index];\r\n    vm = watcher.vm;\r\n    if (vm._watcher === watcher && vm._isMounted) {\r\n      callHook(vm, 'updated');\r\n    }\r\n  }\r\n\r\n  // devtool hook\r\n  /* istanbul ignore if */\r\n  if (devtools && config.devtools) {\r\n    devtools.emit('flush');\r\n  }\r\n}\r\n\r\n/**\r\n * Push a watcher into the watcher queue.\r\n * Jobs with duplicate IDs will be skipped unless it's\r\n * pushed when the queue is being flushed.\r\n */\r\nfunction queueWatcher (watcher) {\r\n  var id = watcher.id;\r\n  if (has[id] == null) {\r\n    has[id] = true;\r\n    if (!flushing) {\r\n      queue.push(watcher);\r\n    } else {\r\n      // if already flushing, splice the watcher based on its id\r\n      // if already past its id, it will be run next immediately.\r\n      var i = queue.length - 1;\r\n      while (i >= 0 && queue[i].id > watcher.id) {\r\n        i--;\r\n      }\r\n      queue.splice(Math.max(i, index) + 1, 0, watcher);\r\n    }\r\n    // queue the flush\r\n    if (!waiting) {\r\n      waiting = true;\r\n      nextTick(flushSchedulerQueue);\r\n    }\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nvar uid$2 = 0;\r\n\r\n/**\r\n * A watcher parses an expression, collects dependencies,\r\n * and fires callback when the expression value changes.\r\n * This is used for both the $watch() api and directives.\r\n */\r\nvar Watcher = function Watcher (\r\n  vm,\r\n  expOrFn,\r\n  cb,\r\n  options\r\n) {\r\n  this.vm = vm;\r\n  vm._watchers.push(this);\r\n  // options\r\n  if (options) {\r\n    this.deep = !!options.deep;\r\n    this.user = !!options.user;\r\n    this.lazy = !!options.lazy;\r\n    this.sync = !!options.sync;\r\n  } else {\r\n    this.deep = this.user = this.lazy = this.sync = false;\r\n  }\r\n  this.cb = cb;\r\n  this.id = ++uid$2; // uid for batching\r\n  this.active = true;\r\n  this.dirty = this.lazy; // for lazy watchers\r\n  this.deps = [];\r\n  this.newDeps = [];\r\n  this.depIds = new _Set();\r\n  this.newDepIds = new _Set();\r\n  this.expression = process.env.NODE_ENV !== 'production'\r\n    ? expOrFn.toString()\r\n    : '';\r\n  // parse expression for getter\r\n  if (typeof expOrFn === 'function') {\r\n    this.getter = expOrFn;\r\n  } else {\r\n    this.getter = parsePath(expOrFn);\r\n    if (!this.getter) {\r\n      this.getter = function () {};\r\n      process.env.NODE_ENV !== 'production' && warn(\r\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\r\n        'Watcher only accepts simple dot-delimited paths. ' +\r\n        'For full control, use a function instead.',\r\n        vm\r\n      );\r\n    }\r\n  }\r\n  this.value = this.lazy\r\n    ? undefined\r\n    : this.get();\r\n};\r\n\r\n/**\r\n * Evaluate the getter, and re-collect dependencies.\r\n */\r\nWatcher.prototype.get = function get () {\r\n  pushTarget(this);\r\n  var value;\r\n  var vm = this.vm;\r\n  if (this.user) {\r\n    try {\r\n      value = this.getter.call(vm, vm);\r\n    } catch (e) {\r\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\r\n    }\r\n  } else {\r\n    value = this.getter.call(vm, vm);\r\n  }\r\n  // \"touch\" every property so they are all tracked as\r\n  // dependencies for deep watching\r\n  if (this.deep) {\r\n    traverse(value);\r\n  }\r\n  popTarget();\r\n  this.cleanupDeps();\r\n  return value\r\n};\r\n\r\n/**\r\n * Add a dependency to this directive.\r\n */\r\nWatcher.prototype.addDep = function addDep (dep) {\r\n  var id = dep.id;\r\n  if (!this.newDepIds.has(id)) {\r\n    this.newDepIds.add(id);\r\n    this.newDeps.push(dep);\r\n    if (!this.depIds.has(id)) {\r\n      dep.addSub(this);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Clean up for dependency collection.\r\n */\r\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\r\n    var this$1 = this;\r\n\r\n  var i = this.deps.length;\r\n  while (i--) {\r\n    var dep = this$1.deps[i];\r\n    if (!this$1.newDepIds.has(dep.id)) {\r\n      dep.removeSub(this$1);\r\n    }\r\n  }\r\n  var tmp = this.depIds;\r\n  this.depIds = this.newDepIds;\r\n  this.newDepIds = tmp;\r\n  this.newDepIds.clear();\r\n  tmp = this.deps;\r\n  this.deps = this.newDeps;\r\n  this.newDeps = tmp;\r\n  this.newDeps.length = 0;\r\n};\r\n\r\n/**\r\n * Subscriber interface.\r\n * Will be called when a dependency changes.\r\n */\r\nWatcher.prototype.update = function update () {\r\n  /* istanbul ignore else */\r\n  if (this.lazy) {\r\n    this.dirty = true;\r\n  } else if (this.sync) {\r\n    this.run();\r\n  } else {\r\n    queueWatcher(this);\r\n  }\r\n};\r\n\r\n/**\r\n * Scheduler job interface.\r\n * Will be called by the scheduler.\r\n */\r\nWatcher.prototype.run = function run () {\r\n  if (this.active) {\r\n    var value = this.get();\r\n    if (\r\n      value !== this.value ||\r\n      // Deep watchers and watchers on Object/Arrays should fire even\r\n      // when the value is the same, because the value may\r\n      // have mutated.\r\n      isObject(value) ||\r\n      this.deep\r\n    ) {\r\n      // set new value\r\n      var oldValue = this.value;\r\n      this.value = value;\r\n      if (this.user) {\r\n        try {\r\n          this.cb.call(this.vm, value, oldValue);\r\n        } catch (e) {\r\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\r\n        }\r\n      } else {\r\n        this.cb.call(this.vm, value, oldValue);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Evaluate the value of the watcher.\r\n * This only gets called for lazy watchers.\r\n */\r\nWatcher.prototype.evaluate = function evaluate () {\r\n  this.value = this.get();\r\n  this.dirty = false;\r\n};\r\n\r\n/**\r\n * Depend on all deps collected by this watcher.\r\n */\r\nWatcher.prototype.depend = function depend () {\r\n    var this$1 = this;\r\n\r\n  var i = this.deps.length;\r\n  while (i--) {\r\n    this$1.deps[i].depend();\r\n  }\r\n};\r\n\r\n/**\r\n * Remove self from all dependencies' subscriber list.\r\n */\r\nWatcher.prototype.teardown = function teardown () {\r\n    var this$1 = this;\r\n\r\n  if (this.active) {\r\n    // remove self from vm's watcher list\r\n    // this is a somewhat expensive operation so we skip it\r\n    // if the vm is being destroyed.\r\n    if (!this.vm._isBeingDestroyed) {\r\n      remove(this.vm._watchers, this);\r\n    }\r\n    var i = this.deps.length;\r\n    while (i--) {\r\n      this$1.deps[i].removeSub(this$1);\r\n    }\r\n    this.active = false;\r\n  }\r\n};\r\n\r\n/**\r\n * Recursively traverse an object to evoke all converted\r\n * getters, so that every nested property inside the object\r\n * is collected as a \"deep\" dependency.\r\n */\r\nvar seenObjects = new _Set();\r\nfunction traverse (val) {\r\n  seenObjects.clear();\r\n  _traverse(val, seenObjects);\r\n}\r\n\r\nfunction _traverse (val, seen) {\r\n  var i, keys;\r\n  var isA = Array.isArray(val);\r\n  if ((!isA && !isObject(val)) || !Object.isExtensible(val)) {\r\n    return\r\n  }\r\n  if (val.__ob__) {\r\n    var depId = val.__ob__.dep.id;\r\n    if (seen.has(depId)) {\r\n      return\r\n    }\r\n    seen.add(depId);\r\n  }\r\n  if (isA) {\r\n    i = val.length;\r\n    while (i--) { _traverse(val[i], seen); }\r\n  } else {\r\n    keys = Object.keys(val);\r\n    i = keys.length;\r\n    while (i--) { _traverse(val[keys[i]], seen); }\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nvar sharedPropertyDefinition = {\r\n  enumerable: true,\r\n  configurable: true,\r\n  get: noop,\r\n  set: noop\r\n};\r\n\r\nfunction proxy (target, sourceKey, key) {\r\n  sharedPropertyDefinition.get = function proxyGetter () {\r\n    return this[sourceKey][key]\r\n  };\r\n  sharedPropertyDefinition.set = function proxySetter (val) {\r\n    this[sourceKey][key] = val;\r\n  };\r\n  Object.defineProperty(target, key, sharedPropertyDefinition);\r\n}\r\n\r\nfunction initState (vm) {\r\n  vm._watchers = [];\r\n  var opts = vm.$options;\r\n  if (opts.props) { initProps(vm, opts.props); }\r\n  if (opts.methods) { initMethods(vm, opts.methods); }\r\n  if (opts.data) {\r\n    initData(vm);\r\n  } else {\r\n    observe(vm._data = {}, true /* asRootData */);\r\n  }\r\n  if (opts.computed) { initComputed(vm, opts.computed); }\r\n  if (opts.watch) { initWatch(vm, opts.watch); }\r\n}\r\n\r\nvar isReservedProp = { key: 1, ref: 1, slot: 1 };\r\n\r\nfunction initProps (vm, propsOptions) {\r\n  var propsData = vm.$options.propsData || {};\r\n  var props = vm._props = {};\r\n  // cache prop keys so that future props updates can iterate using Array\r\n  // instead of dynamic object key enumeration.\r\n  var keys = vm.$options._propKeys = [];\r\n  var isRoot = !vm.$parent;\r\n  // root instance props should be converted\r\n  observerState.shouldConvert = isRoot;\r\n  var loop = function ( key ) {\r\n    keys.push(key);\r\n    var value = validateProp(key, propsOptions, propsData, vm);\r\n    /* istanbul ignore else */\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (isReservedProp[key]) {\r\n        warn(\r\n          (\"\\\"\" + key + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\r\n          vm\r\n        );\r\n      }\r\n      defineReactive$$1(props, key, value, function () {\r\n        if (vm.$parent && !observerState.isSettingProps) {\r\n          warn(\r\n            \"Avoid mutating a prop directly since the value will be \" +\r\n            \"overwritten whenever the parent component re-renders. \" +\r\n            \"Instead, use a data or computed property based on the prop's \" +\r\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\r\n            vm\r\n          );\r\n        }\r\n      });\r\n    } else {\r\n      defineReactive$$1(props, key, value);\r\n    }\r\n    // static props are already proxied on the component's prototype\r\n    // during Vue.extend(). We only need to proxy props defined at\r\n    // instantiation here.\r\n    if (!(key in vm)) {\r\n      proxy(vm, \"_props\", key);\r\n    }\r\n  };\r\n\r\n  for (var key in propsOptions) loop( key );\r\n  observerState.shouldConvert = true;\r\n}\r\n\r\nfunction initData (vm) {\r\n  var data = vm.$options.data;\r\n  data = vm._data = typeof data === 'function'\r\n    ? getData(data, vm)\r\n    : data || {};\r\n  if (!isPlainObject(data)) {\r\n    data = {};\r\n    process.env.NODE_ENV !== 'production' && warn(\r\n      'data functions should return an object:\\n' +\r\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\r\n      vm\r\n    );\r\n  }\r\n  // proxy data on instance\r\n  var keys = Object.keys(data);\r\n  var props = vm.$options.props;\r\n  var i = keys.length;\r\n  while (i--) {\r\n    if (props && hasOwn(props, keys[i])) {\r\n      process.env.NODE_ENV !== 'production' && warn(\r\n        \"The data property \\\"\" + (keys[i]) + \"\\\" is already declared as a prop. \" +\r\n        \"Use prop default value instead.\",\r\n        vm\r\n      );\r\n    } else if (!isReserved(keys[i])) {\r\n      proxy(vm, \"_data\", keys[i]);\r\n    }\r\n  }\r\n  // observe data\r\n  observe(data, true /* asRootData */);\r\n}\r\n\r\nfunction getData (data, vm) {\r\n  try {\r\n    return data.call(vm)\r\n  } catch (e) {\r\n    handleError(e, vm, \"data()\");\r\n    return {}\r\n  }\r\n}\r\n\r\nvar computedWatcherOptions = { lazy: true };\r\n\r\nfunction initComputed (vm, computed) {\r\n  var watchers = vm._computedWatchers = Object.create(null);\r\n\r\n  for (var key in computed) {\r\n    var userDef = computed[key];\r\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (getter === undefined) {\r\n        warn(\r\n          (\"No getter function has been defined for computed property \\\"\" + key + \"\\\".\"),\r\n          vm\r\n        );\r\n        getter = noop;\r\n      }\r\n    }\r\n    // create internal watcher for the computed property.\r\n    watchers[key] = new Watcher(vm, getter, noop, computedWatcherOptions);\r\n\r\n    // component-defined computed properties are already defined on the\r\n    // component prototype. We only need to define computed properties defined\r\n    // at instantiation here.\r\n    if (!(key in vm)) {\r\n      defineComputed(vm, key, userDef);\r\n    }\r\n  }\r\n}\r\n\r\nfunction defineComputed (target, key, userDef) {\r\n  if (typeof userDef === 'function') {\r\n    sharedPropertyDefinition.get = createComputedGetter(key);\r\n    sharedPropertyDefinition.set = noop;\r\n  } else {\r\n    sharedPropertyDefinition.get = userDef.get\r\n      ? userDef.cache !== false\r\n        ? createComputedGetter(key)\r\n        : userDef.get\r\n      : noop;\r\n    sharedPropertyDefinition.set = userDef.set\r\n      ? userDef.set\r\n      : noop;\r\n  }\r\n  Object.defineProperty(target, key, sharedPropertyDefinition);\r\n}\r\n\r\nfunction createComputedGetter (key) {\r\n  return function computedGetter () {\r\n    var watcher = this._computedWatchers && this._computedWatchers[key];\r\n    if (watcher) {\r\n      if (watcher.dirty) {\r\n        watcher.evaluate();\r\n      }\r\n      if (Dep.target) {\r\n        watcher.depend();\r\n      }\r\n      return watcher.value\r\n    }\r\n  }\r\n}\r\n\r\nfunction initMethods (vm, methods) {\r\n  var props = vm.$options.props;\r\n  for (var key in methods) {\r\n    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (methods[key] == null) {\r\n        warn(\r\n          \"method \\\"\" + key + \"\\\" has an undefined value in the component definition. \" +\r\n          \"Did you reference the function correctly?\",\r\n          vm\r\n        );\r\n      }\r\n      if (props && hasOwn(props, key)) {\r\n        warn(\r\n          (\"method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\r\n          vm\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction initWatch (vm, watch) {\r\n  for (var key in watch) {\r\n    var handler = watch[key];\r\n    if (Array.isArray(handler)) {\r\n      for (var i = 0; i < handler.length; i++) {\r\n        createWatcher(vm, key, handler[i]);\r\n      }\r\n    } else {\r\n      createWatcher(vm, key, handler);\r\n    }\r\n  }\r\n}\r\n\r\nfunction createWatcher (vm, key, handler) {\r\n  var options;\r\n  if (isPlainObject(handler)) {\r\n    options = handler;\r\n    handler = handler.handler;\r\n  }\r\n  if (typeof handler === 'string') {\r\n    handler = vm[handler];\r\n  }\r\n  vm.$watch(key, handler, options);\r\n}\r\n\r\nfunction stateMixin (Vue) {\r\n  // flow somehow has problems with directly declared definition object\r\n  // when using Object.defineProperty, so we have to procedurally build up\r\n  // the object here.\r\n  var dataDef = {};\r\n  dataDef.get = function () { return this._data };\r\n  var propsDef = {};\r\n  propsDef.get = function () { return this._props };\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    dataDef.set = function (newData) {\r\n      warn(\r\n        'Avoid replacing instance root $data. ' +\r\n        'Use nested data properties instead.',\r\n        this\r\n      );\r\n    };\r\n    propsDef.set = function () {\r\n      warn(\"$props is readonly.\", this);\r\n    };\r\n  }\r\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\r\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\r\n\r\n  Vue.prototype.$set = set;\r\n  Vue.prototype.$delete = del;\r\n\r\n  Vue.prototype.$watch = function (\r\n    expOrFn,\r\n    cb,\r\n    options\r\n  ) {\r\n    var vm = this;\r\n    options = options || {};\r\n    options.user = true;\r\n    var watcher = new Watcher(vm, expOrFn, cb, options);\r\n    if (options.immediate) {\r\n      cb.call(vm, watcher.value);\r\n    }\r\n    return function unwatchFn () {\r\n      watcher.teardown();\r\n    }\r\n  };\r\n}\r\n\r\n/*  */\r\n\r\n// hooks to be invoked on component VNodes during patch\r\nvar componentVNodeHooks = {\r\n  init: function init (\r\n    vnode,\r\n    hydrating,\r\n    parentElm,\r\n    refElm\r\n  ) {\r\n    if (!vnode.componentInstance || vnode.componentInstance._isDestroyed) {\r\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\r\n        vnode,\r\n        activeInstance,\r\n        parentElm,\r\n        refElm\r\n      );\r\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\r\n    } else if (vnode.data.keepAlive) {\r\n      // kept-alive components, treat as a patch\r\n      var mountedNode = vnode; // work around flow\r\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\r\n    }\r\n  },\r\n\r\n  prepatch: function prepatch (oldVnode, vnode) {\r\n    var options = vnode.componentOptions;\r\n    var child = vnode.componentInstance = oldVnode.componentInstance;\r\n    updateChildComponent(\r\n      child,\r\n      options.propsData, // updated props\r\n      options.listeners, // updated listeners\r\n      vnode, // new parent vnode\r\n      options.children // new children\r\n    );\r\n  },\r\n\r\n  insert: function insert (vnode) {\r\n    if (!vnode.componentInstance._isMounted) {\r\n      vnode.componentInstance._isMounted = true;\r\n      callHook(vnode.componentInstance, 'mounted');\r\n    }\r\n    if (vnode.data.keepAlive) {\r\n      activateChildComponent(vnode.componentInstance, true /* direct */);\r\n    }\r\n  },\r\n\r\n  destroy: function destroy (vnode) {\r\n    if (!vnode.componentInstance._isDestroyed) {\r\n      if (!vnode.data.keepAlive) {\r\n        vnode.componentInstance.$destroy();\r\n      } else {\r\n        deactivateChildComponent(vnode.componentInstance, true /* direct */);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nvar hooksToMerge = Object.keys(componentVNodeHooks);\r\n\r\nfunction createComponent (\r\n  Ctor,\r\n  data,\r\n  context,\r\n  children,\r\n  tag\r\n) {\r\n  if (!Ctor) {\r\n    return\r\n  }\r\n\r\n  var baseCtor = context.$options._base;\r\n  if (isObject(Ctor)) {\r\n    Ctor = baseCtor.extend(Ctor);\r\n  }\r\n\r\n  if (typeof Ctor !== 'function') {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\r\n    }\r\n    return\r\n  }\r\n\r\n  // async component\r\n  if (!Ctor.cid) {\r\n    if (Ctor.resolved) {\r\n      Ctor = Ctor.resolved;\r\n    } else {\r\n      Ctor = resolveAsyncComponent(Ctor, baseCtor, function () {\r\n        // it's ok to queue this on every render because\r\n        // $forceUpdate is buffered by the scheduler.\r\n        context.$forceUpdate();\r\n      });\r\n      if (!Ctor) {\r\n        // return nothing if this is indeed an async component\r\n        // wait for the callback to trigger parent update.\r\n        return\r\n      }\r\n    }\r\n  }\r\n\r\n  // resolve constructor options in case global mixins are applied after\r\n  // component constructor creation\r\n  resolveConstructorOptions(Ctor);\r\n\r\n  data = data || {};\r\n\r\n  // transform component v-model data into props & events\r\n  if (data.model) {\r\n    transformModel(Ctor.options, data);\r\n  }\r\n\r\n  // extract props\r\n  var propsData = extractProps(data, Ctor, tag);\r\n\r\n  // functional component\r\n  if (Ctor.options.functional) {\r\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\r\n  }\r\n\r\n  // extract listeners, since these needs to be treated as\r\n  // child component listeners instead of DOM listeners\r\n  var listeners = data.on;\r\n  // replace with listeners with .native modifier\r\n  data.on = data.nativeOn;\r\n\r\n  if (Ctor.options.abstract) {\r\n    // abstract components do not keep anything\r\n    // other than props & listeners\r\n    data = {};\r\n  }\r\n\r\n  // merge component management hooks onto the placeholder node\r\n  mergeHooks(data);\r\n\r\n  // return a placeholder vnode\r\n  var name = Ctor.options.name || tag;\r\n  var vnode = new VNode(\r\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\r\n    data, undefined, undefined, undefined, context,\r\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children }\r\n  );\r\n  return vnode\r\n}\r\n\r\nfunction createFunctionalComponent (\r\n  Ctor,\r\n  propsData,\r\n  data,\r\n  context,\r\n  children\r\n) {\r\n  var props = {};\r\n  var propOptions = Ctor.options.props;\r\n  if (propOptions) {\r\n    for (var key in propOptions) {\r\n      props[key] = validateProp(key, propOptions, propsData);\r\n    }\r\n  }\r\n  // ensure the createElement function in functional components\r\n  // gets a unique context - this is necessary for correct named slot check\r\n  var _context = Object.create(context);\r\n  var h = function (a, b, c, d) { return createElement(_context, a, b, c, d, true); };\r\n  var vnode = Ctor.options.render.call(null, h, {\r\n    props: props,\r\n    data: data,\r\n    parent: context,\r\n    children: children,\r\n    slots: function () { return resolveSlots(children, context); }\r\n  });\r\n  if (vnode instanceof VNode) {\r\n    vnode.functionalContext = context;\r\n    if (data.slot) {\r\n      (vnode.data || (vnode.data = {})).slot = data.slot;\r\n    }\r\n  }\r\n  return vnode\r\n}\r\n\r\nfunction createComponentInstanceForVnode (\r\n  vnode, // we know it's MountedComponentVNode but flow doesn't\r\n  parent, // activeInstance in lifecycle state\r\n  parentElm,\r\n  refElm\r\n) {\r\n  var vnodeComponentOptions = vnode.componentOptions;\r\n  var options = {\r\n    _isComponent: true,\r\n    parent: parent,\r\n    propsData: vnodeComponentOptions.propsData,\r\n    _componentTag: vnodeComponentOptions.tag,\r\n    _parentVnode: vnode,\r\n    _parentListeners: vnodeComponentOptions.listeners,\r\n    _renderChildren: vnodeComponentOptions.children,\r\n    _parentElm: parentElm || null,\r\n    _refElm: refElm || null\r\n  };\r\n  // check inline-template render functions\r\n  var inlineTemplate = vnode.data.inlineTemplate;\r\n  if (inlineTemplate) {\r\n    options.render = inlineTemplate.render;\r\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\r\n  }\r\n  return new vnodeComponentOptions.Ctor(options)\r\n}\r\n\r\nfunction resolveAsyncComponent (\r\n  factory,\r\n  baseCtor,\r\n  cb\r\n) {\r\n  if (factory.requested) {\r\n    // pool callbacks\r\n    factory.pendingCallbacks.push(cb);\r\n  } else {\r\n    factory.requested = true;\r\n    var cbs = factory.pendingCallbacks = [cb];\r\n    var sync = true;\r\n\r\n    var resolve = function (res) {\r\n      if (isObject(res)) {\r\n        res = baseCtor.extend(res);\r\n      }\r\n      // cache resolved\r\n      factory.resolved = res;\r\n      // invoke callbacks only if this is not a synchronous resolve\r\n      // (async resolves are shimmed as synchronous during SSR)\r\n      if (!sync) {\r\n        for (var i = 0, l = cbs.length; i < l; i++) {\r\n          cbs[i](res);\r\n        }\r\n      }\r\n    };\r\n\r\n    var reject = function (reason) {\r\n      process.env.NODE_ENV !== 'production' && warn(\r\n        \"Failed to resolve async component: \" + (String(factory)) +\r\n        (reason ? (\"\\nReason: \" + reason) : '')\r\n      );\r\n    };\r\n\r\n    var res = factory(resolve, reject);\r\n\r\n    // handle promise\r\n    if (res && typeof res.then === 'function' && !factory.resolved) {\r\n      res.then(resolve, reject);\r\n    }\r\n\r\n    sync = false;\r\n    // return in case resolved synchronously\r\n    return factory.resolved\r\n  }\r\n}\r\n\r\nfunction extractProps (data, Ctor, tag) {\r\n  // we are only extracting raw values here.\r\n  // validation and default values are handled in the child\r\n  // component itself.\r\n  var propOptions = Ctor.options.props;\r\n  if (!propOptions) {\r\n    return\r\n  }\r\n  var res = {};\r\n  var attrs = data.attrs;\r\n  var props = data.props;\r\n  var domProps = data.domProps;\r\n  if (attrs || props || domProps) {\r\n    for (var key in propOptions) {\r\n      var altKey = hyphenate(key);\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        var keyInLowerCase = key.toLowerCase();\r\n        if (\r\n          key !== keyInLowerCase &&\r\n          attrs && attrs.hasOwnProperty(keyInLowerCase)\r\n        ) {\r\n          tip(\r\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\r\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\r\n            \" \\\"\" + key + \"\\\". \" +\r\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\r\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\r\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\r\n          );\r\n        }\r\n      }\r\n      checkProp(res, props, key, altKey, true) ||\r\n      checkProp(res, attrs, key, altKey) ||\r\n      checkProp(res, domProps, key, altKey);\r\n    }\r\n  }\r\n  return res\r\n}\r\n\r\nfunction checkProp (\r\n  res,\r\n  hash,\r\n  key,\r\n  altKey,\r\n  preserve\r\n) {\r\n  if (hash) {\r\n    if (hasOwn(hash, key)) {\r\n      res[key] = hash[key];\r\n      if (!preserve) {\r\n        delete hash[key];\r\n      }\r\n      return true\r\n    } else if (hasOwn(hash, altKey)) {\r\n      res[key] = hash[altKey];\r\n      if (!preserve) {\r\n        delete hash[altKey];\r\n      }\r\n      return true\r\n    }\r\n  }\r\n  return false\r\n}\r\n\r\nfunction mergeHooks (data) {\r\n  if (!data.hook) {\r\n    data.hook = {};\r\n  }\r\n  for (var i = 0; i < hooksToMerge.length; i++) {\r\n    var key = hooksToMerge[i];\r\n    var fromParent = data.hook[key];\r\n    var ours = componentVNodeHooks[key];\r\n    data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;\r\n  }\r\n}\r\n\r\nfunction mergeHook$1 (one, two) {\r\n  return function (a, b, c, d) {\r\n    one(a, b, c, d);\r\n    two(a, b, c, d);\r\n  }\r\n}\r\n\r\n// transform component v-model info (value and callback) into\r\n// prop and event handler respectively.\r\nfunction transformModel (options, data) {\r\n  var prop = (options.model && options.model.prop) || 'value';\r\n  var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;\r\n  var on = data.on || (data.on = {});\r\n  if (on[event]) {\r\n    on[event] = [data.model.callback].concat(on[event]);\r\n  } else {\r\n    on[event] = data.model.callback;\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nvar SIMPLE_NORMALIZE = 1;\r\nvar ALWAYS_NORMALIZE = 2;\r\n\r\n// wrapper function for providing a more flexible interface\r\n// without getting yelled at by flow\r\nfunction createElement (\r\n  context,\r\n  tag,\r\n  data,\r\n  children,\r\n  normalizationType,\r\n  alwaysNormalize\r\n) {\r\n  if (Array.isArray(data) || isPrimitive(data)) {\r\n    normalizationType = children;\r\n    children = data;\r\n    data = undefined;\r\n  }\r\n  if (alwaysNormalize) { normalizationType = ALWAYS_NORMALIZE; }\r\n  return _createElement(context, tag, data, children, normalizationType)\r\n}\r\n\r\nfunction _createElement (\r\n  context,\r\n  tag,\r\n  data,\r\n  children,\r\n  normalizationType\r\n) {\r\n  if (data && data.__ob__) {\r\n    process.env.NODE_ENV !== 'production' && warn(\r\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\r\n      'Always create fresh vnode data objects in each render!',\r\n      context\r\n    );\r\n    return createEmptyVNode()\r\n  }\r\n  if (!tag) {\r\n    // in case of component :is set to falsy value\r\n    return createEmptyVNode()\r\n  }\r\n  // support single function children as default scoped slot\r\n  if (Array.isArray(children) &&\r\n      typeof children[0] === 'function') {\r\n    data = data || {};\r\n    data.scopedSlots = { default: children[0] };\r\n    children.length = 0;\r\n  }\r\n  if (normalizationType === ALWAYS_NORMALIZE) {\r\n    children = normalizeChildren(children);\r\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\r\n    children = simpleNormalizeChildren(children);\r\n  }\r\n  var vnode, ns;\r\n  if (typeof tag === 'string') {\r\n    var Ctor;\r\n    ns = config.getTagNamespace(tag);\r\n    if (config.isReservedTag(tag)) {\r\n      // platform built-in elements\r\n      vnode = new VNode(\r\n        config.parsePlatformTagName(tag), data, children,\r\n        undefined, undefined, context\r\n      );\r\n    } else if ((Ctor = resolveAsset(context.$options, 'components', tag))) {\r\n      // component\r\n      vnode = createComponent(Ctor, data, context, children, tag);\r\n    } else {\r\n      // unknown or unlisted namespaced elements\r\n      // check at runtime because it may get assigned a namespace when its\r\n      // parent normalizes children\r\n      vnode = new VNode(\r\n        tag, data, children,\r\n        undefined, undefined, context\r\n      );\r\n    }\r\n  } else {\r\n    // direct component options / constructor\r\n    vnode = createComponent(tag, data, context, children);\r\n  }\r\n  if (vnode) {\r\n    if (ns) { applyNS(vnode, ns); }\r\n    return vnode\r\n  } else {\r\n    return createEmptyVNode()\r\n  }\r\n}\r\n\r\nfunction applyNS (vnode, ns) {\r\n  vnode.ns = ns;\r\n  if (vnode.tag === 'foreignObject') {\r\n    // use default namespace inside foreignObject\r\n    return\r\n  }\r\n  if (vnode.children) {\r\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\r\n      var child = vnode.children[i];\r\n      if (child.tag && !child.ns) {\r\n        applyNS(child, ns);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\n/**\r\n * Runtime helper for rendering v-for lists.\r\n */\r\nfunction renderList (\r\n  val,\r\n  render\r\n) {\r\n  var ret, i, l, keys, key;\r\n  if (Array.isArray(val) || typeof val === 'string') {\r\n    ret = new Array(val.length);\r\n    for (i = 0, l = val.length; i < l; i++) {\r\n      ret[i] = render(val[i], i);\r\n    }\r\n  } else if (typeof val === 'number') {\r\n    ret = new Array(val);\r\n    for (i = 0; i < val; i++) {\r\n      ret[i] = render(i + 1, i);\r\n    }\r\n  } else if (isObject(val)) {\r\n    keys = Object.keys(val);\r\n    ret = new Array(keys.length);\r\n    for (i = 0, l = keys.length; i < l; i++) {\r\n      key = keys[i];\r\n      ret[i] = render(val[key], key, i);\r\n    }\r\n  }\r\n  return ret\r\n}\r\n\r\n/*  */\r\n\r\n/**\r\n * Runtime helper for rendering <slot>\r\n */\r\nfunction renderSlot (\r\n  name,\r\n  fallback,\r\n  props,\r\n  bindObject\r\n) {\r\n  var scopedSlotFn = this.$scopedSlots[name];\r\n  if (scopedSlotFn) { // scoped slot\r\n    props = props || {};\r\n    if (bindObject) {\r\n      extend(props, bindObject);\r\n    }\r\n    return scopedSlotFn(props) || fallback\r\n  } else {\r\n    var slotNodes = this.$slots[name];\r\n    // warn duplicate slot usage\r\n    if (slotNodes && process.env.NODE_ENV !== 'production') {\r\n      slotNodes._rendered && warn(\r\n        \"Duplicate presence of slot \\\"\" + name + \"\\\" found in the same render tree \" +\r\n        \"- this will likely cause render errors.\",\r\n        this\r\n      );\r\n      slotNodes._rendered = true;\r\n    }\r\n    return slotNodes || fallback\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\n/**\r\n * Runtime helper for resolving filters\r\n */\r\nfunction resolveFilter (id) {\r\n  return resolveAsset(this.$options, 'filters', id, true) || identity\r\n}\r\n\r\n/*  */\r\n\r\n/**\r\n * Runtime helper for checking keyCodes from config.\r\n */\r\nfunction checkKeyCodes (\r\n  eventKeyCode,\r\n  key,\r\n  builtInAlias\r\n) {\r\n  var keyCodes = config.keyCodes[key] || builtInAlias;\r\n  if (Array.isArray(keyCodes)) {\r\n    return keyCodes.indexOf(eventKeyCode) === -1\r\n  } else {\r\n    return keyCodes !== eventKeyCode\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\n/**\r\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\r\n */\r\nfunction bindObjectProps (\r\n  data,\r\n  tag,\r\n  value,\r\n  asProp\r\n) {\r\n  if (value) {\r\n    if (!isObject(value)) {\r\n      process.env.NODE_ENV !== 'production' && warn(\r\n        'v-bind without argument expects an Object or Array value',\r\n        this\r\n      );\r\n    } else {\r\n      if (Array.isArray(value)) {\r\n        value = toObject(value);\r\n      }\r\n      var hash;\r\n      for (var key in value) {\r\n        if (key === 'class' || key === 'style') {\r\n          hash = data;\r\n        } else {\r\n          var type = data.attrs && data.attrs.type;\r\n          hash = asProp || config.mustUseProp(tag, type, key)\r\n            ? data.domProps || (data.domProps = {})\r\n            : data.attrs || (data.attrs = {});\r\n        }\r\n        if (!(key in hash)) {\r\n          hash[key] = value[key];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return data\r\n}\r\n\r\n/*  */\r\n\r\n/**\r\n * Runtime helper for rendering static trees.\r\n */\r\nfunction renderStatic (\r\n  index,\r\n  isInFor\r\n) {\r\n  var tree = this._staticTrees[index];\r\n  // if has already-rendered static tree and not inside v-for,\r\n  // we can reuse the same tree by doing a shallow clone.\r\n  if (tree && !isInFor) {\r\n    return Array.isArray(tree)\r\n      ? cloneVNodes(tree)\r\n      : cloneVNode(tree)\r\n  }\r\n  // otherwise, render a fresh tree.\r\n  tree = this._staticTrees[index] =\r\n    this.$options.staticRenderFns[index].call(this._renderProxy);\r\n  markStatic(tree, (\"__static__\" + index), false);\r\n  return tree\r\n}\r\n\r\n/**\r\n * Runtime helper for v-once.\r\n * Effectively it means marking the node as static with a unique key.\r\n */\r\nfunction markOnce (\r\n  tree,\r\n  index,\r\n  key\r\n) {\r\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\r\n  return tree\r\n}\r\n\r\nfunction markStatic (\r\n  tree,\r\n  key,\r\n  isOnce\r\n) {\r\n  if (Array.isArray(tree)) {\r\n    for (var i = 0; i < tree.length; i++) {\r\n      if (tree[i] && typeof tree[i] !== 'string') {\r\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\r\n      }\r\n    }\r\n  } else {\r\n    markStaticNode(tree, key, isOnce);\r\n  }\r\n}\r\n\r\nfunction markStaticNode (node, key, isOnce) {\r\n  node.isStatic = true;\r\n  node.key = key;\r\n  node.isOnce = isOnce;\r\n}\r\n\r\n/*  */\r\n\r\nfunction initRender (vm) {\r\n  vm.$vnode = null; // the placeholder node in parent tree\r\n  vm._vnode = null; // the root of the child tree\r\n  vm._staticTrees = null;\r\n  var parentVnode = vm.$options._parentVnode;\r\n  var renderContext = parentVnode && parentVnode.context;\r\n  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext);\r\n  vm.$scopedSlots = emptyObject;\r\n  // bind the createElement fn to this instance\r\n  // so that we get proper render context inside it.\r\n  // args order: tag, data, children, normalizationType, alwaysNormalize\r\n  // internal version is used by render functions compiled from templates\r\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\r\n  // normalization is always applied for the public version, used in\r\n  // user-written render functions.\r\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\r\n}\r\n\r\nfunction renderMixin (Vue) {\r\n  Vue.prototype.$nextTick = function (fn) {\r\n    return nextTick(fn, this)\r\n  };\r\n\r\n  Vue.prototype._render = function () {\r\n    var vm = this;\r\n    var ref = vm.$options;\r\n    var render = ref.render;\r\n    var staticRenderFns = ref.staticRenderFns;\r\n    var _parentVnode = ref._parentVnode;\r\n\r\n    if (vm._isMounted) {\r\n      // clone slot nodes on re-renders\r\n      for (var key in vm.$slots) {\r\n        vm.$slots[key] = cloneVNodes(vm.$slots[key]);\r\n      }\r\n    }\r\n\r\n    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject;\r\n\r\n    if (staticRenderFns && !vm._staticTrees) {\r\n      vm._staticTrees = [];\r\n    }\r\n    // set parent vnode. this allows render functions to have access\r\n    // to the data on the placeholder node.\r\n    vm.$vnode = _parentVnode;\r\n    // render self\r\n    var vnode;\r\n    try {\r\n      vnode = render.call(vm._renderProxy, vm.$createElement);\r\n    } catch (e) {\r\n      handleError(e, vm, \"render function\");\r\n      // return error render result,\r\n      // or previous vnode to prevent render error causing blank component\r\n      /* istanbul ignore else */\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        vnode = vm.$options.renderError\r\n          ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\r\n          : vm._vnode;\r\n      } else {\r\n        vnode = vm._vnode;\r\n      }\r\n    }\r\n    // return empty vnode in case the render function errored out\r\n    if (!(vnode instanceof VNode)) {\r\n      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\r\n        warn(\r\n          'Multiple root nodes returned from render function. Render function ' +\r\n          'should return a single root node.',\r\n          vm\r\n        );\r\n      }\r\n      vnode = createEmptyVNode();\r\n    }\r\n    // set parent\r\n    vnode.parent = _parentVnode;\r\n    return vnode\r\n  };\r\n\r\n  // internal render helpers.\r\n  // these are exposed on the instance prototype to reduce generated render\r\n  // code size.\r\n  Vue.prototype._o = markOnce;\r\n  Vue.prototype._n = toNumber;\r\n  Vue.prototype._s = _toString;\r\n  Vue.prototype._l = renderList;\r\n  Vue.prototype._t = renderSlot;\r\n  Vue.prototype._q = looseEqual;\r\n  Vue.prototype._i = looseIndexOf;\r\n  Vue.prototype._m = renderStatic;\r\n  Vue.prototype._f = resolveFilter;\r\n  Vue.prototype._k = checkKeyCodes;\r\n  Vue.prototype._b = bindObjectProps;\r\n  Vue.prototype._v = createTextVNode;\r\n  Vue.prototype._e = createEmptyVNode;\r\n  Vue.prototype._u = resolveScopedSlots;\r\n}\r\n\r\n/*  */\r\n\r\nfunction initProvide (vm) {\r\n  var provide = vm.$options.provide;\r\n  if (provide) {\r\n    vm._provided = typeof provide === 'function'\r\n      ? provide.call(vm)\r\n      : provide;\r\n  }\r\n}\r\n\r\nfunction initInjections (vm) {\r\n  var inject = vm.$options.inject;\r\n  if (inject) {\r\n    // inject is :any because flow is not smart enough to figure out cached\r\n    // isArray here\r\n    var isArray = Array.isArray(inject);\r\n    var keys = isArray\r\n      ? inject\r\n      : hasSymbol\r\n        ? Reflect.ownKeys(inject)\r\n        : Object.keys(inject);\r\n\r\n    var loop = function ( i ) {\r\n      var key = keys[i];\r\n      var provideKey = isArray ? key : inject[key];\r\n      var source = vm;\r\n      while (source) {\r\n        if (source._provided && provideKey in source._provided) {\r\n          /* istanbul ignore else */\r\n          if (process.env.NODE_ENV !== 'production') {\r\n            defineReactive$$1(vm, key, source._provided[provideKey], function () {\r\n              warn(\r\n                \"Avoid mutating an injected value directly since the changes will be \" +\r\n                \"overwritten whenever the provided component re-renders. \" +\r\n                \"injection being mutated: \\\"\" + key + \"\\\"\",\r\n                vm\r\n              );\r\n            });\r\n          } else {\r\n            defineReactive$$1(vm, key, source._provided[provideKey]);\r\n          }\r\n          break\r\n        }\r\n        source = source.$parent;\r\n      }\r\n    };\r\n\r\n    for (var i = 0; i < keys.length; i++) loop( i );\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nvar uid = 0;\r\n\r\nfunction initMixin (Vue) {\r\n  Vue.prototype._init = function (options) {\r\n    var vm = this;\r\n    // a uid\r\n    vm._uid = uid++;\r\n\r\n    var startTag, endTag;\r\n    /* istanbul ignore if */\r\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\r\n      startTag = \"vue-perf-init:\" + (vm._uid);\r\n      endTag = \"vue-perf-end:\" + (vm._uid);\r\n      mark(startTag);\r\n    }\r\n\r\n    // a flag to avoid this being observed\r\n    vm._isVue = true;\r\n    // merge options\r\n    if (options && options._isComponent) {\r\n      // optimize internal component instantiation\r\n      // since dynamic options merging is pretty slow, and none of the\r\n      // internal component options needs special treatment.\r\n      initInternalComponent(vm, options);\r\n    } else {\r\n      vm.$options = mergeOptions(\r\n        resolveConstructorOptions(vm.constructor),\r\n        options || {},\r\n        vm\r\n      );\r\n    }\r\n    /* istanbul ignore else */\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      initProxy(vm);\r\n    } else {\r\n      vm._renderProxy = vm;\r\n    }\r\n    // expose real self\r\n    vm._self = vm;\r\n    initLifecycle(vm);\r\n    initEvents(vm);\r\n    initRender(vm);\r\n    callHook(vm, 'beforeCreate');\r\n    initInjections(vm); // resolve injections before data/props\r\n    initState(vm);\r\n    initProvide(vm); // resolve provide after data/props\r\n    callHook(vm, 'created');\r\n\r\n    /* istanbul ignore if */\r\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\r\n      vm._name = formatComponentName(vm, false);\r\n      mark(endTag);\r\n      measure(((vm._name) + \" init\"), startTag, endTag);\r\n    }\r\n\r\n    if (vm.$options.el) {\r\n      vm.$mount(vm.$options.el);\r\n    }\r\n  };\r\n}\r\n\r\nfunction initInternalComponent (vm, options) {\r\n  var opts = vm.$options = Object.create(vm.constructor.options);\r\n  // doing this because it's faster than dynamic enumeration.\r\n  opts.parent = options.parent;\r\n  opts.propsData = options.propsData;\r\n  opts._parentVnode = options._parentVnode;\r\n  opts._parentListeners = options._parentListeners;\r\n  opts._renderChildren = options._renderChildren;\r\n  opts._componentTag = options._componentTag;\r\n  opts._parentElm = options._parentElm;\r\n  opts._refElm = options._refElm;\r\n  if (options.render) {\r\n    opts.render = options.render;\r\n    opts.staticRenderFns = options.staticRenderFns;\r\n  }\r\n}\r\n\r\nfunction resolveConstructorOptions (Ctor) {\r\n  var options = Ctor.options;\r\n  if (Ctor.super) {\r\n    var superOptions = resolveConstructorOptions(Ctor.super);\r\n    var cachedSuperOptions = Ctor.superOptions;\r\n    if (superOptions !== cachedSuperOptions) {\r\n      // super option changed,\r\n      // need to resolve new options.\r\n      Ctor.superOptions = superOptions;\r\n      // check if there are any late-modified/attached options (#4976)\r\n      var modifiedOptions = resolveModifiedOptions(Ctor);\r\n      // update base extend options\r\n      if (modifiedOptions) {\r\n        extend(Ctor.extendOptions, modifiedOptions);\r\n      }\r\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\r\n      if (options.name) {\r\n        options.components[options.name] = Ctor;\r\n      }\r\n    }\r\n  }\r\n  return options\r\n}\r\n\r\nfunction resolveModifiedOptions (Ctor) {\r\n  var modified;\r\n  var latest = Ctor.options;\r\n  var sealed = Ctor.sealedOptions;\r\n  for (var key in latest) {\r\n    if (latest[key] !== sealed[key]) {\r\n      if (!modified) { modified = {}; }\r\n      modified[key] = dedupe(latest[key], sealed[key]);\r\n    }\r\n  }\r\n  return modified\r\n}\r\n\r\nfunction dedupe (latest, sealed) {\r\n  // compare latest and sealed to ensure lifecycle hooks won't be duplicated\r\n  // between merges\r\n  if (Array.isArray(latest)) {\r\n    var res = [];\r\n    sealed = Array.isArray(sealed) ? sealed : [sealed];\r\n    for (var i = 0; i < latest.length; i++) {\r\n      if (sealed.indexOf(latest[i]) < 0) {\r\n        res.push(latest[i]);\r\n      }\r\n    }\r\n    return res\r\n  } else {\r\n    return latest\r\n  }\r\n}\r\n\r\nfunction Vue$3 (options) {\r\n  if (process.env.NODE_ENV !== 'production' &&\r\n    !(this instanceof Vue$3)) {\r\n    warn('Vue is a constructor and should be called with the `new` keyword');\r\n  }\r\n  this._init(options);\r\n}\r\n\r\ninitMixin(Vue$3);\r\nstateMixin(Vue$3);\r\neventsMixin(Vue$3);\r\nlifecycleMixin(Vue$3);\r\nrenderMixin(Vue$3);\r\n\r\n/*  */\r\n\r\nfunction initUse (Vue) {\r\n  Vue.use = function (plugin) {\r\n    /* istanbul ignore if */\r\n    if (plugin.installed) {\r\n      return\r\n    }\r\n    // additional parameters\r\n    var args = toArray(arguments, 1);\r\n    args.unshift(this);\r\n    if (typeof plugin.install === 'function') {\r\n      plugin.install.apply(plugin, args);\r\n    } else if (typeof plugin === 'function') {\r\n      plugin.apply(null, args);\r\n    }\r\n    plugin.installed = true;\r\n    return this\r\n  };\r\n}\r\n\r\n/*  */\r\n\r\nfunction initMixin$1 (Vue) {\r\n  Vue.mixin = function (mixin) {\r\n    this.options = mergeOptions(this.options, mixin);\r\n  };\r\n}\r\n\r\n/*  */\r\n\r\nfunction initExtend (Vue) {\r\n  /**\r\n   * Each instance constructor, including Vue, has a unique\r\n   * cid. This enables us to create wrapped \"child\r\n   * constructors\" for prototypal inheritance and cache them.\r\n   */\r\n  Vue.cid = 0;\r\n  var cid = 1;\r\n\r\n  /**\r\n   * Class inheritance\r\n   */\r\n  Vue.extend = function (extendOptions) {\r\n    extendOptions = extendOptions || {};\r\n    var Super = this;\r\n    var SuperId = Super.cid;\r\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\r\n    if (cachedCtors[SuperId]) {\r\n      return cachedCtors[SuperId]\r\n    }\r\n\r\n    var name = extendOptions.name || Super.options.name;\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\r\n        warn(\r\n          'Invalid component name: \"' + name + '\". Component names ' +\r\n          'can only contain alphanumeric characters and the hyphen, ' +\r\n          'and must start with a letter.'\r\n        );\r\n      }\r\n    }\r\n\r\n    var Sub = function VueComponent (options) {\r\n      this._init(options);\r\n    };\r\n    Sub.prototype = Object.create(Super.prototype);\r\n    Sub.prototype.constructor = Sub;\r\n    Sub.cid = cid++;\r\n    Sub.options = mergeOptions(\r\n      Super.options,\r\n      extendOptions\r\n    );\r\n    Sub['super'] = Super;\r\n\r\n    // For props and computed properties, we define the proxy getters on\r\n    // the Vue instances at extension time, on the extended prototype. This\r\n    // avoids Object.defineProperty calls for each instance created.\r\n    if (Sub.options.props) {\r\n      initProps$1(Sub);\r\n    }\r\n    if (Sub.options.computed) {\r\n      initComputed$1(Sub);\r\n    }\r\n\r\n    // allow further extension/mixin/plugin usage\r\n    Sub.extend = Super.extend;\r\n    Sub.mixin = Super.mixin;\r\n    Sub.use = Super.use;\r\n\r\n    // create asset registers, so extended classes\r\n    // can have their private assets too.\r\n    config._assetTypes.forEach(function (type) {\r\n      Sub[type] = Super[type];\r\n    });\r\n    // enable recursive self-lookup\r\n    if (name) {\r\n      Sub.options.components[name] = Sub;\r\n    }\r\n\r\n    // keep a reference to the super options at extension time.\r\n    // later at instantiation we can check if Super's options have\r\n    // been updated.\r\n    Sub.superOptions = Super.options;\r\n    Sub.extendOptions = extendOptions;\r\n    Sub.sealedOptions = extend({}, Sub.options);\r\n\r\n    // cache constructor\r\n    cachedCtors[SuperId] = Sub;\r\n    return Sub\r\n  };\r\n}\r\n\r\nfunction initProps$1 (Comp) {\r\n  var props = Comp.options.props;\r\n  for (var key in props) {\r\n    proxy(Comp.prototype, \"_props\", key);\r\n  }\r\n}\r\n\r\nfunction initComputed$1 (Comp) {\r\n  var computed = Comp.options.computed;\r\n  for (var key in computed) {\r\n    defineComputed(Comp.prototype, key, computed[key]);\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nfunction initAssetRegisters (Vue) {\r\n  /**\r\n   * Create asset registration methods.\r\n   */\r\n  config._assetTypes.forEach(function (type) {\r\n    Vue[type] = function (\r\n      id,\r\n      definition\r\n    ) {\r\n      if (!definition) {\r\n        return this.options[type + 's'][id]\r\n      } else {\r\n        /* istanbul ignore if */\r\n        if (process.env.NODE_ENV !== 'production') {\r\n          if (type === 'component' && config.isReservedTag(id)) {\r\n            warn(\r\n              'Do not use built-in or reserved HTML elements as component ' +\r\n              'id: ' + id\r\n            );\r\n          }\r\n        }\r\n        if (type === 'component' && isPlainObject(definition)) {\r\n          definition.name = definition.name || id;\r\n          definition = this.options._base.extend(definition);\r\n        }\r\n        if (type === 'directive' && typeof definition === 'function') {\r\n          definition = { bind: definition, update: definition };\r\n        }\r\n        this.options[type + 's'][id] = definition;\r\n        return definition\r\n      }\r\n    };\r\n  });\r\n}\r\n\r\n/*  */\r\n\r\nvar patternTypes = [String, RegExp];\r\n\r\nfunction getComponentName (opts) {\r\n  return opts && (opts.Ctor.options.name || opts.tag)\r\n}\r\n\r\nfunction matches (pattern, name) {\r\n  if (typeof pattern === 'string') {\r\n    return pattern.split(',').indexOf(name) > -1\r\n  } else if (pattern instanceof RegExp) {\r\n    return pattern.test(name)\r\n  }\r\n  /* istanbul ignore next */\r\n  return false\r\n}\r\n\r\nfunction pruneCache (cache, filter) {\r\n  for (var key in cache) {\r\n    var cachedNode = cache[key];\r\n    if (cachedNode) {\r\n      var name = getComponentName(cachedNode.componentOptions);\r\n      if (name && !filter(name)) {\r\n        pruneCacheEntry(cachedNode);\r\n        cache[key] = null;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction pruneCacheEntry (vnode) {\r\n  if (vnode) {\r\n    if (!vnode.componentInstance._inactive) {\r\n      callHook(vnode.componentInstance, 'deactivated');\r\n    }\r\n    vnode.componentInstance.$destroy();\r\n  }\r\n}\r\n\r\nvar KeepAlive = {\r\n  name: 'keep-alive',\r\n  abstract: true,\r\n\r\n  props: {\r\n    include: patternTypes,\r\n    exclude: patternTypes\r\n  },\r\n\r\n  created: function created () {\r\n    this.cache = Object.create(null);\r\n  },\r\n\r\n  destroyed: function destroyed () {\r\n    var this$1 = this;\r\n\r\n    for (var key in this$1.cache) {\r\n      pruneCacheEntry(this$1.cache[key]);\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    include: function include (val) {\r\n      pruneCache(this.cache, function (name) { return matches(val, name); });\r\n    },\r\n    exclude: function exclude (val) {\r\n      pruneCache(this.cache, function (name) { return !matches(val, name); });\r\n    }\r\n  },\r\n\r\n  render: function render () {\r\n    var vnode = getFirstComponentChild(this.$slots.default);\r\n    var componentOptions = vnode && vnode.componentOptions;\r\n    if (componentOptions) {\r\n      // check pattern\r\n      var name = getComponentName(componentOptions);\r\n      if (name && (\r\n        (this.include && !matches(this.include, name)) ||\r\n        (this.exclude && matches(this.exclude, name))\r\n      )) {\r\n        return vnode\r\n      }\r\n      var key = vnode.key == null\r\n        // same constructor may get registered as different local components\r\n        // so cid alone is not enough (#3269)\r\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\r\n        : vnode.key;\r\n      if (this.cache[key]) {\r\n        vnode.componentInstance = this.cache[key].componentInstance;\r\n      } else {\r\n        this.cache[key] = vnode;\r\n      }\r\n      vnode.data.keepAlive = true;\r\n    }\r\n    return vnode\r\n  }\r\n};\r\n\r\nvar builtInComponents = {\r\n  KeepAlive: KeepAlive\r\n};\r\n\r\n/*  */\r\n\r\nfunction initGlobalAPI (Vue) {\r\n  // config\r\n  var configDef = {};\r\n  configDef.get = function () { return config; };\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    configDef.set = function () {\r\n      warn(\r\n        'Do not replace the Vue.config object, set individual fields instead.'\r\n      );\r\n    };\r\n  }\r\n  Object.defineProperty(Vue, 'config', configDef);\r\n\r\n  // exposed util methods.\r\n  // NOTE: these are not considered part of the public API - avoid relying on\r\n  // them unless you are aware of the risk.\r\n  Vue.util = {\r\n    warn: warn,\r\n    extend: extend,\r\n    mergeOptions: mergeOptions,\r\n    defineReactive: defineReactive$$1\r\n  };\r\n\r\n  Vue.set = set;\r\n  Vue.delete = del;\r\n  Vue.nextTick = nextTick;\r\n\r\n  Vue.options = Object.create(null);\r\n  config._assetTypes.forEach(function (type) {\r\n    Vue.options[type + 's'] = Object.create(null);\r\n  });\r\n\r\n  // this is used to identify the \"base\" constructor to extend all plain-object\r\n  // components with in Weex's multi-instance scenarios.\r\n  Vue.options._base = Vue;\r\n\r\n  extend(Vue.options.components, builtInComponents);\r\n\r\n  initUse(Vue);\r\n  initMixin$1(Vue);\r\n  initExtend(Vue);\r\n  initAssetRegisters(Vue);\r\n}\r\n\r\ninitGlobalAPI(Vue$3);\r\n\r\nObject.defineProperty(Vue$3.prototype, '$isServer', {\r\n  get: isServerRendering\r\n});\r\n\r\nVue$3.version = '2.2.6';\r\n\r\n/*  */\r\n\r\n// attributes that should be using props for binding\r\nvar acceptValue = makeMap('input,textarea,option,select');\r\nvar mustUseProp = function (tag, type, attr) {\r\n  return (\r\n    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||\r\n    (attr === 'selected' && tag === 'option') ||\r\n    (attr === 'checked' && tag === 'input') ||\r\n    (attr === 'muted' && tag === 'video')\r\n  )\r\n};\r\n\r\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\r\n\r\nvar isBooleanAttr = makeMap(\r\n  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\r\n  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\r\n  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\r\n  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\r\n  'required,reversed,scoped,seamless,selected,sortable,translate,' +\r\n  'truespeed,typemustmatch,visible'\r\n);\r\n\r\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\r\n\r\nvar isXlink = function (name) {\r\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\r\n};\r\n\r\nvar getXlinkProp = function (name) {\r\n  return isXlink(name) ? name.slice(6, name.length) : ''\r\n};\r\n\r\nvar isFalsyAttrValue = function (val) {\r\n  return val == null || val === false\r\n};\r\n\r\n/*  */\r\n\r\nfunction genClassForVnode (vnode) {\r\n  var data = vnode.data;\r\n  var parentNode = vnode;\r\n  var childNode = vnode;\r\n  while (childNode.componentInstance) {\r\n    childNode = childNode.componentInstance._vnode;\r\n    if (childNode.data) {\r\n      data = mergeClassData(childNode.data, data);\r\n    }\r\n  }\r\n  while ((parentNode = parentNode.parent)) {\r\n    if (parentNode.data) {\r\n      data = mergeClassData(data, parentNode.data);\r\n    }\r\n  }\r\n  return genClassFromData(data)\r\n}\r\n\r\nfunction mergeClassData (child, parent) {\r\n  return {\r\n    staticClass: concat(child.staticClass, parent.staticClass),\r\n    class: child.class\r\n      ? [child.class, parent.class]\r\n      : parent.class\r\n  }\r\n}\r\n\r\nfunction genClassFromData (data) {\r\n  var dynamicClass = data.class;\r\n  var staticClass = data.staticClass;\r\n  if (staticClass || dynamicClass) {\r\n    return concat(staticClass, stringifyClass(dynamicClass))\r\n  }\r\n  /* istanbul ignore next */\r\n  return ''\r\n}\r\n\r\nfunction concat (a, b) {\r\n  return a ? b ? (a + ' ' + b) : a : (b || '')\r\n}\r\n\r\nfunction stringifyClass (value) {\r\n  var res = '';\r\n  if (!value) {\r\n    return res\r\n  }\r\n  if (typeof value === 'string') {\r\n    return value\r\n  }\r\n  if (Array.isArray(value)) {\r\n    var stringified;\r\n    for (var i = 0, l = value.length; i < l; i++) {\r\n      if (value[i]) {\r\n        if ((stringified = stringifyClass(value[i]))) {\r\n          res += stringified + ' ';\r\n        }\r\n      }\r\n    }\r\n    return res.slice(0, -1)\r\n  }\r\n  if (isObject(value)) {\r\n    for (var key in value) {\r\n      if (value[key]) { res += key + ' '; }\r\n    }\r\n    return res.slice(0, -1)\r\n  }\r\n  /* istanbul ignore next */\r\n  return res\r\n}\r\n\r\n/*  */\r\n\r\nvar namespaceMap = {\r\n  svg: 'http://www.w3.org/2000/svg',\r\n  math: 'http://www.w3.org/1998/Math/MathML'\r\n};\r\n\r\nvar isHTMLTag = makeMap(\r\n  'html,body,base,head,link,meta,style,title,' +\r\n  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\r\n  'div,dd,dl,dt,figcaption,figure,hr,img,li,main,ol,p,pre,ul,' +\r\n  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\r\n  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\r\n  'embed,object,param,source,canvas,script,noscript,del,ins,' +\r\n  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\r\n  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\r\n  'output,progress,select,textarea,' +\r\n  'details,dialog,menu,menuitem,summary,' +\r\n  'content,element,shadow,template'\r\n);\r\n\r\n// this map is intentionally selective, only covering SVG elements that may\r\n// contain child elements.\r\nvar isSVG = makeMap(\r\n  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\r\n  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\r\n  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\r\n  true\r\n);\r\n\r\nvar isPreTag = function (tag) { return tag === 'pre'; };\r\n\r\nvar isReservedTag = function (tag) {\r\n  return isHTMLTag(tag) || isSVG(tag)\r\n};\r\n\r\nfunction getTagNamespace (tag) {\r\n  if (isSVG(tag)) {\r\n    return 'svg'\r\n  }\r\n  // basic support for MathML\r\n  // note it doesn't support other MathML elements being component roots\r\n  if (tag === 'math') {\r\n    return 'math'\r\n  }\r\n}\r\n\r\nvar unknownElementCache = Object.create(null);\r\nfunction isUnknownElement (tag) {\r\n  /* istanbul ignore if */\r\n  if (!inBrowser) {\r\n    return true\r\n  }\r\n  if (isReservedTag(tag)) {\r\n    return false\r\n  }\r\n  tag = tag.toLowerCase();\r\n  /* istanbul ignore if */\r\n  if (unknownElementCache[tag] != null) {\r\n    return unknownElementCache[tag]\r\n  }\r\n  var el = document.createElement(tag);\r\n  if (tag.indexOf('-') > -1) {\r\n    // http://stackoverflow.com/a/28210364/1070244\r\n    return (unknownElementCache[tag] = (\r\n      el.constructor === window.HTMLUnknownElement ||\r\n      el.constructor === window.HTMLElement\r\n    ))\r\n  } else {\r\n    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\n/**\r\n * Query an element selector if it's not an element already.\r\n */\r\nfunction query (el) {\r\n  if (typeof el === 'string') {\r\n    var selected = document.querySelector(el);\r\n    if (!selected) {\r\n      process.env.NODE_ENV !== 'production' && warn(\r\n        'Cannot find element: ' + el\r\n      );\r\n      return document.createElement('div')\r\n    }\r\n    return selected\r\n  } else {\r\n    return el\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nfunction createElement$1 (tagName, vnode) {\r\n  var elm = document.createElement(tagName);\r\n  if (tagName !== 'select') {\r\n    return elm\r\n  }\r\n  // false or null will remove the attribute but undefined will not\r\n  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\r\n    elm.setAttribute('multiple', 'multiple');\r\n  }\r\n  return elm\r\n}\r\n\r\nfunction createElementNS (namespace, tagName) {\r\n  return document.createElementNS(namespaceMap[namespace], tagName)\r\n}\r\n\r\nfunction createTextNode (text) {\r\n  return document.createTextNode(text)\r\n}\r\n\r\nfunction createComment (text) {\r\n  return document.createComment(text)\r\n}\r\n\r\nfunction insertBefore (parentNode, newNode, referenceNode) {\r\n  parentNode.insertBefore(newNode, referenceNode);\r\n}\r\n\r\nfunction removeChild (node, child) {\r\n  node.removeChild(child);\r\n}\r\n\r\nfunction appendChild (node, child) {\r\n  node.appendChild(child);\r\n}\r\n\r\nfunction parentNode (node) {\r\n  return node.parentNode\r\n}\r\n\r\nfunction nextSibling (node) {\r\n  return node.nextSibling\r\n}\r\n\r\nfunction tagName (node) {\r\n  return node.tagName\r\n}\r\n\r\nfunction setTextContent (node, text) {\r\n  node.textContent = text;\r\n}\r\n\r\nfunction setAttribute (node, key, val) {\r\n  node.setAttribute(key, val);\r\n}\r\n\r\n\r\nvar nodeOps = Object.freeze({\r\n\tcreateElement: createElement$1,\r\n\tcreateElementNS: createElementNS,\r\n\tcreateTextNode: createTextNode,\r\n\tcreateComment: createComment,\r\n\tinsertBefore: insertBefore,\r\n\tremoveChild: removeChild,\r\n\tappendChild: appendChild,\r\n\tparentNode: parentNode,\r\n\tnextSibling: nextSibling,\r\n\ttagName: tagName,\r\n\tsetTextContent: setTextContent,\r\n\tsetAttribute: setAttribute\r\n});\r\n\r\n/*  */\r\n\r\nvar ref = {\r\n  create: function create (_, vnode) {\r\n    registerRef(vnode);\r\n  },\r\n  update: function update (oldVnode, vnode) {\r\n    if (oldVnode.data.ref !== vnode.data.ref) {\r\n      registerRef(oldVnode, true);\r\n      registerRef(vnode);\r\n    }\r\n  },\r\n  destroy: function destroy (vnode) {\r\n    registerRef(vnode, true);\r\n  }\r\n};\r\n\r\nfunction registerRef (vnode, isRemoval) {\r\n  var key = vnode.data.ref;\r\n  if (!key) { return }\r\n\r\n  var vm = vnode.context;\r\n  var ref = vnode.componentInstance || vnode.elm;\r\n  var refs = vm.$refs;\r\n  if (isRemoval) {\r\n    if (Array.isArray(refs[key])) {\r\n      remove(refs[key], ref);\r\n    } else if (refs[key] === ref) {\r\n      refs[key] = undefined;\r\n    }\r\n  } else {\r\n    if (vnode.data.refInFor) {\r\n      if (Array.isArray(refs[key]) && refs[key].indexOf(ref) < 0) {\r\n        refs[key].push(ref);\r\n      } else {\r\n        refs[key] = [ref];\r\n      }\r\n    } else {\r\n      refs[key] = ref;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Virtual DOM patching algorithm based on Snabbdom by\r\n * Simon Friis Vindum (@paldepind)\r\n * Licensed under the MIT License\r\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\r\n *\r\n * modified by Evan You (@yyx990803)\r\n *\r\n\r\n/*\r\n * Not type-checking this because this file is perf-critical and the cost\r\n * of making flow understand it is not worth it.\r\n */\r\n\r\nvar emptyNode = new VNode('', {}, []);\r\n\r\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\r\n\r\nfunction isUndef (v) {\r\n  return v === undefined || v === null\r\n}\r\n\r\nfunction isDef (v) {\r\n  return v !== undefined && v !== null\r\n}\r\n\r\nfunction isTrue (v) {\r\n  return v === true\r\n}\r\n\r\nfunction sameVnode (a, b) {\r\n  return (\r\n    a.key === b.key &&\r\n    a.tag === b.tag &&\r\n    a.isComment === b.isComment &&\r\n    isDef(a.data) === isDef(b.data) &&\r\n    sameInputType(a, b)\r\n  )\r\n}\r\n\r\n// Some browsers do not support dynamically changing type for <input>\r\n// so they need to be treated as different nodes\r\nfunction sameInputType (a, b) {\r\n  if (a.tag !== 'input') { return true }\r\n  var i;\r\n  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\r\n  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\r\n  return typeA === typeB\r\n}\r\n\r\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\r\n  var i, key;\r\n  var map = {};\r\n  for (i = beginIdx; i <= endIdx; ++i) {\r\n    key = children[i].key;\r\n    if (isDef(key)) { map[key] = i; }\r\n  }\r\n  return map\r\n}\r\n\r\nfunction createPatchFunction (backend) {\r\n  var i, j;\r\n  var cbs = {};\r\n\r\n  var modules = backend.modules;\r\n  var nodeOps = backend.nodeOps;\r\n\r\n  for (i = 0; i < hooks.length; ++i) {\r\n    cbs[hooks[i]] = [];\r\n    for (j = 0; j < modules.length; ++j) {\r\n      if (isDef(modules[j][hooks[i]])) {\r\n        cbs[hooks[i]].push(modules[j][hooks[i]]);\r\n      }\r\n    }\r\n  }\r\n\r\n  function emptyNodeAt (elm) {\r\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\r\n  }\r\n\r\n  function createRmCb (childElm, listeners) {\r\n    function remove$$1 () {\r\n      if (--remove$$1.listeners === 0) {\r\n        removeNode(childElm);\r\n      }\r\n    }\r\n    remove$$1.listeners = listeners;\r\n    return remove$$1\r\n  }\r\n\r\n  function removeNode (el) {\r\n    var parent = nodeOps.parentNode(el);\r\n    // element may have already been removed due to v-html / v-text\r\n    if (isDef(parent)) {\r\n      nodeOps.removeChild(parent, el);\r\n    }\r\n  }\r\n\r\n  var inPre = 0;\r\n  function createElm (vnode, insertedVnodeQueue, parentElm, refElm, nested) {\r\n    vnode.isRootInsert = !nested; // for transition enter check\r\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\r\n      return\r\n    }\r\n\r\n    var data = vnode.data;\r\n    var children = vnode.children;\r\n    var tag = vnode.tag;\r\n    if (isDef(tag)) {\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        if (data && data.pre) {\r\n          inPre++;\r\n        }\r\n        if (\r\n          !inPre &&\r\n          !vnode.ns &&\r\n          !(config.ignoredElements.length && config.ignoredElements.indexOf(tag) > -1) &&\r\n          config.isUnknownElement(tag)\r\n        ) {\r\n          warn(\r\n            'Unknown custom element: <' + tag + '> - did you ' +\r\n            'register the component correctly? For recursive components, ' +\r\n            'make sure to provide the \"name\" option.',\r\n            vnode.context\r\n          );\r\n        }\r\n      }\r\n      vnode.elm = vnode.ns\r\n        ? nodeOps.createElementNS(vnode.ns, tag)\r\n        : nodeOps.createElement(tag, vnode);\r\n      setScope(vnode);\r\n\r\n      /* istanbul ignore if */\r\n      {\r\n        createChildren(vnode, children, insertedVnodeQueue);\r\n        if (isDef(data)) {\r\n          invokeCreateHooks(vnode, insertedVnodeQueue);\r\n        }\r\n        insert(parentElm, vnode.elm, refElm);\r\n      }\r\n\r\n      if (process.env.NODE_ENV !== 'production' && data && data.pre) {\r\n        inPre--;\r\n      }\r\n    } else if (isTrue(vnode.isComment)) {\r\n      vnode.elm = nodeOps.createComment(vnode.text);\r\n      insert(parentElm, vnode.elm, refElm);\r\n    } else {\r\n      vnode.elm = nodeOps.createTextNode(vnode.text);\r\n      insert(parentElm, vnode.elm, refElm);\r\n    }\r\n  }\r\n\r\n  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\r\n    var i = vnode.data;\r\n    if (isDef(i)) {\r\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\r\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\r\n        i(vnode, false /* hydrating */, parentElm, refElm);\r\n      }\r\n      // after calling the init hook, if the vnode is a child component\r\n      // it should've created a child instance and mounted it. the child\r\n      // component also has set the placeholder vnode's elm.\r\n      // in that case we can just return the element and be done.\r\n      if (isDef(vnode.componentInstance)) {\r\n        initComponent(vnode, insertedVnodeQueue);\r\n        if (isTrue(isReactivated)) {\r\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\r\n        }\r\n        return true\r\n      }\r\n    }\r\n  }\r\n\r\n  function initComponent (vnode, insertedVnodeQueue) {\r\n    if (isDef(vnode.data.pendingInsert)) {\r\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\r\n    }\r\n    vnode.elm = vnode.componentInstance.$el;\r\n    if (isPatchable(vnode)) {\r\n      invokeCreateHooks(vnode, insertedVnodeQueue);\r\n      setScope(vnode);\r\n    } else {\r\n      // empty component root.\r\n      // skip all element-related modules except for ref (#3455)\r\n      registerRef(vnode);\r\n      // make sure to invoke the insert hook\r\n      insertedVnodeQueue.push(vnode);\r\n    }\r\n  }\r\n\r\n  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\r\n    var i;\r\n    // hack for #4339: a reactivated component with inner transition\r\n    // does not trigger because the inner node's created hooks are not called\r\n    // again. It's not ideal to involve module-specific logic in here but\r\n    // there doesn't seem to be a better way to do it.\r\n    var innerNode = vnode;\r\n    while (innerNode.componentInstance) {\r\n      innerNode = innerNode.componentInstance._vnode;\r\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\r\n        for (i = 0; i < cbs.activate.length; ++i) {\r\n          cbs.activate[i](emptyNode, innerNode);\r\n        }\r\n        insertedVnodeQueue.push(innerNode);\r\n        break\r\n      }\r\n    }\r\n    // unlike a newly created component,\r\n    // a reactivated keep-alive component doesn't insert itself\r\n    insert(parentElm, vnode.elm, refElm);\r\n  }\r\n\r\n  function insert (parent, elm, ref) {\r\n    if (isDef(parent)) {\r\n      if (isDef(ref)) {\r\n        nodeOps.insertBefore(parent, elm, ref);\r\n      } else {\r\n        nodeOps.appendChild(parent, elm);\r\n      }\r\n    }\r\n  }\r\n\r\n  function createChildren (vnode, children, insertedVnodeQueue) {\r\n    if (Array.isArray(children)) {\r\n      for (var i = 0; i < children.length; ++i) {\r\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);\r\n      }\r\n    } else if (isPrimitive(vnode.text)) {\r\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(vnode.text));\r\n    }\r\n  }\r\n\r\n  function isPatchable (vnode) {\r\n    while (vnode.componentInstance) {\r\n      vnode = vnode.componentInstance._vnode;\r\n    }\r\n    return isDef(vnode.tag)\r\n  }\r\n\r\n  function invokeCreateHooks (vnode, insertedVnodeQueue) {\r\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\r\n      cbs.create[i$1](emptyNode, vnode);\r\n    }\r\n    i = vnode.data.hook; // Reuse variable\r\n    if (isDef(i)) {\r\n      if (isDef(i.create)) { i.create(emptyNode, vnode); }\r\n      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }\r\n    }\r\n  }\r\n\r\n  // set scope id attribute for scoped CSS.\r\n  // this is implemented as a special case to avoid the overhead\r\n  // of going through the normal attribute patching process.\r\n  function setScope (vnode) {\r\n    var i;\r\n    var ancestor = vnode;\r\n    while (ancestor) {\r\n      if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\r\n        nodeOps.setAttribute(vnode.elm, i, '');\r\n      }\r\n      ancestor = ancestor.parent;\r\n    }\r\n    // for slot content they should also get the scopeId from the host instance.\r\n    if (isDef(i = activeInstance) &&\r\n        i !== vnode.context &&\r\n        isDef(i = i.$options._scopeId)) {\r\n      nodeOps.setAttribute(vnode.elm, i, '');\r\n    }\r\n  }\r\n\r\n  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\r\n    for (; startIdx <= endIdx; ++startIdx) {\r\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);\r\n    }\r\n  }\r\n\r\n  function invokeDestroyHook (vnode) {\r\n    var i, j;\r\n    var data = vnode.data;\r\n    if (isDef(data)) {\r\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\r\n      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\r\n    }\r\n    if (isDef(i = vnode.children)) {\r\n      for (j = 0; j < vnode.children.length; ++j) {\r\n        invokeDestroyHook(vnode.children[j]);\r\n      }\r\n    }\r\n  }\r\n\r\n  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {\r\n    for (; startIdx <= endIdx; ++startIdx) {\r\n      var ch = vnodes[startIdx];\r\n      if (isDef(ch)) {\r\n        if (isDef(ch.tag)) {\r\n          removeAndInvokeRemoveHook(ch);\r\n          invokeDestroyHook(ch);\r\n        } else { // Text node\r\n          removeNode(ch.elm);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function removeAndInvokeRemoveHook (vnode, rm) {\r\n    if (isDef(rm) || isDef(vnode.data)) {\r\n      var listeners = cbs.remove.length + 1;\r\n      if (isDef(rm)) {\r\n        // we have a recursively passed down rm callback\r\n        // increase the listeners count\r\n        rm.listeners += listeners;\r\n      } else {\r\n        // directly removing\r\n        rm = createRmCb(vnode.elm, listeners);\r\n      }\r\n      // recursively invoke hooks on child component root node\r\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\r\n        removeAndInvokeRemoveHook(i, rm);\r\n      }\r\n      for (i = 0; i < cbs.remove.length; ++i) {\r\n        cbs.remove[i](vnode, rm);\r\n      }\r\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\r\n        i(vnode, rm);\r\n      } else {\r\n        rm();\r\n      }\r\n    } else {\r\n      removeNode(vnode.elm);\r\n    }\r\n  }\r\n\r\n  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\r\n    var oldStartIdx = 0;\r\n    var newStartIdx = 0;\r\n    var oldEndIdx = oldCh.length - 1;\r\n    var oldStartVnode = oldCh[0];\r\n    var oldEndVnode = oldCh[oldEndIdx];\r\n    var newEndIdx = newCh.length - 1;\r\n    var newStartVnode = newCh[0];\r\n    var newEndVnode = newCh[newEndIdx];\r\n    var oldKeyToIdx, idxInOld, elmToMove, refElm;\r\n\r\n    // removeOnly is a special flag used only by <transition-group>\r\n    // to ensure removed elements stay in correct relative positions\r\n    // during leaving transitions\r\n    var canMove = !removeOnly;\r\n\r\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\r\n      if (isUndef(oldStartVnode)) {\r\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\r\n      } else if (isUndef(oldEndVnode)) {\r\n        oldEndVnode = oldCh[--oldEndIdx];\r\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\r\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\r\n        oldStartVnode = oldCh[++oldStartIdx];\r\n        newStartVnode = newCh[++newStartIdx];\r\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\r\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\r\n        oldEndVnode = oldCh[--oldEndIdx];\r\n        newEndVnode = newCh[--newEndIdx];\r\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\r\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\r\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\r\n        oldStartVnode = oldCh[++oldStartIdx];\r\n        newEndVnode = newCh[--newEndIdx];\r\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\r\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\r\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\r\n        oldEndVnode = oldCh[--oldEndIdx];\r\n        newStartVnode = newCh[++newStartIdx];\r\n      } else {\r\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\r\n        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : null;\r\n        if (isUndef(idxInOld)) { // New element\r\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\r\n          newStartVnode = newCh[++newStartIdx];\r\n        } else {\r\n          elmToMove = oldCh[idxInOld];\r\n          /* istanbul ignore if */\r\n          if (process.env.NODE_ENV !== 'production' && !elmToMove) {\r\n            warn(\r\n              'It seems there are duplicate keys that is causing an update error. ' +\r\n              'Make sure each v-for item has a unique key.'\r\n            );\r\n          }\r\n          if (sameVnode(elmToMove, newStartVnode)) {\r\n            patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);\r\n            oldCh[idxInOld] = undefined;\r\n            canMove && nodeOps.insertBefore(parentElm, newStartVnode.elm, oldStartVnode.elm);\r\n            newStartVnode = newCh[++newStartIdx];\r\n          } else {\r\n            // same key but different element. treat as new element\r\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\r\n            newStartVnode = newCh[++newStartIdx];\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (oldStartIdx > oldEndIdx) {\r\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\r\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\r\n    } else if (newStartIdx > newEndIdx) {\r\n      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\r\n    }\r\n  }\r\n\r\n  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {\r\n    if (oldVnode === vnode) {\r\n      return\r\n    }\r\n    // reuse element for static trees.\r\n    // note we only do this if the vnode is cloned -\r\n    // if the new node is not cloned it means the render functions have been\r\n    // reset by the hot-reload-api and we need to do a proper re-render.\r\n    if (isTrue(vnode.isStatic) &&\r\n        isTrue(oldVnode.isStatic) &&\r\n        vnode.key === oldVnode.key &&\r\n        (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {\r\n      vnode.elm = oldVnode.elm;\r\n      vnode.componentInstance = oldVnode.componentInstance;\r\n      return\r\n    }\r\n    var i;\r\n    var data = vnode.data;\r\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\r\n      i(oldVnode, vnode);\r\n    }\r\n    var elm = vnode.elm = oldVnode.elm;\r\n    var oldCh = oldVnode.children;\r\n    var ch = vnode.children;\r\n    if (isDef(data) && isPatchable(vnode)) {\r\n      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\r\n      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\r\n    }\r\n    if (isUndef(vnode.text)) {\r\n      if (isDef(oldCh) && isDef(ch)) {\r\n        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\r\n      } else if (isDef(ch)) {\r\n        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\r\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\r\n      } else if (isDef(oldCh)) {\r\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\r\n      } else if (isDef(oldVnode.text)) {\r\n        nodeOps.setTextContent(elm, '');\r\n      }\r\n    } else if (oldVnode.text !== vnode.text) {\r\n      nodeOps.setTextContent(elm, vnode.text);\r\n    }\r\n    if (isDef(data)) {\r\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\r\n    }\r\n  }\r\n\r\n  function invokeInsertHook (vnode, queue, initial) {\r\n    // delay insert hooks for component root nodes, invoke them after the\r\n    // element is really inserted\r\n    if (isTrue(initial) && isDef(vnode.parent)) {\r\n      vnode.parent.data.pendingInsert = queue;\r\n    } else {\r\n      for (var i = 0; i < queue.length; ++i) {\r\n        queue[i].data.hook.insert(queue[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  var bailed = false;\r\n  // list of modules that can skip create hook during hydration because they\r\n  // are already rendered on the client or has no need for initialization\r\n  var isRenderedModule = makeMap('attrs,style,class,staticClass,staticStyle,key');\r\n\r\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\r\n  function hydrate (elm, vnode, insertedVnodeQueue) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (!assertNodeMatch(elm, vnode)) {\r\n        return false\r\n      }\r\n    }\r\n    vnode.elm = elm;\r\n    var tag = vnode.tag;\r\n    var data = vnode.data;\r\n    var children = vnode.children;\r\n    if (isDef(data)) {\r\n      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\r\n      if (isDef(i = vnode.componentInstance)) {\r\n        // child component. it should have hydrated its own tree.\r\n        initComponent(vnode, insertedVnodeQueue);\r\n        return true\r\n      }\r\n    }\r\n    if (isDef(tag)) {\r\n      if (isDef(children)) {\r\n        // empty element, allow client to pick up and populate children\r\n        if (!elm.hasChildNodes()) {\r\n          createChildren(vnode, children, insertedVnodeQueue);\r\n        } else {\r\n          var childrenMatch = true;\r\n          var childNode = elm.firstChild;\r\n          for (var i$1 = 0; i$1 < children.length; i$1++) {\r\n            if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue)) {\r\n              childrenMatch = false;\r\n              break\r\n            }\r\n            childNode = childNode.nextSibling;\r\n          }\r\n          // if childNode is not null, it means the actual childNodes list is\r\n          // longer than the virtual children list.\r\n          if (!childrenMatch || childNode) {\r\n            if (process.env.NODE_ENV !== 'production' &&\r\n                typeof console !== 'undefined' &&\r\n                !bailed) {\r\n              bailed = true;\r\n              console.warn('Parent: ', elm);\r\n              console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\r\n            }\r\n            return false\r\n          }\r\n        }\r\n      }\r\n      if (isDef(data)) {\r\n        for (var key in data) {\r\n          if (!isRenderedModule(key)) {\r\n            invokeCreateHooks(vnode, insertedVnodeQueue);\r\n            break\r\n          }\r\n        }\r\n      }\r\n    } else if (elm.data !== vnode.text) {\r\n      elm.data = vnode.text;\r\n    }\r\n    return true\r\n  }\r\n\r\n  function assertNodeMatch (node, vnode) {\r\n    if (isDef(vnode.tag)) {\r\n      return (\r\n        vnode.tag.indexOf('vue-component') === 0 ||\r\n        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\r\n      )\r\n    } else {\r\n      return node.nodeType === (vnode.isComment ? 8 : 3)\r\n    }\r\n  }\r\n\r\n  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {\r\n    if (isUndef(vnode)) {\r\n      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\r\n      return\r\n    }\r\n\r\n    var isInitialPatch = false;\r\n    var insertedVnodeQueue = [];\r\n\r\n    if (isUndef(oldVnode)) {\r\n      // empty mount (likely as component), create new root element\r\n      isInitialPatch = true;\r\n      createElm(vnode, insertedVnodeQueue, parentElm, refElm);\r\n    } else {\r\n      var isRealElement = isDef(oldVnode.nodeType);\r\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\r\n        // patch existing root node\r\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);\r\n      } else {\r\n        if (isRealElement) {\r\n          // mounting to a real element\r\n          // check if this is server-rendered content and if we can perform\r\n          // a successful hydration.\r\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute('server-rendered')) {\r\n            oldVnode.removeAttribute('server-rendered');\r\n            hydrating = true;\r\n          }\r\n          if (isTrue(hydrating)) {\r\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\r\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\r\n              return oldVnode\r\n            } else if (process.env.NODE_ENV !== 'production') {\r\n              warn(\r\n                'The client-side rendered virtual DOM tree is not matching ' +\r\n                'server-rendered content. This is likely caused by incorrect ' +\r\n                'HTML markup, for example nesting block-level elements inside ' +\r\n                '<p>, or missing <tbody>. Bailing hydration and performing ' +\r\n                'full client-side render.'\r\n              );\r\n            }\r\n          }\r\n          // either not server-rendered, or hydration failed.\r\n          // create an empty node and replace it\r\n          oldVnode = emptyNodeAt(oldVnode);\r\n        }\r\n        // replacing existing element\r\n        var oldElm = oldVnode.elm;\r\n        var parentElm$1 = nodeOps.parentNode(oldElm);\r\n        createElm(\r\n          vnode,\r\n          insertedVnodeQueue,\r\n          // extremely rare edge case: do not insert if old element is in a\r\n          // leaving transition. Only happens when combining transition +\r\n          // keep-alive + HOCs. (#4590)\r\n          oldElm._leaveCb ? null : parentElm$1,\r\n          nodeOps.nextSibling(oldElm)\r\n        );\r\n\r\n        if (isDef(vnode.parent)) {\r\n          // component root element replaced.\r\n          // update parent placeholder node element, recursively\r\n          var ancestor = vnode.parent;\r\n          while (ancestor) {\r\n            ancestor.elm = vnode.elm;\r\n            ancestor = ancestor.parent;\r\n          }\r\n          if (isPatchable(vnode)) {\r\n            for (var i = 0; i < cbs.create.length; ++i) {\r\n              cbs.create[i](emptyNode, vnode.parent);\r\n            }\r\n          }\r\n        }\r\n\r\n        if (isDef(parentElm$1)) {\r\n          removeVnodes(parentElm$1, [oldVnode], 0, 0);\r\n        } else if (isDef(oldVnode.tag)) {\r\n          invokeDestroyHook(oldVnode);\r\n        }\r\n      }\r\n    }\r\n\r\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\r\n    return vnode.elm\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nvar directives = {\r\n  create: updateDirectives,\r\n  update: updateDirectives,\r\n  destroy: function unbindDirectives (vnode) {\r\n    updateDirectives(vnode, emptyNode);\r\n  }\r\n};\r\n\r\nfunction updateDirectives (oldVnode, vnode) {\r\n  if (oldVnode.data.directives || vnode.data.directives) {\r\n    _update(oldVnode, vnode);\r\n  }\r\n}\r\n\r\nfunction _update (oldVnode, vnode) {\r\n  var isCreate = oldVnode === emptyNode;\r\n  var isDestroy = vnode === emptyNode;\r\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\r\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\r\n\r\n  var dirsWithInsert = [];\r\n  var dirsWithPostpatch = [];\r\n\r\n  var key, oldDir, dir;\r\n  for (key in newDirs) {\r\n    oldDir = oldDirs[key];\r\n    dir = newDirs[key];\r\n    if (!oldDir) {\r\n      // new directive, bind\r\n      callHook$1(dir, 'bind', vnode, oldVnode);\r\n      if (dir.def && dir.def.inserted) {\r\n        dirsWithInsert.push(dir);\r\n      }\r\n    } else {\r\n      // existing directive, update\r\n      dir.oldValue = oldDir.value;\r\n      callHook$1(dir, 'update', vnode, oldVnode);\r\n      if (dir.def && dir.def.componentUpdated) {\r\n        dirsWithPostpatch.push(dir);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (dirsWithInsert.length) {\r\n    var callInsert = function () {\r\n      for (var i = 0; i < dirsWithInsert.length; i++) {\r\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\r\n      }\r\n    };\r\n    if (isCreate) {\r\n      mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', callInsert);\r\n    } else {\r\n      callInsert();\r\n    }\r\n  }\r\n\r\n  if (dirsWithPostpatch.length) {\r\n    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'postpatch', function () {\r\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\r\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\r\n      }\r\n    });\r\n  }\r\n\r\n  if (!isCreate) {\r\n    for (key in oldDirs) {\r\n      if (!newDirs[key]) {\r\n        // no longer present, unbind\r\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nvar emptyModifiers = Object.create(null);\r\n\r\nfunction normalizeDirectives$1 (\r\n  dirs,\r\n  vm\r\n) {\r\n  var res = Object.create(null);\r\n  if (!dirs) {\r\n    return res\r\n  }\r\n  var i, dir;\r\n  for (i = 0; i < dirs.length; i++) {\r\n    dir = dirs[i];\r\n    if (!dir.modifiers) {\r\n      dir.modifiers = emptyModifiers;\r\n    }\r\n    res[getRawDirName(dir)] = dir;\r\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\r\n  }\r\n  return res\r\n}\r\n\r\nfunction getRawDirName (dir) {\r\n  return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\r\n}\r\n\r\nfunction callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\r\n  var fn = dir.def && dir.def[hook];\r\n  if (fn) {\r\n    fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\r\n  }\r\n}\r\n\r\nvar baseModules = [\r\n  ref,\r\n  directives\r\n];\r\n\r\n/*  */\r\n\r\nfunction updateAttrs (oldVnode, vnode) {\r\n  if (!oldVnode.data.attrs && !vnode.data.attrs) {\r\n    return\r\n  }\r\n  var key, cur, old;\r\n  var elm = vnode.elm;\r\n  var oldAttrs = oldVnode.data.attrs || {};\r\n  var attrs = vnode.data.attrs || {};\r\n  // clone observed objects, as the user probably wants to mutate it\r\n  if (attrs.__ob__) {\r\n    attrs = vnode.data.attrs = extend({}, attrs);\r\n  }\r\n\r\n  for (key in attrs) {\r\n    cur = attrs[key];\r\n    old = oldAttrs[key];\r\n    if (old !== cur) {\r\n      setAttr(elm, key, cur);\r\n    }\r\n  }\r\n  // #4391: in IE9, setting type can reset value for input[type=radio]\r\n  /* istanbul ignore if */\r\n  if (isIE9 && attrs.value !== oldAttrs.value) {\r\n    setAttr(elm, 'value', attrs.value);\r\n  }\r\n  for (key in oldAttrs) {\r\n    if (attrs[key] == null) {\r\n      if (isXlink(key)) {\r\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\r\n      } else if (!isEnumeratedAttr(key)) {\r\n        elm.removeAttribute(key);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction setAttr (el, key, value) {\r\n  if (isBooleanAttr(key)) {\r\n    // set attribute for blank value\r\n    // e.g. <option disabled>Select one</option>\r\n    if (isFalsyAttrValue(value)) {\r\n      el.removeAttribute(key);\r\n    } else {\r\n      el.setAttribute(key, key);\r\n    }\r\n  } else if (isEnumeratedAttr(key)) {\r\n    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');\r\n  } else if (isXlink(key)) {\r\n    if (isFalsyAttrValue(value)) {\r\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\r\n    } else {\r\n      el.setAttributeNS(xlinkNS, key, value);\r\n    }\r\n  } else {\r\n    if (isFalsyAttrValue(value)) {\r\n      el.removeAttribute(key);\r\n    } else {\r\n      el.setAttribute(key, value);\r\n    }\r\n  }\r\n}\r\n\r\nvar attrs = {\r\n  create: updateAttrs,\r\n  update: updateAttrs\r\n};\r\n\r\n/*  */\r\n\r\nfunction updateClass (oldVnode, vnode) {\r\n  var el = vnode.elm;\r\n  var data = vnode.data;\r\n  var oldData = oldVnode.data;\r\n  if (!data.staticClass && !data.class &&\r\n      (!oldData || (!oldData.staticClass && !oldData.class))) {\r\n    return\r\n  }\r\n\r\n  var cls = genClassForVnode(vnode);\r\n\r\n  // handle transition classes\r\n  var transitionClass = el._transitionClasses;\r\n  if (transitionClass) {\r\n    cls = concat(cls, stringifyClass(transitionClass));\r\n  }\r\n\r\n  // set the class\r\n  if (cls !== el._prevClass) {\r\n    el.setAttribute('class', cls);\r\n    el._prevClass = cls;\r\n  }\r\n}\r\n\r\nvar klass = {\r\n  create: updateClass,\r\n  update: updateClass\r\n};\r\n\r\n/*  */\r\n\r\nvar validDivisionCharRE = /[\\w).+\\-_$\\]]/;\r\n\r\nfunction parseFilters (exp) {\r\n  var inSingle = false;\r\n  var inDouble = false;\r\n  var inTemplateString = false;\r\n  var inRegex = false;\r\n  var curly = 0;\r\n  var square = 0;\r\n  var paren = 0;\r\n  var lastFilterIndex = 0;\r\n  var c, prev, i, expression, filters;\r\n\r\n  for (i = 0; i < exp.length; i++) {\r\n    prev = c;\r\n    c = exp.charCodeAt(i);\r\n    if (inSingle) {\r\n      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }\r\n    } else if (inDouble) {\r\n      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }\r\n    } else if (inTemplateString) {\r\n      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }\r\n    } else if (inRegex) {\r\n      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }\r\n    } else if (\r\n      c === 0x7C && // pipe\r\n      exp.charCodeAt(i + 1) !== 0x7C &&\r\n      exp.charCodeAt(i - 1) !== 0x7C &&\r\n      !curly && !square && !paren\r\n    ) {\r\n      if (expression === undefined) {\r\n        // first filter, end of expression\r\n        lastFilterIndex = i + 1;\r\n        expression = exp.slice(0, i).trim();\r\n      } else {\r\n        pushFilter();\r\n      }\r\n    } else {\r\n      switch (c) {\r\n        case 0x22: inDouble = true; break         // \"\r\n        case 0x27: inSingle = true; break         // '\r\n        case 0x60: inTemplateString = true; break // `\r\n        case 0x28: paren++; break                 // (\r\n        case 0x29: paren--; break                 // )\r\n        case 0x5B: square++; break                // [\r\n        case 0x5D: square--; break                // ]\r\n        case 0x7B: curly++; break                 // {\r\n        case 0x7D: curly--; break                 // }\r\n      }\r\n      if (c === 0x2f) { // /\r\n        var j = i - 1;\r\n        var p = (void 0);\r\n        // find first non-whitespace prev char\r\n        for (; j >= 0; j--) {\r\n          p = exp.charAt(j);\r\n          if (p !== ' ') { break }\r\n        }\r\n        if (!p || !validDivisionCharRE.test(p)) {\r\n          inRegex = true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (expression === undefined) {\r\n    expression = exp.slice(0, i).trim();\r\n  } else if (lastFilterIndex !== 0) {\r\n    pushFilter();\r\n  }\r\n\r\n  function pushFilter () {\r\n    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\r\n    lastFilterIndex = i + 1;\r\n  }\r\n\r\n  if (filters) {\r\n    for (i = 0; i < filters.length; i++) {\r\n      expression = wrapFilter(expression, filters[i]);\r\n    }\r\n  }\r\n\r\n  return expression\r\n}\r\n\r\nfunction wrapFilter (exp, filter) {\r\n  var i = filter.indexOf('(');\r\n  if (i < 0) {\r\n    // _f: resolveFilter\r\n    return (\"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\")\r\n  } else {\r\n    var name = filter.slice(0, i);\r\n    var args = filter.slice(i + 1);\r\n    return (\"_f(\\\"\" + name + \"\\\")(\" + exp + \",\" + args)\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nfunction baseWarn (msg) {\r\n  console.error((\"[Vue compiler]: \" + msg));\r\n}\r\n\r\nfunction pluckModuleFunction (\r\n  modules,\r\n  key\r\n) {\r\n  return modules\r\n    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })\r\n    : []\r\n}\r\n\r\nfunction addProp (el, name, value) {\r\n  (el.props || (el.props = [])).push({ name: name, value: value });\r\n}\r\n\r\nfunction addAttr (el, name, value) {\r\n  (el.attrs || (el.attrs = [])).push({ name: name, value: value });\r\n}\r\n\r\nfunction addDirective (\r\n  el,\r\n  name,\r\n  rawName,\r\n  value,\r\n  arg,\r\n  modifiers\r\n) {\r\n  (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });\r\n}\r\n\r\nfunction addHandler (\r\n  el,\r\n  name,\r\n  value,\r\n  modifiers,\r\n  important\r\n) {\r\n  // check capture modifier\r\n  if (modifiers && modifiers.capture) {\r\n    delete modifiers.capture;\r\n    name = '!' + name; // mark the event as captured\r\n  }\r\n  if (modifiers && modifiers.once) {\r\n    delete modifiers.once;\r\n    name = '~' + name; // mark the event as once\r\n  }\r\n  var events;\r\n  if (modifiers && modifiers.native) {\r\n    delete modifiers.native;\r\n    events = el.nativeEvents || (el.nativeEvents = {});\r\n  } else {\r\n    events = el.events || (el.events = {});\r\n  }\r\n  var newHandler = { value: value, modifiers: modifiers };\r\n  var handlers = events[name];\r\n  /* istanbul ignore if */\r\n  if (Array.isArray(handlers)) {\r\n    important ? handlers.unshift(newHandler) : handlers.push(newHandler);\r\n  } else if (handlers) {\r\n    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\r\n  } else {\r\n    events[name] = newHandler;\r\n  }\r\n}\r\n\r\nfunction getBindingAttr (\r\n  el,\r\n  name,\r\n  getStatic\r\n) {\r\n  var dynamicValue =\r\n    getAndRemoveAttr(el, ':' + name) ||\r\n    getAndRemoveAttr(el, 'v-bind:' + name);\r\n  if (dynamicValue != null) {\r\n    return parseFilters(dynamicValue)\r\n  } else if (getStatic !== false) {\r\n    var staticValue = getAndRemoveAttr(el, name);\r\n    if (staticValue != null) {\r\n      return JSON.stringify(staticValue)\r\n    }\r\n  }\r\n}\r\n\r\nfunction getAndRemoveAttr (el, name) {\r\n  var val;\r\n  if ((val = el.attrsMap[name]) != null) {\r\n    var list = el.attrsList;\r\n    for (var i = 0, l = list.length; i < l; i++) {\r\n      if (list[i].name === name) {\r\n        list.splice(i, 1);\r\n        break\r\n      }\r\n    }\r\n  }\r\n  return val\r\n}\r\n\r\n/*  */\r\n\r\n/**\r\n * Cross-platform code generation for component v-model\r\n */\r\nfunction genComponentModel (\r\n  el,\r\n  value,\r\n  modifiers\r\n) {\r\n  var ref = modifiers || {};\r\n  var number = ref.number;\r\n  var trim = ref.trim;\r\n\r\n  var baseValueExpression = '$$v';\r\n  var valueExpression = baseValueExpression;\r\n  if (trim) {\r\n    valueExpression =\r\n      \"(typeof \" + baseValueExpression + \" === 'string'\" +\r\n        \"? \" + baseValueExpression + \".trim()\" +\r\n        \": \" + baseValueExpression + \")\";\r\n  }\r\n  if (number) {\r\n    valueExpression = \"_n(\" + valueExpression + \")\";\r\n  }\r\n  var assignment = genAssignmentCode(value, valueExpression);\r\n\r\n  el.model = {\r\n    value: (\"(\" + value + \")\"),\r\n    expression: (\"\\\"\" + value + \"\\\"\"),\r\n    callback: (\"function (\" + baseValueExpression + \") {\" + assignment + \"}\")\r\n  };\r\n}\r\n\r\n/**\r\n * Cross-platform codegen helper for generating v-model value assignment code.\r\n */\r\nfunction genAssignmentCode (\r\n  value,\r\n  assignment\r\n) {\r\n  var modelRs = parseModel(value);\r\n  if (modelRs.idx === null) {\r\n    return (value + \"=\" + assignment)\r\n  } else {\r\n    return \"var $$exp = \" + (modelRs.exp) + \", $$idx = \" + (modelRs.idx) + \";\" +\r\n      \"if (!Array.isArray($$exp)){\" +\r\n        value + \"=\" + assignment + \"}\" +\r\n      \"else{$$exp.splice($$idx, 1, \" + assignment + \")}\"\r\n  }\r\n}\r\n\r\n/**\r\n * parse directive model to do the array update transform. a[idx] = val => $$a.splice($$idx, 1, val)\r\n *\r\n * for loop possible cases:\r\n *\r\n * - test\r\n * - test[idx]\r\n * - test[test1[idx]]\r\n * - test[\"a\"][idx]\r\n * - xxx.test[a[a].test1[idx]]\r\n * - test.xxx.a[\"asa\"][test1[idx]]\r\n *\r\n */\r\n\r\nvar len;\r\nvar str;\r\nvar chr;\r\nvar index$1;\r\nvar expressionPos;\r\nvar expressionEndPos;\r\n\r\nfunction parseModel (val) {\r\n  str = val;\r\n  len = str.length;\r\n  index$1 = expressionPos = expressionEndPos = 0;\r\n\r\n  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {\r\n    return {\r\n      exp: val,\r\n      idx: null\r\n    }\r\n  }\r\n\r\n  while (!eof()) {\r\n    chr = next();\r\n    /* istanbul ignore if */\r\n    if (isStringStart(chr)) {\r\n      parseString(chr);\r\n    } else if (chr === 0x5B) {\r\n      parseBracket(chr);\r\n    }\r\n  }\r\n\r\n  return {\r\n    exp: val.substring(0, expressionPos),\r\n    idx: val.substring(expressionPos + 1, expressionEndPos)\r\n  }\r\n}\r\n\r\nfunction next () {\r\n  return str.charCodeAt(++index$1)\r\n}\r\n\r\nfunction eof () {\r\n  return index$1 >= len\r\n}\r\n\r\nfunction isStringStart (chr) {\r\n  return chr === 0x22 || chr === 0x27\r\n}\r\n\r\nfunction parseBracket (chr) {\r\n  var inBracket = 1;\r\n  expressionPos = index$1;\r\n  while (!eof()) {\r\n    chr = next();\r\n    if (isStringStart(chr)) {\r\n      parseString(chr);\r\n      continue\r\n    }\r\n    if (chr === 0x5B) { inBracket++; }\r\n    if (chr === 0x5D) { inBracket--; }\r\n    if (inBracket === 0) {\r\n      expressionEndPos = index$1;\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\nfunction parseString (chr) {\r\n  var stringQuote = chr;\r\n  while (!eof()) {\r\n    chr = next();\r\n    if (chr === stringQuote) {\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nvar warn$1;\r\n\r\n// in some cases, the event used has to be determined at runtime\r\n// so we used some reserved tokens during compile.\r\nvar RANGE_TOKEN = '__r';\r\nvar CHECKBOX_RADIO_TOKEN = '__c';\r\n\r\nfunction model (\r\n  el,\r\n  dir,\r\n  _warn\r\n) {\r\n  warn$1 = _warn;\r\n  var value = dir.value;\r\n  var modifiers = dir.modifiers;\r\n  var tag = el.tag;\r\n  var type = el.attrsMap.type;\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    var dynamicType = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];\r\n    if (tag === 'input' && dynamicType) {\r\n      warn$1(\r\n        \"<input :type=\\\"\" + dynamicType + \"\\\" v-model=\\\"\" + value + \"\\\">:\\n\" +\r\n        \"v-model does not support dynamic input types. Use v-if branches instead.\"\r\n      );\r\n    }\r\n    // inputs with type=\"file\" are read only and setting the input's\r\n    // value will throw an error.\r\n    if (tag === 'input' && type === 'file') {\r\n      warn$1(\r\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\" type=\\\"file\\\">:\\n\" +\r\n        \"File inputs are read only. Use a v-on:change listener instead.\"\r\n      );\r\n    }\r\n  }\r\n\r\n  if (tag === 'select') {\r\n    genSelect(el, value, modifiers);\r\n  } else if (tag === 'input' && type === 'checkbox') {\r\n    genCheckboxModel(el, value, modifiers);\r\n  } else if (tag === 'input' && type === 'radio') {\r\n    genRadioModel(el, value, modifiers);\r\n  } else if (tag === 'input' || tag === 'textarea') {\r\n    genDefaultModel(el, value, modifiers);\r\n  } else if (!config.isReservedTag(tag)) {\r\n    genComponentModel(el, value, modifiers);\r\n    // component v-model doesn't need extra runtime\r\n    return false\r\n  } else if (process.env.NODE_ENV !== 'production') {\r\n    warn$1(\r\n      \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\r\n      \"v-model is not supported on this element type. \" +\r\n      'If you are working with contenteditable, it\\'s recommended to ' +\r\n      'wrap a library dedicated for that purpose inside a custom component.'\r\n    );\r\n  }\r\n\r\n  // ensure runtime directive metadata\r\n  return true\r\n}\r\n\r\nfunction genCheckboxModel (\r\n  el,\r\n  value,\r\n  modifiers\r\n) {\r\n  var number = modifiers && modifiers.number;\r\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\r\n  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\r\n  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\r\n  addProp(el, 'checked',\r\n    \"Array.isArray(\" + value + \")\" +\r\n      \"?_i(\" + value + \",\" + valueBinding + \")>-1\" + (\r\n        trueValueBinding === 'true'\r\n          ? (\":(\" + value + \")\")\r\n          : (\":_q(\" + value + \",\" + trueValueBinding + \")\")\r\n      )\r\n  );\r\n  addHandler(el, CHECKBOX_RADIO_TOKEN,\r\n    \"var $$a=\" + value + \",\" +\r\n        '$$el=$event.target,' +\r\n        \"$$c=$$el.checked?(\" + trueValueBinding + \"):(\" + falseValueBinding + \");\" +\r\n    'if(Array.isArray($$a)){' +\r\n      \"var $$v=\" + (number ? '_n(' + valueBinding + ')' : valueBinding) + \",\" +\r\n          '$$i=_i($$a,$$v);' +\r\n      \"if($$c){$$i<0&&(\" + value + \"=$$a.concat($$v))}\" +\r\n      \"else{$$i>-1&&(\" + value + \"=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}\" +\r\n    \"}else{\" + value + \"=$$c}\",\r\n    null, true\r\n  );\r\n}\r\n\r\nfunction genRadioModel (\r\n    el,\r\n    value,\r\n    modifiers\r\n) {\r\n  var number = modifiers && modifiers.number;\r\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\r\n  valueBinding = number ? (\"_n(\" + valueBinding + \")\") : valueBinding;\r\n  addProp(el, 'checked', (\"_q(\" + value + \",\" + valueBinding + \")\"));\r\n  addHandler(el, CHECKBOX_RADIO_TOKEN, genAssignmentCode(value, valueBinding), null, true);\r\n}\r\n\r\nfunction genSelect (\r\n    el,\r\n    value,\r\n    modifiers\r\n) {\r\n  var number = modifiers && modifiers.number;\r\n  var selectedVal = \"Array.prototype.filter\" +\r\n    \".call($event.target.options,function(o){return o.selected})\" +\r\n    \".map(function(o){var val = \\\"_value\\\" in o ? o._value : o.value;\" +\r\n    \"return \" + (number ? '_n(val)' : 'val') + \"})\";\r\n\r\n  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';\r\n  var code = \"var $$selectedVal = \" + selectedVal + \";\";\r\n  code = code + \" \" + (genAssignmentCode(value, assignment));\r\n  addHandler(el, 'change', code, null, true);\r\n}\r\n\r\nfunction genDefaultModel (\r\n  el,\r\n  value,\r\n  modifiers\r\n) {\r\n  var type = el.attrsMap.type;\r\n  var ref = modifiers || {};\r\n  var lazy = ref.lazy;\r\n  var number = ref.number;\r\n  var trim = ref.trim;\r\n  var needCompositionGuard = !lazy && type !== 'range';\r\n  var event = lazy\r\n    ? 'change'\r\n    : type === 'range'\r\n      ? RANGE_TOKEN\r\n      : 'input';\r\n\r\n  var valueExpression = '$event.target.value';\r\n  if (trim) {\r\n    valueExpression = \"$event.target.value.trim()\";\r\n  }\r\n  if (number) {\r\n    valueExpression = \"_n(\" + valueExpression + \")\";\r\n  }\r\n\r\n  var code = genAssignmentCode(value, valueExpression);\r\n  if (needCompositionGuard) {\r\n    code = \"if($event.target.composing)return;\" + code;\r\n  }\r\n\r\n  addProp(el, 'value', (\"(\" + value + \")\"));\r\n  addHandler(el, event, code, null, true);\r\n  if (trim || number || type === 'number') {\r\n    addHandler(el, 'blur', '$forceUpdate()');\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\n// normalize v-model event tokens that can only be determined at runtime.\r\n// it's important to place the event as the first in the array because\r\n// the whole point is ensuring the v-model callback gets called before\r\n// user-attached handlers.\r\nfunction normalizeEvents (on) {\r\n  var event;\r\n  /* istanbul ignore if */\r\n  if (on[RANGE_TOKEN]) {\r\n    // IE input[type=range] only supports `change` event\r\n    event = isIE ? 'change' : 'input';\r\n    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\r\n    delete on[RANGE_TOKEN];\r\n  }\r\n  if (on[CHECKBOX_RADIO_TOKEN]) {\r\n    // Chrome fires microtasks in between click/change, leads to #4521\r\n    event = isChrome ? 'click' : 'change';\r\n    on[event] = [].concat(on[CHECKBOX_RADIO_TOKEN], on[event] || []);\r\n    delete on[CHECKBOX_RADIO_TOKEN];\r\n  }\r\n}\r\n\r\nvar target$1;\r\n\r\nfunction add$1 (\r\n  event,\r\n  handler,\r\n  once,\r\n  capture\r\n) {\r\n  if (once) {\r\n    var oldHandler = handler;\r\n    var _target = target$1; // save current target element in closure\r\n    handler = function (ev) {\r\n      var res = arguments.length === 1\r\n        ? oldHandler(ev)\r\n        : oldHandler.apply(null, arguments);\r\n      if (res !== null) {\r\n        remove$2(event, handler, capture, _target);\r\n      }\r\n    };\r\n  }\r\n  target$1.addEventListener(event, handler, capture);\r\n}\r\n\r\nfunction remove$2 (\r\n  event,\r\n  handler,\r\n  capture,\r\n  _target\r\n) {\r\n  (_target || target$1).removeEventListener(event, handler, capture);\r\n}\r\n\r\nfunction updateDOMListeners (oldVnode, vnode) {\r\n  if (!oldVnode.data.on && !vnode.data.on) {\r\n    return\r\n  }\r\n  var on = vnode.data.on || {};\r\n  var oldOn = oldVnode.data.on || {};\r\n  target$1 = vnode.elm;\r\n  normalizeEvents(on);\r\n  updateListeners(on, oldOn, add$1, remove$2, vnode.context);\r\n}\r\n\r\nvar events = {\r\n  create: updateDOMListeners,\r\n  update: updateDOMListeners\r\n};\r\n\r\n/*  */\r\n\r\nfunction updateDOMProps (oldVnode, vnode) {\r\n  if (!oldVnode.data.domProps && !vnode.data.domProps) {\r\n    return\r\n  }\r\n  var key, cur;\r\n  var elm = vnode.elm;\r\n  var oldProps = oldVnode.data.domProps || {};\r\n  var props = vnode.data.domProps || {};\r\n  // clone observed objects, as the user probably wants to mutate it\r\n  if (props.__ob__) {\r\n    props = vnode.data.domProps = extend({}, props);\r\n  }\r\n\r\n  for (key in oldProps) {\r\n    if (props[key] == null) {\r\n      elm[key] = '';\r\n    }\r\n  }\r\n  for (key in props) {\r\n    cur = props[key];\r\n    // ignore children if the node has textContent or innerHTML,\r\n    // as these will throw away existing DOM nodes and cause removal errors\r\n    // on subsequent patches (#3360)\r\n    if (key === 'textContent' || key === 'innerHTML') {\r\n      if (vnode.children) { vnode.children.length = 0; }\r\n      if (cur === oldProps[key]) { continue }\r\n    }\r\n\r\n    if (key === 'value') {\r\n      // store value as _value as well since\r\n      // non-string values will be stringified\r\n      elm._value = cur;\r\n      // avoid resetting cursor position when value is the same\r\n      var strCur = cur == null ? '' : String(cur);\r\n      if (shouldUpdateValue(elm, vnode, strCur)) {\r\n        elm.value = strCur;\r\n      }\r\n    } else {\r\n      elm[key] = cur;\r\n    }\r\n  }\r\n}\r\n\r\n// check platforms/web/util/attrs.js acceptValue\r\n\r\n\r\nfunction shouldUpdateValue (\r\n  elm,\r\n  vnode,\r\n  checkVal\r\n) {\r\n  return (!elm.composing && (\r\n    vnode.tag === 'option' ||\r\n    isDirty(elm, checkVal) ||\r\n    isInputChanged(elm, checkVal)\r\n  ))\r\n}\r\n\r\nfunction isDirty (elm, checkVal) {\r\n  // return true when textbox (.number and .trim) loses focus and its value is not equal to the updated value\r\n  return document.activeElement !== elm && elm.value !== checkVal\r\n}\r\n\r\nfunction isInputChanged (elm, newVal) {\r\n  var value = elm.value;\r\n  var modifiers = elm._vModifiers; // injected by v-model runtime\r\n  if ((modifiers && modifiers.number) || elm.type === 'number') {\r\n    return toNumber(value) !== toNumber(newVal)\r\n  }\r\n  if (modifiers && modifiers.trim) {\r\n    return value.trim() !== newVal.trim()\r\n  }\r\n  return value !== newVal\r\n}\r\n\r\nvar domProps = {\r\n  create: updateDOMProps,\r\n  update: updateDOMProps\r\n};\r\n\r\n/*  */\r\n\r\nvar parseStyleText = cached(function (cssText) {\r\n  var res = {};\r\n  var listDelimiter = /;(?![^(]*\\))/g;\r\n  var propertyDelimiter = /:(.+)/;\r\n  cssText.split(listDelimiter).forEach(function (item) {\r\n    if (item) {\r\n      var tmp = item.split(propertyDelimiter);\r\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\r\n    }\r\n  });\r\n  return res\r\n});\r\n\r\n// merge static and dynamic style data on the same vnode\r\nfunction normalizeStyleData (data) {\r\n  var style = normalizeStyleBinding(data.style);\r\n  // static style is pre-processed into an object during compilation\r\n  // and is always a fresh object, so it's safe to merge into it\r\n  return data.staticStyle\r\n    ? extend(data.staticStyle, style)\r\n    : style\r\n}\r\n\r\n// normalize possible array / string values into Object\r\nfunction normalizeStyleBinding (bindingStyle) {\r\n  if (Array.isArray(bindingStyle)) {\r\n    return toObject(bindingStyle)\r\n  }\r\n  if (typeof bindingStyle === 'string') {\r\n    return parseStyleText(bindingStyle)\r\n  }\r\n  return bindingStyle\r\n}\r\n\r\n/**\r\n * parent component style should be after child's\r\n * so that parent component's style could override it\r\n */\r\nfunction getStyle (vnode, checkChild) {\r\n  var res = {};\r\n  var styleData;\r\n\r\n  if (checkChild) {\r\n    var childNode = vnode;\r\n    while (childNode.componentInstance) {\r\n      childNode = childNode.componentInstance._vnode;\r\n      if (childNode.data && (styleData = normalizeStyleData(childNode.data))) {\r\n        extend(res, styleData);\r\n      }\r\n    }\r\n  }\r\n\r\n  if ((styleData = normalizeStyleData(vnode.data))) {\r\n    extend(res, styleData);\r\n  }\r\n\r\n  var parentNode = vnode;\r\n  while ((parentNode = parentNode.parent)) {\r\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\r\n      extend(res, styleData);\r\n    }\r\n  }\r\n  return res\r\n}\r\n\r\n/*  */\r\n\r\nvar cssVarRE = /^--/;\r\nvar importantRE = /\\s*!important$/;\r\nvar setProp = function (el, name, val) {\r\n  /* istanbul ignore if */\r\n  if (cssVarRE.test(name)) {\r\n    el.style.setProperty(name, val);\r\n  } else if (importantRE.test(val)) {\r\n    el.style.setProperty(name, val.replace(importantRE, ''), 'important');\r\n  } else {\r\n    el.style[normalize(name)] = val;\r\n  }\r\n};\r\n\r\nvar prefixes = ['Webkit', 'Moz', 'ms'];\r\n\r\nvar testEl;\r\nvar normalize = cached(function (prop) {\r\n  testEl = testEl || document.createElement('div');\r\n  prop = camelize(prop);\r\n  if (prop !== 'filter' && (prop in testEl.style)) {\r\n    return prop\r\n  }\r\n  var upper = prop.charAt(0).toUpperCase() + prop.slice(1);\r\n  for (var i = 0; i < prefixes.length; i++) {\r\n    var prefixed = prefixes[i] + upper;\r\n    if (prefixed in testEl.style) {\r\n      return prefixed\r\n    }\r\n  }\r\n});\r\n\r\nfunction updateStyle (oldVnode, vnode) {\r\n  var data = vnode.data;\r\n  var oldData = oldVnode.data;\r\n\r\n  if (!data.staticStyle && !data.style &&\r\n      !oldData.staticStyle && !oldData.style) {\r\n    return\r\n  }\r\n\r\n  var cur, name;\r\n  var el = vnode.elm;\r\n  var oldStaticStyle = oldVnode.data.staticStyle;\r\n  var oldStyleBinding = oldVnode.data.style || {};\r\n\r\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\r\n  var oldStyle = oldStaticStyle || oldStyleBinding;\r\n\r\n  var style = normalizeStyleBinding(vnode.data.style) || {};\r\n\r\n  vnode.data.style = style.__ob__ ? extend({}, style) : style;\r\n\r\n  var newStyle = getStyle(vnode, true);\r\n\r\n  for (name in oldStyle) {\r\n    if (newStyle[name] == null) {\r\n      setProp(el, name, '');\r\n    }\r\n  }\r\n  for (name in newStyle) {\r\n    cur = newStyle[name];\r\n    if (cur !== oldStyle[name]) {\r\n      // ie9 setting to null has no effect, must use empty string\r\n      setProp(el, name, cur == null ? '' : cur);\r\n    }\r\n  }\r\n}\r\n\r\nvar style = {\r\n  create: updateStyle,\r\n  update: updateStyle\r\n};\r\n\r\n/*  */\r\n\r\n/**\r\n * Add class with compatibility for SVG since classList is not supported on\r\n * SVG elements in IE\r\n */\r\nfunction addClass (el, cls) {\r\n  /* istanbul ignore if */\r\n  if (!cls || !(cls = cls.trim())) {\r\n    return\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (el.classList) {\r\n    if (cls.indexOf(' ') > -1) {\r\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.add(c); });\r\n    } else {\r\n      el.classList.add(cls);\r\n    }\r\n  } else {\r\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\r\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\r\n      el.setAttribute('class', (cur + cls).trim());\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Remove class with compatibility for SVG since classList is not supported on\r\n * SVG elements in IE\r\n */\r\nfunction removeClass (el, cls) {\r\n  /* istanbul ignore if */\r\n  if (!cls || !(cls = cls.trim())) {\r\n    return\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (el.classList) {\r\n    if (cls.indexOf(' ') > -1) {\r\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.remove(c); });\r\n    } else {\r\n      el.classList.remove(cls);\r\n    }\r\n  } else {\r\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\r\n    var tar = ' ' + cls + ' ';\r\n    while (cur.indexOf(tar) >= 0) {\r\n      cur = cur.replace(tar, ' ');\r\n    }\r\n    el.setAttribute('class', cur.trim());\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nfunction resolveTransition (def$$1) {\r\n  if (!def$$1) {\r\n    return\r\n  }\r\n  /* istanbul ignore else */\r\n  if (typeof def$$1 === 'object') {\r\n    var res = {};\r\n    if (def$$1.css !== false) {\r\n      extend(res, autoCssTransition(def$$1.name || 'v'));\r\n    }\r\n    extend(res, def$$1);\r\n    return res\r\n  } else if (typeof def$$1 === 'string') {\r\n    return autoCssTransition(def$$1)\r\n  }\r\n}\r\n\r\nvar autoCssTransition = cached(function (name) {\r\n  return {\r\n    enterClass: (name + \"-enter\"),\r\n    enterToClass: (name + \"-enter-to\"),\r\n    enterActiveClass: (name + \"-enter-active\"),\r\n    leaveClass: (name + \"-leave\"),\r\n    leaveToClass: (name + \"-leave-to\"),\r\n    leaveActiveClass: (name + \"-leave-active\")\r\n  }\r\n});\r\n\r\nvar hasTransition = inBrowser && !isIE9;\r\nvar TRANSITION = 'transition';\r\nvar ANIMATION = 'animation';\r\n\r\n// Transition property/event sniffing\r\nvar transitionProp = 'transition';\r\nvar transitionEndEvent = 'transitionend';\r\nvar animationProp = 'animation';\r\nvar animationEndEvent = 'animationend';\r\nif (hasTransition) {\r\n  /* istanbul ignore if */\r\n  if (window.ontransitionend === undefined &&\r\n    window.onwebkittransitionend !== undefined) {\r\n    transitionProp = 'WebkitTransition';\r\n    transitionEndEvent = 'webkitTransitionEnd';\r\n  }\r\n  if (window.onanimationend === undefined &&\r\n    window.onwebkitanimationend !== undefined) {\r\n    animationProp = 'WebkitAnimation';\r\n    animationEndEvent = 'webkitAnimationEnd';\r\n  }\r\n}\r\n\r\n// binding to window is necessary to make hot reload work in IE in strict mode\r\nvar raf = inBrowser && window.requestAnimationFrame\r\n  ? window.requestAnimationFrame.bind(window)\r\n  : setTimeout;\r\n\r\nfunction nextFrame (fn) {\r\n  raf(function () {\r\n    raf(fn);\r\n  });\r\n}\r\n\r\nfunction addTransitionClass (el, cls) {\r\n  (el._transitionClasses || (el._transitionClasses = [])).push(cls);\r\n  addClass(el, cls);\r\n}\r\n\r\nfunction removeTransitionClass (el, cls) {\r\n  if (el._transitionClasses) {\r\n    remove(el._transitionClasses, cls);\r\n  }\r\n  removeClass(el, cls);\r\n}\r\n\r\nfunction whenTransitionEnds (\r\n  el,\r\n  expectedType,\r\n  cb\r\n) {\r\n  var ref = getTransitionInfo(el, expectedType);\r\n  var type = ref.type;\r\n  var timeout = ref.timeout;\r\n  var propCount = ref.propCount;\r\n  if (!type) { return cb() }\r\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\r\n  var ended = 0;\r\n  var end = function () {\r\n    el.removeEventListener(event, onEnd);\r\n    cb();\r\n  };\r\n  var onEnd = function (e) {\r\n    if (e.target === el) {\r\n      if (++ended >= propCount) {\r\n        end();\r\n      }\r\n    }\r\n  };\r\n  setTimeout(function () {\r\n    if (ended < propCount) {\r\n      end();\r\n    }\r\n  }, timeout + 1);\r\n  el.addEventListener(event, onEnd);\r\n}\r\n\r\nvar transformRE = /\\b(transform|all)(,|$)/;\r\n\r\nfunction getTransitionInfo (el, expectedType) {\r\n  var styles = window.getComputedStyle(el);\r\n  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');\r\n  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');\r\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\r\n  var animationDelays = styles[animationProp + 'Delay'].split(', ');\r\n  var animationDurations = styles[animationProp + 'Duration'].split(', ');\r\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\r\n\r\n  var type;\r\n  var timeout = 0;\r\n  var propCount = 0;\r\n  /* istanbul ignore if */\r\n  if (expectedType === TRANSITION) {\r\n    if (transitionTimeout > 0) {\r\n      type = TRANSITION;\r\n      timeout = transitionTimeout;\r\n      propCount = transitionDurations.length;\r\n    }\r\n  } else if (expectedType === ANIMATION) {\r\n    if (animationTimeout > 0) {\r\n      type = ANIMATION;\r\n      timeout = animationTimeout;\r\n      propCount = animationDurations.length;\r\n    }\r\n  } else {\r\n    timeout = Math.max(transitionTimeout, animationTimeout);\r\n    type = timeout > 0\r\n      ? transitionTimeout > animationTimeout\r\n        ? TRANSITION\r\n        : ANIMATION\r\n      : null;\r\n    propCount = type\r\n      ? type === TRANSITION\r\n        ? transitionDurations.length\r\n        : animationDurations.length\r\n      : 0;\r\n  }\r\n  var hasTransform =\r\n    type === TRANSITION &&\r\n    transformRE.test(styles[transitionProp + 'Property']);\r\n  return {\r\n    type: type,\r\n    timeout: timeout,\r\n    propCount: propCount,\r\n    hasTransform: hasTransform\r\n  }\r\n}\r\n\r\nfunction getTimeout (delays, durations) {\r\n  /* istanbul ignore next */\r\n  while (delays.length < durations.length) {\r\n    delays = delays.concat(delays);\r\n  }\r\n\r\n  return Math.max.apply(null, durations.map(function (d, i) {\r\n    return toMs(d) + toMs(delays[i])\r\n  }))\r\n}\r\n\r\nfunction toMs (s) {\r\n  return Number(s.slice(0, -1)) * 1000\r\n}\r\n\r\n/*  */\r\n\r\nfunction enter (vnode, toggleDisplay) {\r\n  var el = vnode.elm;\r\n\r\n  // call leave callback now\r\n  if (el._leaveCb) {\r\n    el._leaveCb.cancelled = true;\r\n    el._leaveCb();\r\n  }\r\n\r\n  var data = resolveTransition(vnode.data.transition);\r\n  if (!data) {\r\n    return\r\n  }\r\n\r\n  /* istanbul ignore if */\r\n  if (el._enterCb || el.nodeType !== 1) {\r\n    return\r\n  }\r\n\r\n  var css = data.css;\r\n  var type = data.type;\r\n  var enterClass = data.enterClass;\r\n  var enterToClass = data.enterToClass;\r\n  var enterActiveClass = data.enterActiveClass;\r\n  var appearClass = data.appearClass;\r\n  var appearToClass = data.appearToClass;\r\n  var appearActiveClass = data.appearActiveClass;\r\n  var beforeEnter = data.beforeEnter;\r\n  var enter = data.enter;\r\n  var afterEnter = data.afterEnter;\r\n  var enterCancelled = data.enterCancelled;\r\n  var beforeAppear = data.beforeAppear;\r\n  var appear = data.appear;\r\n  var afterAppear = data.afterAppear;\r\n  var appearCancelled = data.appearCancelled;\r\n  var duration = data.duration;\r\n\r\n  // activeInstance will always be the <transition> component managing this\r\n  // transition. One edge case to check is when the <transition> is placed\r\n  // as the root node of a child component. In that case we need to check\r\n  // <transition>'s parent for appear check.\r\n  var context = activeInstance;\r\n  var transitionNode = activeInstance.$vnode;\r\n  while (transitionNode && transitionNode.parent) {\r\n    transitionNode = transitionNode.parent;\r\n    context = transitionNode.context;\r\n  }\r\n\r\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\r\n\r\n  if (isAppear && !appear && appear !== '') {\r\n    return\r\n  }\r\n\r\n  var startClass = isAppear && appearClass\r\n    ? appearClass\r\n    : enterClass;\r\n  var activeClass = isAppear && appearActiveClass\r\n    ? appearActiveClass\r\n    : enterActiveClass;\r\n  var toClass = isAppear && appearToClass\r\n    ? appearToClass\r\n    : enterToClass;\r\n\r\n  var beforeEnterHook = isAppear\r\n    ? (beforeAppear || beforeEnter)\r\n    : beforeEnter;\r\n  var enterHook = isAppear\r\n    ? (typeof appear === 'function' ? appear : enter)\r\n    : enter;\r\n  var afterEnterHook = isAppear\r\n    ? (afterAppear || afterEnter)\r\n    : afterEnter;\r\n  var enterCancelledHook = isAppear\r\n    ? (appearCancelled || enterCancelled)\r\n    : enterCancelled;\r\n\r\n  var explicitEnterDuration = toNumber(\r\n    isObject(duration)\r\n      ? duration.enter\r\n      : duration\r\n  );\r\n\r\n  if (process.env.NODE_ENV !== 'production' && explicitEnterDuration != null) {\r\n    checkDuration(explicitEnterDuration, 'enter', vnode);\r\n  }\r\n\r\n  var expectsCSS = css !== false && !isIE9;\r\n  var userWantsControl = getHookArgumentsLength(enterHook);\r\n\r\n  var cb = el._enterCb = once(function () {\r\n    if (expectsCSS) {\r\n      removeTransitionClass(el, toClass);\r\n      removeTransitionClass(el, activeClass);\r\n    }\r\n    if (cb.cancelled) {\r\n      if (expectsCSS) {\r\n        removeTransitionClass(el, startClass);\r\n      }\r\n      enterCancelledHook && enterCancelledHook(el);\r\n    } else {\r\n      afterEnterHook && afterEnterHook(el);\r\n    }\r\n    el._enterCb = null;\r\n  });\r\n\r\n  if (!vnode.data.show) {\r\n    // remove pending leave element on enter by injecting an insert hook\r\n    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', function () {\r\n      var parent = el.parentNode;\r\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\r\n      if (pendingNode &&\r\n          pendingNode.tag === vnode.tag &&\r\n          pendingNode.elm._leaveCb) {\r\n        pendingNode.elm._leaveCb();\r\n      }\r\n      enterHook && enterHook(el, cb);\r\n    });\r\n  }\r\n\r\n  // start enter transition\r\n  beforeEnterHook && beforeEnterHook(el);\r\n  if (expectsCSS) {\r\n    addTransitionClass(el, startClass);\r\n    addTransitionClass(el, activeClass);\r\n    nextFrame(function () {\r\n      addTransitionClass(el, toClass);\r\n      removeTransitionClass(el, startClass);\r\n      if (!cb.cancelled && !userWantsControl) {\r\n        if (isValidDuration(explicitEnterDuration)) {\r\n          setTimeout(cb, explicitEnterDuration);\r\n        } else {\r\n          whenTransitionEnds(el, type, cb);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  if (vnode.data.show) {\r\n    toggleDisplay && toggleDisplay();\r\n    enterHook && enterHook(el, cb);\r\n  }\r\n\r\n  if (!expectsCSS && !userWantsControl) {\r\n    cb();\r\n  }\r\n}\r\n\r\nfunction leave (vnode, rm) {\r\n  var el = vnode.elm;\r\n\r\n  // call enter callback now\r\n  if (el._enterCb) {\r\n    el._enterCb.cancelled = true;\r\n    el._enterCb();\r\n  }\r\n\r\n  var data = resolveTransition(vnode.data.transition);\r\n  if (!data) {\r\n    return rm()\r\n  }\r\n\r\n  /* istanbul ignore if */\r\n  if (el._leaveCb || el.nodeType !== 1) {\r\n    return\r\n  }\r\n\r\n  var css = data.css;\r\n  var type = data.type;\r\n  var leaveClass = data.leaveClass;\r\n  var leaveToClass = data.leaveToClass;\r\n  var leaveActiveClass = data.leaveActiveClass;\r\n  var beforeLeave = data.beforeLeave;\r\n  var leave = data.leave;\r\n  var afterLeave = data.afterLeave;\r\n  var leaveCancelled = data.leaveCancelled;\r\n  var delayLeave = data.delayLeave;\r\n  var duration = data.duration;\r\n\r\n  var expectsCSS = css !== false && !isIE9;\r\n  var userWantsControl = getHookArgumentsLength(leave);\r\n\r\n  var explicitLeaveDuration = toNumber(\r\n    isObject(duration)\r\n      ? duration.leave\r\n      : duration\r\n  );\r\n\r\n  if (process.env.NODE_ENV !== 'production' && explicitLeaveDuration != null) {\r\n    checkDuration(explicitLeaveDuration, 'leave', vnode);\r\n  }\r\n\r\n  var cb = el._leaveCb = once(function () {\r\n    if (el.parentNode && el.parentNode._pending) {\r\n      el.parentNode._pending[vnode.key] = null;\r\n    }\r\n    if (expectsCSS) {\r\n      removeTransitionClass(el, leaveToClass);\r\n      removeTransitionClass(el, leaveActiveClass);\r\n    }\r\n    if (cb.cancelled) {\r\n      if (expectsCSS) {\r\n        removeTransitionClass(el, leaveClass);\r\n      }\r\n      leaveCancelled && leaveCancelled(el);\r\n    } else {\r\n      rm();\r\n      afterLeave && afterLeave(el);\r\n    }\r\n    el._leaveCb = null;\r\n  });\r\n\r\n  if (delayLeave) {\r\n    delayLeave(performLeave);\r\n  } else {\r\n    performLeave();\r\n  }\r\n\r\n  function performLeave () {\r\n    // the delayed leave may have already been cancelled\r\n    if (cb.cancelled) {\r\n      return\r\n    }\r\n    // record leaving element\r\n    if (!vnode.data.show) {\r\n      (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;\r\n    }\r\n    beforeLeave && beforeLeave(el);\r\n    if (expectsCSS) {\r\n      addTransitionClass(el, leaveClass);\r\n      addTransitionClass(el, leaveActiveClass);\r\n      nextFrame(function () {\r\n        addTransitionClass(el, leaveToClass);\r\n        removeTransitionClass(el, leaveClass);\r\n        if (!cb.cancelled && !userWantsControl) {\r\n          if (isValidDuration(explicitLeaveDuration)) {\r\n            setTimeout(cb, explicitLeaveDuration);\r\n          } else {\r\n            whenTransitionEnds(el, type, cb);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    leave && leave(el, cb);\r\n    if (!expectsCSS && !userWantsControl) {\r\n      cb();\r\n    }\r\n  }\r\n}\r\n\r\n// only used in dev mode\r\nfunction checkDuration (val, name, vnode) {\r\n  if (typeof val !== 'number') {\r\n    warn(\r\n      \"<transition> explicit \" + name + \" duration is not a valid number - \" +\r\n      \"got \" + (JSON.stringify(val)) + \".\",\r\n      vnode.context\r\n    );\r\n  } else if (isNaN(val)) {\r\n    warn(\r\n      \"<transition> explicit \" + name + \" duration is NaN - \" +\r\n      'the duration expression might be incorrect.',\r\n      vnode.context\r\n    );\r\n  }\r\n}\r\n\r\nfunction isValidDuration (val) {\r\n  return typeof val === 'number' && !isNaN(val)\r\n}\r\n\r\n/**\r\n * Normalize a transition hook's argument length. The hook may be:\r\n * - a merged hook (invoker) with the original in .fns\r\n * - a wrapped component method (check ._length)\r\n * - a plain function (.length)\r\n */\r\nfunction getHookArgumentsLength (fn) {\r\n  if (!fn) { return false }\r\n  var invokerFns = fn.fns;\r\n  if (invokerFns) {\r\n    // invoker\r\n    return getHookArgumentsLength(\r\n      Array.isArray(invokerFns)\r\n        ? invokerFns[0]\r\n        : invokerFns\r\n    )\r\n  } else {\r\n    return (fn._length || fn.length) > 1\r\n  }\r\n}\r\n\r\nfunction _enter (_, vnode) {\r\n  if (!vnode.data.show) {\r\n    enter(vnode);\r\n  }\r\n}\r\n\r\nvar transition = inBrowser ? {\r\n  create: _enter,\r\n  activate: _enter,\r\n  remove: function remove$$1 (vnode, rm) {\r\n    /* istanbul ignore else */\r\n    if (!vnode.data.show) {\r\n      leave(vnode, rm);\r\n    } else {\r\n      rm();\r\n    }\r\n  }\r\n} : {};\r\n\r\nvar platformModules = [\r\n  attrs,\r\n  klass,\r\n  events,\r\n  domProps,\r\n  style,\r\n  transition\r\n];\r\n\r\n/*  */\r\n\r\n// the directive module should be applied last, after all\r\n// built-in modules have been applied.\r\nvar modules = platformModules.concat(baseModules);\r\n\r\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\r\n\r\n/**\r\n * Not type checking this file because flow doesn't like attaching\r\n * properties to Elements.\r\n */\r\n\r\n/* istanbul ignore if */\r\nif (isIE9) {\r\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\r\n  document.addEventListener('selectionchange', function () {\r\n    var el = document.activeElement;\r\n    if (el && el.vmodel) {\r\n      trigger(el, 'input');\r\n    }\r\n  });\r\n}\r\n\r\nvar model$1 = {\r\n  inserted: function inserted (el, binding, vnode) {\r\n    if (vnode.tag === 'select') {\r\n      var cb = function () {\r\n        setSelected(el, binding, vnode.context);\r\n      };\r\n      cb();\r\n      /* istanbul ignore if */\r\n      if (isIE || isEdge) {\r\n        setTimeout(cb, 0);\r\n      }\r\n    } else if (vnode.tag === 'textarea' || el.type === 'text' || el.type === 'password') {\r\n      el._vModifiers = binding.modifiers;\r\n      if (!binding.modifiers.lazy) {\r\n        if (!isAndroid) {\r\n          el.addEventListener('compositionstart', onCompositionStart);\r\n          el.addEventListener('compositionend', onCompositionEnd);\r\n        }\r\n        /* istanbul ignore if */\r\n        if (isIE9) {\r\n          el.vmodel = true;\r\n        }\r\n      }\r\n    }\r\n  },\r\n  componentUpdated: function componentUpdated (el, binding, vnode) {\r\n    if (vnode.tag === 'select') {\r\n      setSelected(el, binding, vnode.context);\r\n      // in case the options rendered by v-for have changed,\r\n      // it's possible that the value is out-of-sync with the rendered options.\r\n      // detect such cases and filter out values that no longer has a matching\r\n      // option in the DOM.\r\n      var needReset = el.multiple\r\n        ? binding.value.some(function (v) { return hasNoMatchingOption(v, el.options); })\r\n        : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, el.options);\r\n      if (needReset) {\r\n        trigger(el, 'change');\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nfunction setSelected (el, binding, vm) {\r\n  var value = binding.value;\r\n  var isMultiple = el.multiple;\r\n  if (isMultiple && !Array.isArray(value)) {\r\n    process.env.NODE_ENV !== 'production' && warn(\r\n      \"<select multiple v-model=\\\"\" + (binding.expression) + \"\\\"> \" +\r\n      \"expects an Array value for its binding, but got \" + (Object.prototype.toString.call(value).slice(8, -1)),\r\n      vm\r\n    );\r\n    return\r\n  }\r\n  var selected, option;\r\n  for (var i = 0, l = el.options.length; i < l; i++) {\r\n    option = el.options[i];\r\n    if (isMultiple) {\r\n      selected = looseIndexOf(value, getValue(option)) > -1;\r\n      if (option.selected !== selected) {\r\n        option.selected = selected;\r\n      }\r\n    } else {\r\n      if (looseEqual(getValue(option), value)) {\r\n        if (el.selectedIndex !== i) {\r\n          el.selectedIndex = i;\r\n        }\r\n        return\r\n      }\r\n    }\r\n  }\r\n  if (!isMultiple) {\r\n    el.selectedIndex = -1;\r\n  }\r\n}\r\n\r\nfunction hasNoMatchingOption (value, options) {\r\n  for (var i = 0, l = options.length; i < l; i++) {\r\n    if (looseEqual(getValue(options[i]), value)) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nfunction getValue (option) {\r\n  return '_value' in option\r\n    ? option._value\r\n    : option.value\r\n}\r\n\r\nfunction onCompositionStart (e) {\r\n  e.target.composing = true;\r\n}\r\n\r\nfunction onCompositionEnd (e) {\r\n  e.target.composing = false;\r\n  trigger(e.target, 'input');\r\n}\r\n\r\nfunction trigger (el, type) {\r\n  var e = document.createEvent('HTMLEvents');\r\n  e.initEvent(type, true, true);\r\n  el.dispatchEvent(e);\r\n}\r\n\r\n/*  */\r\n\r\n// recursively search for possible transition defined inside the component root\r\nfunction locateNode (vnode) {\r\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\r\n    ? locateNode(vnode.componentInstance._vnode)\r\n    : vnode\r\n}\r\n\r\nvar show = {\r\n  bind: function bind (el, ref, vnode) {\r\n    var value = ref.value;\r\n\r\n    vnode = locateNode(vnode);\r\n    var transition = vnode.data && vnode.data.transition;\r\n    var originalDisplay = el.__vOriginalDisplay =\r\n      el.style.display === 'none' ? '' : el.style.display;\r\n    if (value && transition && !isIE9) {\r\n      vnode.data.show = true;\r\n      enter(vnode, function () {\r\n        el.style.display = originalDisplay;\r\n      });\r\n    } else {\r\n      el.style.display = value ? originalDisplay : 'none';\r\n    }\r\n  },\r\n\r\n  update: function update (el, ref, vnode) {\r\n    var value = ref.value;\r\n    var oldValue = ref.oldValue;\r\n\r\n    /* istanbul ignore if */\r\n    if (value === oldValue) { return }\r\n    vnode = locateNode(vnode);\r\n    var transition = vnode.data && vnode.data.transition;\r\n    if (transition && !isIE9) {\r\n      vnode.data.show = true;\r\n      if (value) {\r\n        enter(vnode, function () {\r\n          el.style.display = el.__vOriginalDisplay;\r\n        });\r\n      } else {\r\n        leave(vnode, function () {\r\n          el.style.display = 'none';\r\n        });\r\n      }\r\n    } else {\r\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\r\n    }\r\n  },\r\n\r\n  unbind: function unbind (\r\n    el,\r\n    binding,\r\n    vnode,\r\n    oldVnode,\r\n    isDestroy\r\n  ) {\r\n    if (!isDestroy) {\r\n      el.style.display = el.__vOriginalDisplay;\r\n    }\r\n  }\r\n};\r\n\r\nvar platformDirectives = {\r\n  model: model$1,\r\n  show: show\r\n};\r\n\r\n/*  */\r\n\r\n// Provides transition support for a single element/component.\r\n// supports transition mode (out-in / in-out)\r\n\r\nvar transitionProps = {\r\n  name: String,\r\n  appear: Boolean,\r\n  css: Boolean,\r\n  mode: String,\r\n  type: String,\r\n  enterClass: String,\r\n  leaveClass: String,\r\n  enterToClass: String,\r\n  leaveToClass: String,\r\n  enterActiveClass: String,\r\n  leaveActiveClass: String,\r\n  appearClass: String,\r\n  appearActiveClass: String,\r\n  appearToClass: String,\r\n  duration: [Number, String, Object]\r\n};\r\n\r\n// in case the child is also an abstract component, e.g. <keep-alive>\r\n// we want to recursively retrieve the real component to be rendered\r\nfunction getRealChild (vnode) {\r\n  var compOptions = vnode && vnode.componentOptions;\r\n  if (compOptions && compOptions.Ctor.options.abstract) {\r\n    return getRealChild(getFirstComponentChild(compOptions.children))\r\n  } else {\r\n    return vnode\r\n  }\r\n}\r\n\r\nfunction extractTransitionData (comp) {\r\n  var data = {};\r\n  var options = comp.$options;\r\n  // props\r\n  for (var key in options.propsData) {\r\n    data[key] = comp[key];\r\n  }\r\n  // events.\r\n  // extract listeners and pass them directly to the transition methods\r\n  var listeners = options._parentListeners;\r\n  for (var key$1 in listeners) {\r\n    data[camelize(key$1)] = listeners[key$1];\r\n  }\r\n  return data\r\n}\r\n\r\nfunction placeholder (h, rawChild) {\r\n  return /\\d-keep-alive$/.test(rawChild.tag)\r\n    ? h('keep-alive')\r\n    : null\r\n}\r\n\r\nfunction hasParentTransition (vnode) {\r\n  while ((vnode = vnode.parent)) {\r\n    if (vnode.data.transition) {\r\n      return true\r\n    }\r\n  }\r\n}\r\n\r\nfunction isSameChild (child, oldChild) {\r\n  return oldChild.key === child.key && oldChild.tag === child.tag\r\n}\r\n\r\nvar Transition = {\r\n  name: 'transition',\r\n  props: transitionProps,\r\n  abstract: true,\r\n\r\n  render: function render (h) {\r\n    var this$1 = this;\r\n\r\n    var children = this.$slots.default;\r\n    if (!children) {\r\n      return\r\n    }\r\n\r\n    // filter out text nodes (possible whitespaces)\r\n    children = children.filter(function (c) { return c.tag; });\r\n    /* istanbul ignore if */\r\n    if (!children.length) {\r\n      return\r\n    }\r\n\r\n    // warn multiple elements\r\n    if (process.env.NODE_ENV !== 'production' && children.length > 1) {\r\n      warn(\r\n        '<transition> can only be used on a single element. Use ' +\r\n        '<transition-group> for lists.',\r\n        this.$parent\r\n      );\r\n    }\r\n\r\n    var mode = this.mode;\r\n\r\n    // warn invalid mode\r\n    if (process.env.NODE_ENV !== 'production' &&\r\n        mode && mode !== 'in-out' && mode !== 'out-in') {\r\n      warn(\r\n        'invalid <transition> mode: ' + mode,\r\n        this.$parent\r\n      );\r\n    }\r\n\r\n    var rawChild = children[0];\r\n\r\n    // if this is a component root node and the component's\r\n    // parent container node also has transition, skip.\r\n    if (hasParentTransition(this.$vnode)) {\r\n      return rawChild\r\n    }\r\n\r\n    // apply transition data to child\r\n    // use getRealChild() to ignore abstract components e.g. keep-alive\r\n    var child = getRealChild(rawChild);\r\n    /* istanbul ignore if */\r\n    if (!child) {\r\n      return rawChild\r\n    }\r\n\r\n    if (this._leaving) {\r\n      return placeholder(h, rawChild)\r\n    }\r\n\r\n    // ensure a key that is unique to the vnode type and to this transition\r\n    // component instance. This key will be used to remove pending leaving nodes\r\n    // during entering.\r\n    var id = \"__transition-\" + (this._uid) + \"-\";\r\n    child.key = child.key == null\r\n      ? id + child.tag\r\n      : isPrimitive(child.key)\r\n        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\r\n        : child.key;\r\n\r\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\r\n    var oldRawChild = this._vnode;\r\n    var oldChild = getRealChild(oldRawChild);\r\n\r\n    // mark v-show\r\n    // so that the transition module can hand over the control to the directive\r\n    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {\r\n      child.data.show = true;\r\n    }\r\n\r\n    if (oldChild && oldChild.data && !isSameChild(child, oldChild)) {\r\n      // replace old child transition data with fresh one\r\n      // important for dynamic transitions!\r\n      var oldData = oldChild && (oldChild.data.transition = extend({}, data));\r\n      // handle transition mode\r\n      if (mode === 'out-in') {\r\n        // return placeholder node and queue update when leave finishes\r\n        this._leaving = true;\r\n        mergeVNodeHook(oldData, 'afterLeave', function () {\r\n          this$1._leaving = false;\r\n          this$1.$forceUpdate();\r\n        });\r\n        return placeholder(h, rawChild)\r\n      } else if (mode === 'in-out') {\r\n        var delayedLeave;\r\n        var performLeave = function () { delayedLeave(); };\r\n        mergeVNodeHook(data, 'afterEnter', performLeave);\r\n        mergeVNodeHook(data, 'enterCancelled', performLeave);\r\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });\r\n      }\r\n    }\r\n\r\n    return rawChild\r\n  }\r\n};\r\n\r\n/*  */\r\n\r\n// Provides transition support for list items.\r\n// supports move transitions using the FLIP technique.\r\n\r\n// Because the vdom's children update algorithm is \"unstable\" - i.e.\r\n// it doesn't guarantee the relative positioning of removed elements,\r\n// we force transition-group to update its children into two passes:\r\n// in the first pass, we remove all nodes that need to be removed,\r\n// triggering their leaving transition; in the second pass, we insert/move\r\n// into the final desired state. This way in the second pass removed\r\n// nodes will remain where they should be.\r\n\r\nvar props = extend({\r\n  tag: String,\r\n  moveClass: String\r\n}, transitionProps);\r\n\r\ndelete props.mode;\r\n\r\nvar TransitionGroup = {\r\n  props: props,\r\n\r\n  render: function render (h) {\r\n    var tag = this.tag || this.$vnode.data.tag || 'span';\r\n    var map = Object.create(null);\r\n    var prevChildren = this.prevChildren = this.children;\r\n    var rawChildren = this.$slots.default || [];\r\n    var children = this.children = [];\r\n    var transitionData = extractTransitionData(this);\r\n\r\n    for (var i = 0; i < rawChildren.length; i++) {\r\n      var c = rawChildren[i];\r\n      if (c.tag) {\r\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\r\n          children.push(c);\r\n          map[c.key] = c\r\n          ;(c.data || (c.data = {})).transition = transitionData;\r\n        } else if (process.env.NODE_ENV !== 'production') {\r\n          var opts = c.componentOptions;\r\n          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;\r\n          warn((\"<transition-group> children must be keyed: <\" + name + \">\"));\r\n        }\r\n      }\r\n    }\r\n\r\n    if (prevChildren) {\r\n      var kept = [];\r\n      var removed = [];\r\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\r\n        var c$1 = prevChildren[i$1];\r\n        c$1.data.transition = transitionData;\r\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\r\n        if (map[c$1.key]) {\r\n          kept.push(c$1);\r\n        } else {\r\n          removed.push(c$1);\r\n        }\r\n      }\r\n      this.kept = h(tag, null, kept);\r\n      this.removed = removed;\r\n    }\r\n\r\n    return h(tag, null, children)\r\n  },\r\n\r\n  beforeUpdate: function beforeUpdate () {\r\n    // force removing pass\r\n    this.__patch__(\r\n      this._vnode,\r\n      this.kept,\r\n      false, // hydrating\r\n      true // removeOnly (!important, avoids unnecessary moves)\r\n    );\r\n    this._vnode = this.kept;\r\n  },\r\n\r\n  updated: function updated () {\r\n    var children = this.prevChildren;\r\n    var moveClass = this.moveClass || ((this.name || 'v') + '-move');\r\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\r\n      return\r\n    }\r\n\r\n    // we divide the work into three loops to avoid mixing DOM reads and writes\r\n    // in each iteration - which helps prevent layout thrashing.\r\n    children.forEach(callPendingCbs);\r\n    children.forEach(recordPosition);\r\n    children.forEach(applyTranslation);\r\n\r\n    // force reflow to put everything in position\r\n    var body = document.body;\r\n    var f = body.offsetHeight; // eslint-disable-line\r\n\r\n    children.forEach(function (c) {\r\n      if (c.data.moved) {\r\n        var el = c.elm;\r\n        var s = el.style;\r\n        addTransitionClass(el, moveClass);\r\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\r\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\r\n          if (!e || /transform$/.test(e.propertyName)) {\r\n            el.removeEventListener(transitionEndEvent, cb);\r\n            el._moveCb = null;\r\n            removeTransitionClass(el, moveClass);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  },\r\n\r\n  methods: {\r\n    hasMove: function hasMove (el, moveClass) {\r\n      /* istanbul ignore if */\r\n      if (!hasTransition) {\r\n        return false\r\n      }\r\n      if (this._hasMove != null) {\r\n        return this._hasMove\r\n      }\r\n      // Detect whether an element with the move class applied has\r\n      // CSS transitions. Since the element may be inside an entering\r\n      // transition at this very moment, we make a clone of it and remove\r\n      // all other transition classes applied to ensure only the move class\r\n      // is applied.\r\n      var clone = el.cloneNode();\r\n      if (el._transitionClasses) {\r\n        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });\r\n      }\r\n      addClass(clone, moveClass);\r\n      clone.style.display = 'none';\r\n      this.$el.appendChild(clone);\r\n      var info = getTransitionInfo(clone);\r\n      this.$el.removeChild(clone);\r\n      return (this._hasMove = info.hasTransform)\r\n    }\r\n  }\r\n};\r\n\r\nfunction callPendingCbs (c) {\r\n  /* istanbul ignore if */\r\n  if (c.elm._moveCb) {\r\n    c.elm._moveCb();\r\n  }\r\n  /* istanbul ignore if */\r\n  if (c.elm._enterCb) {\r\n    c.elm._enterCb();\r\n  }\r\n}\r\n\r\nfunction recordPosition (c) {\r\n  c.data.newPos = c.elm.getBoundingClientRect();\r\n}\r\n\r\nfunction applyTranslation (c) {\r\n  var oldPos = c.data.pos;\r\n  var newPos = c.data.newPos;\r\n  var dx = oldPos.left - newPos.left;\r\n  var dy = oldPos.top - newPos.top;\r\n  if (dx || dy) {\r\n    c.data.moved = true;\r\n    var s = c.elm.style;\r\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\r\n    s.transitionDuration = '0s';\r\n  }\r\n}\r\n\r\nvar platformComponents = {\r\n  Transition: Transition,\r\n  TransitionGroup: TransitionGroup\r\n};\r\n\r\n/*  */\r\n\r\n// install platform specific utils\r\nVue$3.config.mustUseProp = mustUseProp;\r\nVue$3.config.isReservedTag = isReservedTag;\r\nVue$3.config.getTagNamespace = getTagNamespace;\r\nVue$3.config.isUnknownElement = isUnknownElement;\r\n\r\n// install platform runtime directives & components\r\nextend(Vue$3.options.directives, platformDirectives);\r\nextend(Vue$3.options.components, platformComponents);\r\n\r\n// install platform patch function\r\nVue$3.prototype.__patch__ = inBrowser ? patch : noop;\r\n\r\n// public mount method\r\nVue$3.prototype.$mount = function (\r\n  el,\r\n  hydrating\r\n) {\r\n  el = el && inBrowser ? query(el) : undefined;\r\n  return mountComponent(this, el, hydrating)\r\n};\r\n\r\n// devtools global hook\r\n/* istanbul ignore next */\r\nsetTimeout(function () {\r\n  if (config.devtools) {\r\n    if (devtools) {\r\n      devtools.emit('init', Vue$3);\r\n    } else if (process.env.NODE_ENV !== 'production' && isChrome) {\r\n      console[console.info ? 'info' : 'log'](\r\n        'Download the Vue Devtools extension for a better development experience:\\n' +\r\n        'https://github.com/vuejs/vue-devtools'\r\n      );\r\n    }\r\n  }\r\n  if (process.env.NODE_ENV !== 'production' &&\r\n      config.productionTip !== false &&\r\n      inBrowser && typeof console !== 'undefined') {\r\n    console[console.info ? 'info' : 'log'](\r\n      \"You are running Vue in development mode.\\n\" +\r\n      \"Make sure to turn on production mode when deploying for production.\\n\" +\r\n      \"See more tips at https://vuejs.org/guide/deployment.html\"\r\n    );\r\n  }\r\n}, 0);\r\n\r\n/*  */\r\n\r\n// check whether current browser encodes a char inside attribute values\r\nfunction shouldDecode (content, encoded) {\r\n  var div = document.createElement('div');\r\n  div.innerHTML = \"<div a=\\\"\" + content + \"\\\">\";\r\n  return div.innerHTML.indexOf(encoded) > 0\r\n}\r\n\r\n// #3663\r\n// IE encodes newlines inside attribute values while other browsers don't\r\nvar shouldDecodeNewlines = inBrowser ? shouldDecode('\\n', '&#10;') : false;\r\n\r\n/*  */\r\n\r\nvar isUnaryTag = makeMap(\r\n  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +\r\n  'link,meta,param,source,track,wbr'\r\n);\r\n\r\n// Elements that you can, intentionally, leave open\r\n// (and which close themselves)\r\nvar canBeLeftOpenTag = makeMap(\r\n  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'\r\n);\r\n\r\n// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\r\n// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\r\nvar isNonPhrasingTag = makeMap(\r\n  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\r\n  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\r\n  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\r\n  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\r\n  'title,tr,track'\r\n);\r\n\r\n/*  */\r\n\r\nvar decoder;\r\n\r\nfunction decode (html) {\r\n  decoder = decoder || document.createElement('div');\r\n  decoder.innerHTML = html;\r\n  return decoder.textContent\r\n}\r\n\r\n/**\r\n * Not type-checking this file because it's mostly vendor code.\r\n */\r\n\r\n/*!\r\n * HTML Parser By John Resig (ejohn.org)\r\n * Modified by Juriy \"kangax\" Zaytsev\r\n * Original code by Erik Arvidsson, Mozilla Public License\r\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\r\n */\r\n\r\n// Regular Expressions for parsing tags and attributes\r\nvar singleAttrIdentifier = /([^\\s\"'<>/=]+)/;\r\nvar singleAttrAssign = /(?:=)/;\r\nvar singleAttrValues = [\r\n  // attr value double quotes\r\n  /\"([^\"]*)\"+/.source,\r\n  // attr value, single quotes\r\n  /'([^']*)'+/.source,\r\n  // attr value, no quotes\r\n  /([^\\s\"'=<>`]+)/.source\r\n];\r\nvar attribute = new RegExp(\r\n  '^\\\\s*' + singleAttrIdentifier.source +\r\n  '(?:\\\\s*(' + singleAttrAssign.source + ')' +\r\n  '\\\\s*(?:' + singleAttrValues.join('|') + '))?'\r\n);\r\n\r\n// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName\r\n// but for Vue templates we can enforce a simple charset\r\nvar ncname = '[a-zA-Z_][\\\\w\\\\-\\\\.]*';\r\nvar qnameCapture = '((?:' + ncname + '\\\\:)?' + ncname + ')';\r\nvar startTagOpen = new RegExp('^<' + qnameCapture);\r\nvar startTagClose = /^\\s*(\\/?)>/;\r\nvar endTag = new RegExp('^<\\\\/' + qnameCapture + '[^>]*>');\r\nvar doctype = /^<!DOCTYPE [^>]+>/i;\r\nvar comment = /^<!--/;\r\nvar conditionalComment = /^<!\\[/;\r\n\r\nvar IS_REGEX_CAPTURING_BROKEN = false;\r\n'x'.replace(/x(.)?/g, function (m, g) {\r\n  IS_REGEX_CAPTURING_BROKEN = g === '';\r\n});\r\n\r\n// Special Elements (can contain anything)\r\nvar isPlainTextElement = makeMap('script,style,textarea', true);\r\nvar reCache = {};\r\n\r\nvar decodingMap = {\r\n  '&lt;': '<',\r\n  '&gt;': '>',\r\n  '&quot;': '\"',\r\n  '&amp;': '&',\r\n  '&#10;': '\\n'\r\n};\r\nvar encodedAttr = /&(?:lt|gt|quot|amp);/g;\r\nvar encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10);/g;\r\n\r\nfunction decodeAttr (value, shouldDecodeNewlines) {\r\n  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;\r\n  return value.replace(re, function (match) { return decodingMap[match]; })\r\n}\r\n\r\nfunction parseHTML (html, options) {\r\n  var stack = [];\r\n  var expectHTML = options.expectHTML;\r\n  var isUnaryTag$$1 = options.isUnaryTag || no;\r\n  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;\r\n  var index = 0;\r\n  var last, lastTag;\r\n  while (html) {\r\n    last = html;\r\n    // Make sure we're not in a plaintext content element like script/style\r\n    if (!lastTag || !isPlainTextElement(lastTag)) {\r\n      var textEnd = html.indexOf('<');\r\n      if (textEnd === 0) {\r\n        // Comment:\r\n        if (comment.test(html)) {\r\n          var commentEnd = html.indexOf('-->');\r\n\r\n          if (commentEnd >= 0) {\r\n            advance(commentEnd + 3);\r\n            continue\r\n          }\r\n        }\r\n\r\n        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\r\n        if (conditionalComment.test(html)) {\r\n          var conditionalEnd = html.indexOf(']>');\r\n\r\n          if (conditionalEnd >= 0) {\r\n            advance(conditionalEnd + 2);\r\n            continue\r\n          }\r\n        }\r\n\r\n        // Doctype:\r\n        var doctypeMatch = html.match(doctype);\r\n        if (doctypeMatch) {\r\n          advance(doctypeMatch[0].length);\r\n          continue\r\n        }\r\n\r\n        // End tag:\r\n        var endTagMatch = html.match(endTag);\r\n        if (endTagMatch) {\r\n          var curIndex = index;\r\n          advance(endTagMatch[0].length);\r\n          parseEndTag(endTagMatch[1], curIndex, index);\r\n          continue\r\n        }\r\n\r\n        // Start tag:\r\n        var startTagMatch = parseStartTag();\r\n        if (startTagMatch) {\r\n          handleStartTag(startTagMatch);\r\n          continue\r\n        }\r\n      }\r\n\r\n      var text = (void 0), rest$1 = (void 0), next = (void 0);\r\n      if (textEnd >= 0) {\r\n        rest$1 = html.slice(textEnd);\r\n        while (\r\n          !endTag.test(rest$1) &&\r\n          !startTagOpen.test(rest$1) &&\r\n          !comment.test(rest$1) &&\r\n          !conditionalComment.test(rest$1)\r\n        ) {\r\n          // < in plain text, be forgiving and treat it as text\r\n          next = rest$1.indexOf('<', 1);\r\n          if (next < 0) { break }\r\n          textEnd += next;\r\n          rest$1 = html.slice(textEnd);\r\n        }\r\n        text = html.substring(0, textEnd);\r\n        advance(textEnd);\r\n      }\r\n\r\n      if (textEnd < 0) {\r\n        text = html;\r\n        html = '';\r\n      }\r\n\r\n      if (options.chars && text) {\r\n        options.chars(text);\r\n      }\r\n    } else {\r\n      var stackedTag = lastTag.toLowerCase();\r\n      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));\r\n      var endTagLength = 0;\r\n      var rest = html.replace(reStackedTag, function (all, text, endTag) {\r\n        endTagLength = endTag.length;\r\n        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {\r\n          text = text\r\n            .replace(/<!--([\\s\\S]*?)-->/g, '$1')\r\n            .replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\r\n        }\r\n        if (options.chars) {\r\n          options.chars(text);\r\n        }\r\n        return ''\r\n      });\r\n      index += html.length - rest.length;\r\n      html = rest;\r\n      parseEndTag(stackedTag, index - endTagLength, index);\r\n    }\r\n\r\n    if (html === last) {\r\n      options.chars && options.chars(html);\r\n      if (process.env.NODE_ENV !== 'production' && !stack.length && options.warn) {\r\n        options.warn((\"Mal-formatted tag at end of template: \\\"\" + html + \"\\\"\"));\r\n      }\r\n      break\r\n    }\r\n  }\r\n\r\n  // Clean up any remaining tags\r\n  parseEndTag();\r\n\r\n  function advance (n) {\r\n    index += n;\r\n    html = html.substring(n);\r\n  }\r\n\r\n  function parseStartTag () {\r\n    var start = html.match(startTagOpen);\r\n    if (start) {\r\n      var match = {\r\n        tagName: start[1],\r\n        attrs: [],\r\n        start: index\r\n      };\r\n      advance(start[0].length);\r\n      var end, attr;\r\n      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\r\n        advance(attr[0].length);\r\n        match.attrs.push(attr);\r\n      }\r\n      if (end) {\r\n        match.unarySlash = end[1];\r\n        advance(end[0].length);\r\n        match.end = index;\r\n        return match\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleStartTag (match) {\r\n    var tagName = match.tagName;\r\n    var unarySlash = match.unarySlash;\r\n\r\n    if (expectHTML) {\r\n      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\r\n        parseEndTag(lastTag);\r\n      }\r\n      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {\r\n        parseEndTag(tagName);\r\n      }\r\n    }\r\n\r\n    var unary = isUnaryTag$$1(tagName) || tagName === 'html' && lastTag === 'head' || !!unarySlash;\r\n\r\n    var l = match.attrs.length;\r\n    var attrs = new Array(l);\r\n    for (var i = 0; i < l; i++) {\r\n      var args = match.attrs[i];\r\n      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778\r\n      if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('\"\"') === -1) {\r\n        if (args[3] === '') { delete args[3]; }\r\n        if (args[4] === '') { delete args[4]; }\r\n        if (args[5] === '') { delete args[5]; }\r\n      }\r\n      var value = args[3] || args[4] || args[5] || '';\r\n      attrs[i] = {\r\n        name: args[1],\r\n        value: decodeAttr(\r\n          value,\r\n          options.shouldDecodeNewlines\r\n        )\r\n      };\r\n    }\r\n\r\n    if (!unary) {\r\n      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs });\r\n      lastTag = tagName;\r\n    }\r\n\r\n    if (options.start) {\r\n      options.start(tagName, attrs, unary, match.start, match.end);\r\n    }\r\n  }\r\n\r\n  function parseEndTag (tagName, start, end) {\r\n    var pos, lowerCasedTagName;\r\n    if (start == null) { start = index; }\r\n    if (end == null) { end = index; }\r\n\r\n    if (tagName) {\r\n      lowerCasedTagName = tagName.toLowerCase();\r\n    }\r\n\r\n    // Find the closest opened tag of the same type\r\n    if (tagName) {\r\n      for (pos = stack.length - 1; pos >= 0; pos--) {\r\n        if (stack[pos].lowerCasedTag === lowerCasedTagName) {\r\n          break\r\n        }\r\n      }\r\n    } else {\r\n      // If no tag name is provided, clean shop\r\n      pos = 0;\r\n    }\r\n\r\n    if (pos >= 0) {\r\n      // Close all the open elements, up the stack\r\n      for (var i = stack.length - 1; i >= pos; i--) {\r\n        if (process.env.NODE_ENV !== 'production' &&\r\n            (i > pos || !tagName) &&\r\n            options.warn) {\r\n          options.warn(\r\n            (\"tag <\" + (stack[i].tag) + \"> has no matching end tag.\")\r\n          );\r\n        }\r\n        if (options.end) {\r\n          options.end(stack[i].tag, start, end);\r\n        }\r\n      }\r\n\r\n      // Remove the open elements from the stack\r\n      stack.length = pos;\r\n      lastTag = pos && stack[pos - 1].tag;\r\n    } else if (lowerCasedTagName === 'br') {\r\n      if (options.start) {\r\n        options.start(tagName, [], true, start, end);\r\n      }\r\n    } else if (lowerCasedTagName === 'p') {\r\n      if (options.start) {\r\n        options.start(tagName, [], false, start, end);\r\n      }\r\n      if (options.end) {\r\n        options.end(tagName, start, end);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nvar defaultTagRE = /\\{\\{((?:.|\\n)+?)\\}\\}/g;\r\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\r\n\r\nvar buildRegex = cached(function (delimiters) {\r\n  var open = delimiters[0].replace(regexEscapeRE, '\\\\$&');\r\n  var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\r\n  return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g')\r\n});\r\n\r\nfunction parseText (\r\n  text,\r\n  delimiters\r\n) {\r\n  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;\r\n  if (!tagRE.test(text)) {\r\n    return\r\n  }\r\n  var tokens = [];\r\n  var lastIndex = tagRE.lastIndex = 0;\r\n  var match, index;\r\n  while ((match = tagRE.exec(text))) {\r\n    index = match.index;\r\n    // push text token\r\n    if (index > lastIndex) {\r\n      tokens.push(JSON.stringify(text.slice(lastIndex, index)));\r\n    }\r\n    // tag token\r\n    var exp = parseFilters(match[1].trim());\r\n    tokens.push((\"_s(\" + exp + \")\"));\r\n    lastIndex = index + match[0].length;\r\n  }\r\n  if (lastIndex < text.length) {\r\n    tokens.push(JSON.stringify(text.slice(lastIndex)));\r\n  }\r\n  return tokens.join('+')\r\n}\r\n\r\n/*  */\r\n\r\nvar onRE = /^@|^v-on:/;\r\nvar dirRE = /^v-|^@|^:/;\r\nvar forAliasRE = /(.*?)\\s+(?:in|of)\\s+(.*)/;\r\nvar forIteratorRE = /\\((\\{[^}]*\\}|[^,]*),([^,]*)(?:,([^,]*))?\\)/;\r\n\r\nvar argRE = /:(.*)$/;\r\nvar bindRE = /^:|^v-bind:/;\r\nvar modifierRE = /\\.[^.]+/g;\r\n\r\nvar decodeHTMLCached = cached(decode);\r\n\r\n// configurable state\r\nvar warn$2;\r\nvar delimiters;\r\nvar transforms;\r\nvar preTransforms;\r\nvar postTransforms;\r\nvar platformIsPreTag;\r\nvar platformMustUseProp;\r\nvar platformGetTagNamespace;\r\n\r\n/**\r\n * Convert HTML string to AST.\r\n */\r\nfunction parse (\r\n  template,\r\n  options\r\n) {\r\n  warn$2 = options.warn || baseWarn;\r\n  platformGetTagNamespace = options.getTagNamespace || no;\r\n  platformMustUseProp = options.mustUseProp || no;\r\n  platformIsPreTag = options.isPreTag || no;\r\n  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');\r\n  transforms = pluckModuleFunction(options.modules, 'transformNode');\r\n  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');\r\n  delimiters = options.delimiters;\r\n\r\n  var stack = [];\r\n  var preserveWhitespace = options.preserveWhitespace !== false;\r\n  var root;\r\n  var currentParent;\r\n  var inVPre = false;\r\n  var inPre = false;\r\n  var warned = false;\r\n\r\n  function warnOnce (msg) {\r\n    if (!warned) {\r\n      warned = true;\r\n      warn$2(msg);\r\n    }\r\n  }\r\n\r\n  function endPre (element) {\r\n    // check pre state\r\n    if (element.pre) {\r\n      inVPre = false;\r\n    }\r\n    if (platformIsPreTag(element.tag)) {\r\n      inPre = false;\r\n    }\r\n  }\r\n\r\n  parseHTML(template, {\r\n    warn: warn$2,\r\n    expectHTML: options.expectHTML,\r\n    isUnaryTag: options.isUnaryTag,\r\n    canBeLeftOpenTag: options.canBeLeftOpenTag,\r\n    shouldDecodeNewlines: options.shouldDecodeNewlines,\r\n    start: function start (tag, attrs, unary) {\r\n      // check namespace.\r\n      // inherit parent ns if there is one\r\n      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);\r\n\r\n      // handle IE svg bug\r\n      /* istanbul ignore if */\r\n      if (isIE && ns === 'svg') {\r\n        attrs = guardIESVGBug(attrs);\r\n      }\r\n\r\n      var element = {\r\n        type: 1,\r\n        tag: tag,\r\n        attrsList: attrs,\r\n        attrsMap: makeAttrsMap(attrs),\r\n        parent: currentParent,\r\n        children: []\r\n      };\r\n      if (ns) {\r\n        element.ns = ns;\r\n      }\r\n\r\n      if (isForbiddenTag(element) && !isServerRendering()) {\r\n        element.forbidden = true;\r\n        process.env.NODE_ENV !== 'production' && warn$2(\r\n          'Templates should only be responsible for mapping the state to the ' +\r\n          'UI. Avoid placing tags with side-effects in your templates, such as ' +\r\n          \"<\" + tag + \">\" + ', as they will not be parsed.'\r\n        );\r\n      }\r\n\r\n      // apply pre-transforms\r\n      for (var i = 0; i < preTransforms.length; i++) {\r\n        preTransforms[i](element, options);\r\n      }\r\n\r\n      if (!inVPre) {\r\n        processPre(element);\r\n        if (element.pre) {\r\n          inVPre = true;\r\n        }\r\n      }\r\n      if (platformIsPreTag(element.tag)) {\r\n        inPre = true;\r\n      }\r\n      if (inVPre) {\r\n        processRawAttrs(element);\r\n      } else {\r\n        processFor(element);\r\n        processIf(element);\r\n        processOnce(element);\r\n        processKey(element);\r\n\r\n        // determine whether this is a plain element after\r\n        // removing structural attributes\r\n        element.plain = !element.key && !attrs.length;\r\n\r\n        processRef(element);\r\n        processSlot(element);\r\n        processComponent(element);\r\n        for (var i$1 = 0; i$1 < transforms.length; i$1++) {\r\n          transforms[i$1](element, options);\r\n        }\r\n        processAttrs(element);\r\n      }\r\n\r\n      function checkRootConstraints (el) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n          if (el.tag === 'slot' || el.tag === 'template') {\r\n            warnOnce(\r\n              \"Cannot use <\" + (el.tag) + \"> as component root element because it may \" +\r\n              'contain multiple nodes.'\r\n            );\r\n          }\r\n          if (el.attrsMap.hasOwnProperty('v-for')) {\r\n            warnOnce(\r\n              'Cannot use v-for on stateful component root element because ' +\r\n              'it renders multiple elements.'\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      // tree management\r\n      if (!root) {\r\n        root = element;\r\n        checkRootConstraints(root);\r\n      } else if (!stack.length) {\r\n        // allow root elements with v-if, v-else-if and v-else\r\n        if (root.if && (element.elseif || element.else)) {\r\n          checkRootConstraints(element);\r\n          addIfCondition(root, {\r\n            exp: element.elseif,\r\n            block: element\r\n          });\r\n        } else if (process.env.NODE_ENV !== 'production') {\r\n          warnOnce(\r\n            \"Component template should contain exactly one root element. \" +\r\n            \"If you are using v-if on multiple elements, \" +\r\n            \"use v-else-if to chain them instead.\"\r\n          );\r\n        }\r\n      }\r\n      if (currentParent && !element.forbidden) {\r\n        if (element.elseif || element.else) {\r\n          processIfConditions(element, currentParent);\r\n        } else if (element.slotScope) { // scoped slot\r\n          currentParent.plain = false;\r\n          var name = element.slotTarget || '\"default\"';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;\r\n        } else {\r\n          currentParent.children.push(element);\r\n          element.parent = currentParent;\r\n        }\r\n      }\r\n      if (!unary) {\r\n        currentParent = element;\r\n        stack.push(element);\r\n      } else {\r\n        endPre(element);\r\n      }\r\n      // apply post-transforms\r\n      for (var i$2 = 0; i$2 < postTransforms.length; i$2++) {\r\n        postTransforms[i$2](element, options);\r\n      }\r\n    },\r\n\r\n    end: function end () {\r\n      // remove trailing whitespace\r\n      var element = stack[stack.length - 1];\r\n      var lastNode = element.children[element.children.length - 1];\r\n      if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {\r\n        element.children.pop();\r\n      }\r\n      // pop stack\r\n      stack.length -= 1;\r\n      currentParent = stack[stack.length - 1];\r\n      endPre(element);\r\n    },\r\n\r\n    chars: function chars (text) {\r\n      if (!currentParent) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n          if (text === template) {\r\n            warnOnce(\r\n              'Component template requires a root element, rather than just text.'\r\n            );\r\n          } else if ((text = text.trim())) {\r\n            warnOnce(\r\n              (\"text \\\"\" + text + \"\\\" outside root element will be ignored.\")\r\n            );\r\n          }\r\n        }\r\n        return\r\n      }\r\n      // IE textarea placeholder bug\r\n      /* istanbul ignore if */\r\n      if (isIE &&\r\n          currentParent.tag === 'textarea' &&\r\n          currentParent.attrsMap.placeholder === text) {\r\n        return\r\n      }\r\n      var children = currentParent.children;\r\n      text = inPre || text.trim()\r\n        ? decodeHTMLCached(text)\r\n        // only preserve whitespace if its not right after a starting tag\r\n        : preserveWhitespace && children.length ? ' ' : '';\r\n      if (text) {\r\n        var expression;\r\n        if (!inVPre && text !== ' ' && (expression = parseText(text, delimiters))) {\r\n          children.push({\r\n            type: 2,\r\n            expression: expression,\r\n            text: text\r\n          });\r\n        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {\r\n          children.push({\r\n            type: 3,\r\n            text: text\r\n          });\r\n        }\r\n      }\r\n    }\r\n  });\r\n  return root\r\n}\r\n\r\nfunction processPre (el) {\r\n  if (getAndRemoveAttr(el, 'v-pre') != null) {\r\n    el.pre = true;\r\n  }\r\n}\r\n\r\nfunction processRawAttrs (el) {\r\n  var l = el.attrsList.length;\r\n  if (l) {\r\n    var attrs = el.attrs = new Array(l);\r\n    for (var i = 0; i < l; i++) {\r\n      attrs[i] = {\r\n        name: el.attrsList[i].name,\r\n        value: JSON.stringify(el.attrsList[i].value)\r\n      };\r\n    }\r\n  } else if (!el.pre) {\r\n    // non root node in pre blocks with no attributes\r\n    el.plain = true;\r\n  }\r\n}\r\n\r\nfunction processKey (el) {\r\n  var exp = getBindingAttr(el, 'key');\r\n  if (exp) {\r\n    if (process.env.NODE_ENV !== 'production' && el.tag === 'template') {\r\n      warn$2(\"<template> cannot be keyed. Place the key on real elements instead.\");\r\n    }\r\n    el.key = exp;\r\n  }\r\n}\r\n\r\nfunction processRef (el) {\r\n  var ref = getBindingAttr(el, 'ref');\r\n  if (ref) {\r\n    el.ref = ref;\r\n    el.refInFor = checkInFor(el);\r\n  }\r\n}\r\n\r\nfunction processFor (el) {\r\n  var exp;\r\n  if ((exp = getAndRemoveAttr(el, 'v-for'))) {\r\n    var inMatch = exp.match(forAliasRE);\r\n    if (!inMatch) {\r\n      process.env.NODE_ENV !== 'production' && warn$2(\r\n        (\"Invalid v-for expression: \" + exp)\r\n      );\r\n      return\r\n    }\r\n    el.for = inMatch[2].trim();\r\n    var alias = inMatch[1].trim();\r\n    var iteratorMatch = alias.match(forIteratorRE);\r\n    if (iteratorMatch) {\r\n      el.alias = iteratorMatch[1].trim();\r\n      el.iterator1 = iteratorMatch[2].trim();\r\n      if (iteratorMatch[3]) {\r\n        el.iterator2 = iteratorMatch[3].trim();\r\n      }\r\n    } else {\r\n      el.alias = alias;\r\n    }\r\n  }\r\n}\r\n\r\nfunction processIf (el) {\r\n  var exp = getAndRemoveAttr(el, 'v-if');\r\n  if (exp) {\r\n    el.if = exp;\r\n    addIfCondition(el, {\r\n      exp: exp,\r\n      block: el\r\n    });\r\n  } else {\r\n    if (getAndRemoveAttr(el, 'v-else') != null) {\r\n      el.else = true;\r\n    }\r\n    var elseif = getAndRemoveAttr(el, 'v-else-if');\r\n    if (elseif) {\r\n      el.elseif = elseif;\r\n    }\r\n  }\r\n}\r\n\r\nfunction processIfConditions (el, parent) {\r\n  var prev = findPrevElement(parent.children);\r\n  if (prev && prev.if) {\r\n    addIfCondition(prev, {\r\n      exp: el.elseif,\r\n      block: el\r\n    });\r\n  } else if (process.env.NODE_ENV !== 'production') {\r\n    warn$2(\r\n      \"v-\" + (el.elseif ? ('else-if=\"' + el.elseif + '\"') : 'else') + \" \" +\r\n      \"used on element <\" + (el.tag) + \"> without corresponding v-if.\"\r\n    );\r\n  }\r\n}\r\n\r\nfunction findPrevElement (children) {\r\n  var i = children.length;\r\n  while (i--) {\r\n    if (children[i].type === 1) {\r\n      return children[i]\r\n    } else {\r\n      if (process.env.NODE_ENV !== 'production' && children[i].text !== ' ') {\r\n        warn$2(\r\n          \"text \\\"\" + (children[i].text.trim()) + \"\\\" between v-if and v-else(-if) \" +\r\n          \"will be ignored.\"\r\n        );\r\n      }\r\n      children.pop();\r\n    }\r\n  }\r\n}\r\n\r\nfunction addIfCondition (el, condition) {\r\n  if (!el.ifConditions) {\r\n    el.ifConditions = [];\r\n  }\r\n  el.ifConditions.push(condition);\r\n}\r\n\r\nfunction processOnce (el) {\r\n  var once$$1 = getAndRemoveAttr(el, 'v-once');\r\n  if (once$$1 != null) {\r\n    el.once = true;\r\n  }\r\n}\r\n\r\nfunction processSlot (el) {\r\n  if (el.tag === 'slot') {\r\n    el.slotName = getBindingAttr(el, 'name');\r\n    if (process.env.NODE_ENV !== 'production' && el.key) {\r\n      warn$2(\r\n        \"`key` does not work on <slot> because slots are abstract outlets \" +\r\n        \"and can possibly expand into multiple elements. \" +\r\n        \"Use the key on a wrapping element instead.\"\r\n      );\r\n    }\r\n  } else {\r\n    var slotTarget = getBindingAttr(el, 'slot');\r\n    if (slotTarget) {\r\n      el.slotTarget = slotTarget === '\"\"' ? '\"default\"' : slotTarget;\r\n    }\r\n    if (el.tag === 'template') {\r\n      el.slotScope = getAndRemoveAttr(el, 'scope');\r\n    }\r\n  }\r\n}\r\n\r\nfunction processComponent (el) {\r\n  var binding;\r\n  if ((binding = getBindingAttr(el, 'is'))) {\r\n    el.component = binding;\r\n  }\r\n  if (getAndRemoveAttr(el, 'inline-template') != null) {\r\n    el.inlineTemplate = true;\r\n  }\r\n}\r\n\r\nfunction processAttrs (el) {\r\n  var list = el.attrsList;\r\n  var i, l, name, rawName, value, modifiers, isProp;\r\n  for (i = 0, l = list.length; i < l; i++) {\r\n    name = rawName = list[i].name;\r\n    value = list[i].value;\r\n    if (dirRE.test(name)) {\r\n      // mark element as dynamic\r\n      el.hasBindings = true;\r\n      // modifiers\r\n      modifiers = parseModifiers(name);\r\n      if (modifiers) {\r\n        name = name.replace(modifierRE, '');\r\n      }\r\n      if (bindRE.test(name)) { // v-bind\r\n        name = name.replace(bindRE, '');\r\n        value = parseFilters(value);\r\n        isProp = false;\r\n        if (modifiers) {\r\n          if (modifiers.prop) {\r\n            isProp = true;\r\n            name = camelize(name);\r\n            if (name === 'innerHtml') { name = 'innerHTML'; }\r\n          }\r\n          if (modifiers.camel) {\r\n            name = camelize(name);\r\n          }\r\n        }\r\n        if (isProp || platformMustUseProp(el.tag, el.attrsMap.type, name)) {\r\n          addProp(el, name, value);\r\n        } else {\r\n          addAttr(el, name, value);\r\n        }\r\n      } else if (onRE.test(name)) { // v-on\r\n        name = name.replace(onRE, '');\r\n        addHandler(el, name, value, modifiers);\r\n      } else { // normal directives\r\n        name = name.replace(dirRE, '');\r\n        // parse arg\r\n        var argMatch = name.match(argRE);\r\n        var arg = argMatch && argMatch[1];\r\n        if (arg) {\r\n          name = name.slice(0, -(arg.length + 1));\r\n        }\r\n        addDirective(el, name, rawName, value, arg, modifiers);\r\n        if (process.env.NODE_ENV !== 'production' && name === 'model') {\r\n          checkForAliasModel(el, value);\r\n        }\r\n      }\r\n    } else {\r\n      // literal attribute\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        var expression = parseText(value, delimiters);\r\n        if (expression) {\r\n          warn$2(\r\n            name + \"=\\\"\" + value + \"\\\": \" +\r\n            'Interpolation inside attributes has been removed. ' +\r\n            'Use v-bind or the colon shorthand instead. For example, ' +\r\n            'instead of <div id=\"{{ val }}\">, use <div :id=\"val\">.'\r\n          );\r\n        }\r\n      }\r\n      addAttr(el, name, JSON.stringify(value));\r\n    }\r\n  }\r\n}\r\n\r\nfunction checkInFor (el) {\r\n  var parent = el;\r\n  while (parent) {\r\n    if (parent.for !== undefined) {\r\n      return true\r\n    }\r\n    parent = parent.parent;\r\n  }\r\n  return false\r\n}\r\n\r\nfunction parseModifiers (name) {\r\n  var match = name.match(modifierRE);\r\n  if (match) {\r\n    var ret = {};\r\n    match.forEach(function (m) { ret[m.slice(1)] = true; });\r\n    return ret\r\n  }\r\n}\r\n\r\nfunction makeAttrsMap (attrs) {\r\n  var map = {};\r\n  for (var i = 0, l = attrs.length; i < l; i++) {\r\n    if (process.env.NODE_ENV !== 'production' && map[attrs[i].name] && !isIE) {\r\n      warn$2('duplicate attribute: ' + attrs[i].name);\r\n    }\r\n    map[attrs[i].name] = attrs[i].value;\r\n  }\r\n  return map\r\n}\r\n\r\nfunction isForbiddenTag (el) {\r\n  return (\r\n    el.tag === 'style' ||\r\n    (el.tag === 'script' && (\r\n      !el.attrsMap.type ||\r\n      el.attrsMap.type === 'text/javascript'\r\n    ))\r\n  )\r\n}\r\n\r\nvar ieNSBug = /^xmlns:NS\\d+/;\r\nvar ieNSPrefix = /^NS\\d+:/;\r\n\r\n/* istanbul ignore next */\r\nfunction guardIESVGBug (attrs) {\r\n  var res = [];\r\n  for (var i = 0; i < attrs.length; i++) {\r\n    var attr = attrs[i];\r\n    if (!ieNSBug.test(attr.name)) {\r\n      attr.name = attr.name.replace(ieNSPrefix, '');\r\n      res.push(attr);\r\n    }\r\n  }\r\n  return res\r\n}\r\n\r\nfunction checkForAliasModel (el, value) {\r\n  var _el = el;\r\n  while (_el) {\r\n    if (_el.for && _el.alias === value) {\r\n      warn$2(\r\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\r\n        \"You are binding v-model directly to a v-for iteration alias. \" +\r\n        \"This will not be able to modify the v-for source array because \" +\r\n        \"writing to the alias is like modifying a function local variable. \" +\r\n        \"Consider using an array of objects and use v-model on an object property instead.\"\r\n      );\r\n    }\r\n    _el = _el.parent;\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nvar isStaticKey;\r\nvar isPlatformReservedTag;\r\n\r\nvar genStaticKeysCached = cached(genStaticKeys$1);\r\n\r\n/**\r\n * Goal of the optimizer: walk the generated template AST tree\r\n * and detect sub-trees that are purely static, i.e. parts of\r\n * the DOM that never needs to change.\r\n *\r\n * Once we detect these sub-trees, we can:\r\n *\r\n * 1. Hoist them into constants, so that we no longer need to\r\n *    create fresh nodes for them on each re-render;\r\n * 2. Completely skip them in the patching process.\r\n */\r\nfunction optimize (root, options) {\r\n  if (!root) { return }\r\n  isStaticKey = genStaticKeysCached(options.staticKeys || '');\r\n  isPlatformReservedTag = options.isReservedTag || no;\r\n  // first pass: mark all non-static nodes.\r\n  markStatic$1(root);\r\n  // second pass: mark static roots.\r\n  markStaticRoots(root, false);\r\n}\r\n\r\nfunction genStaticKeys$1 (keys) {\r\n  return makeMap(\r\n    'type,tag,attrsList,attrsMap,plain,parent,children,attrs' +\r\n    (keys ? ',' + keys : '')\r\n  )\r\n}\r\n\r\nfunction markStatic$1 (node) {\r\n  node.static = isStatic(node);\r\n  if (node.type === 1) {\r\n    // do not make component slot content static. this avoids\r\n    // 1. components not able to mutate slot nodes\r\n    // 2. static slot content fails for hot-reloading\r\n    if (\r\n      !isPlatformReservedTag(node.tag) &&\r\n      node.tag !== 'slot' &&\r\n      node.attrsMap['inline-template'] == null\r\n    ) {\r\n      return\r\n    }\r\n    for (var i = 0, l = node.children.length; i < l; i++) {\r\n      var child = node.children[i];\r\n      markStatic$1(child);\r\n      if (!child.static) {\r\n        node.static = false;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction markStaticRoots (node, isInFor) {\r\n  if (node.type === 1) {\r\n    if (node.static || node.once) {\r\n      node.staticInFor = isInFor;\r\n    }\r\n    // For a node to qualify as a static root, it should have children that\r\n    // are not just static text. Otherwise the cost of hoisting out will\r\n    // outweigh the benefits and it's better off to just always render it fresh.\r\n    if (node.static && node.children.length && !(\r\n      node.children.length === 1 &&\r\n      node.children[0].type === 3\r\n    )) {\r\n      node.staticRoot = true;\r\n      return\r\n    } else {\r\n      node.staticRoot = false;\r\n    }\r\n    if (node.children) {\r\n      for (var i = 0, l = node.children.length; i < l; i++) {\r\n        markStaticRoots(node.children[i], isInFor || !!node.for);\r\n      }\r\n    }\r\n    if (node.ifConditions) {\r\n      walkThroughConditionsBlocks(node.ifConditions, isInFor);\r\n    }\r\n  }\r\n}\r\n\r\nfunction walkThroughConditionsBlocks (conditionBlocks, isInFor) {\r\n  for (var i = 1, len = conditionBlocks.length; i < len; i++) {\r\n    markStaticRoots(conditionBlocks[i].block, isInFor);\r\n  }\r\n}\r\n\r\nfunction isStatic (node) {\r\n  if (node.type === 2) { // expression\r\n    return false\r\n  }\r\n  if (node.type === 3) { // text\r\n    return true\r\n  }\r\n  return !!(node.pre || (\r\n    !node.hasBindings && // no dynamic bindings\r\n    !node.if && !node.for && // not v-if or v-for or v-else\r\n    !isBuiltInTag(node.tag) && // not a built-in\r\n    isPlatformReservedTag(node.tag) && // not a component\r\n    !isDirectChildOfTemplateFor(node) &&\r\n    Object.keys(node).every(isStaticKey)\r\n  ))\r\n}\r\n\r\nfunction isDirectChildOfTemplateFor (node) {\r\n  while (node.parent) {\r\n    node = node.parent;\r\n    if (node.tag !== 'template') {\r\n      return false\r\n    }\r\n    if (node.for) {\r\n      return true\r\n    }\r\n  }\r\n  return false\r\n}\r\n\r\n/*  */\r\n\r\nvar fnExpRE = /^\\s*([\\w$_]+|\\([^)]*?\\))\\s*=>|^function\\s*\\(/;\r\nvar simplePathRE = /^\\s*[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['.*?']|\\[\".*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*\\s*$/;\r\n\r\n// keyCode aliases\r\nvar keyCodes = {\r\n  esc: 27,\r\n  tab: 9,\r\n  enter: 13,\r\n  space: 32,\r\n  up: 38,\r\n  left: 37,\r\n  right: 39,\r\n  down: 40,\r\n  'delete': [8, 46]\r\n};\r\n\r\n// #4868: modifiers that prevent the execution of the listener\r\n// need to explicitly return null so that we can determine whether to remove\r\n// the listener for .once\r\nvar genGuard = function (condition) { return (\"if(\" + condition + \")return null;\"); };\r\n\r\nvar modifierCode = {\r\n  stop: '$event.stopPropagation();',\r\n  prevent: '$event.preventDefault();',\r\n  self: genGuard(\"$event.target !== $event.currentTarget\"),\r\n  ctrl: genGuard(\"!$event.ctrlKey\"),\r\n  shift: genGuard(\"!$event.shiftKey\"),\r\n  alt: genGuard(\"!$event.altKey\"),\r\n  meta: genGuard(\"!$event.metaKey\"),\r\n  left: genGuard(\"'button' in $event && $event.button !== 0\"),\r\n  middle: genGuard(\"'button' in $event && $event.button !== 1\"),\r\n  right: genGuard(\"'button' in $event && $event.button !== 2\")\r\n};\r\n\r\nfunction genHandlers (events, native) {\r\n  var res = native ? 'nativeOn:{' : 'on:{';\r\n  for (var name in events) {\r\n    res += \"\\\"\" + name + \"\\\":\" + (genHandler(name, events[name])) + \",\";\r\n  }\r\n  return res.slice(0, -1) + '}'\r\n}\r\n\r\nfunction genHandler (\r\n  name,\r\n  handler\r\n) {\r\n  if (!handler) {\r\n    return 'function(){}'\r\n  }\r\n\r\n  if (Array.isArray(handler)) {\r\n    return (\"[\" + (handler.map(function (handler) { return genHandler(name, handler); }).join(',')) + \"]\")\r\n  }\r\n\r\n  var isMethodPath = simplePathRE.test(handler.value);\r\n  var isFunctionExpression = fnExpRE.test(handler.value);\r\n\r\n  if (!handler.modifiers) {\r\n    return isMethodPath || isFunctionExpression\r\n      ? handler.value\r\n      : (\"function($event){\" + (handler.value) + \"}\") // inline statement\r\n  } else {\r\n    var code = '';\r\n    var genModifierCode = '';\r\n    var keys = [];\r\n    for (var key in handler.modifiers) {\r\n      if (modifierCode[key]) {\r\n        genModifierCode += modifierCode[key];\r\n        // left/right\r\n        if (keyCodes[key]) {\r\n          keys.push(key);\r\n        }\r\n      } else {\r\n        keys.push(key);\r\n      }\r\n    }\r\n    if (keys.length) {\r\n      code += genKeyFilter(keys);\r\n    }\r\n    // Make sure modifiers like prevent and stop get executed after key filtering\r\n    if (genModifierCode) {\r\n      code += genModifierCode;\r\n    }\r\n    var handlerCode = isMethodPath\r\n      ? handler.value + '($event)'\r\n      : isFunctionExpression\r\n        ? (\"(\" + (handler.value) + \")($event)\")\r\n        : handler.value;\r\n    return (\"function($event){\" + code + handlerCode + \"}\")\r\n  }\r\n}\r\n\r\nfunction genKeyFilter (keys) {\r\n  return (\"if(!('button' in $event)&&\" + (keys.map(genFilterCode).join('&&')) + \")return null;\")\r\n}\r\n\r\nfunction genFilterCode (key) {\r\n  var keyVal = parseInt(key, 10);\r\n  if (keyVal) {\r\n    return (\"$event.keyCode!==\" + keyVal)\r\n  }\r\n  var alias = keyCodes[key];\r\n  return (\"_k($event.keyCode,\" + (JSON.stringify(key)) + (alias ? ',' + JSON.stringify(alias) : '') + \")\")\r\n}\r\n\r\n/*  */\r\n\r\nfunction bind$1 (el, dir) {\r\n  el.wrapData = function (code) {\r\n    return (\"_b(\" + code + \",'\" + (el.tag) + \"',\" + (dir.value) + (dir.modifiers && dir.modifiers.prop ? ',true' : '') + \")\")\r\n  };\r\n}\r\n\r\n/*  */\r\n\r\nvar baseDirectives = {\r\n  bind: bind$1,\r\n  cloak: noop\r\n};\r\n\r\n/*  */\r\n\r\n// configurable state\r\nvar warn$3;\r\nvar transforms$1;\r\nvar dataGenFns;\r\nvar platformDirectives$1;\r\nvar isPlatformReservedTag$1;\r\nvar staticRenderFns;\r\nvar onceCount;\r\nvar currentOptions;\r\n\r\nfunction generate (\r\n  ast,\r\n  options\r\n) {\r\n  // save previous staticRenderFns so generate calls can be nested\r\n  var prevStaticRenderFns = staticRenderFns;\r\n  var currentStaticRenderFns = staticRenderFns = [];\r\n  var prevOnceCount = onceCount;\r\n  onceCount = 0;\r\n  currentOptions = options;\r\n  warn$3 = options.warn || baseWarn;\r\n  transforms$1 = pluckModuleFunction(options.modules, 'transformCode');\r\n  dataGenFns = pluckModuleFunction(options.modules, 'genData');\r\n  platformDirectives$1 = options.directives || {};\r\n  isPlatformReservedTag$1 = options.isReservedTag || no;\r\n  var code = ast ? genElement(ast) : '_c(\"div\")';\r\n  staticRenderFns = prevStaticRenderFns;\r\n  onceCount = prevOnceCount;\r\n  return {\r\n    render: (\"with(this){return \" + code + \"}\"),\r\n    staticRenderFns: currentStaticRenderFns\r\n  }\r\n}\r\n\r\nfunction genElement (el) {\r\n  if (el.staticRoot && !el.staticProcessed) {\r\n    return genStatic(el)\r\n  } else if (el.once && !el.onceProcessed) {\r\n    return genOnce(el)\r\n  } else if (el.for && !el.forProcessed) {\r\n    return genFor(el)\r\n  } else if (el.if && !el.ifProcessed) {\r\n    return genIf(el)\r\n  } else if (el.tag === 'template' && !el.slotTarget) {\r\n    return genChildren(el) || 'void 0'\r\n  } else if (el.tag === 'slot') {\r\n    return genSlot(el)\r\n  } else {\r\n    // component or element\r\n    var code;\r\n    if (el.component) {\r\n      code = genComponent(el.component, el);\r\n    } else {\r\n      var data = el.plain ? undefined : genData(el);\r\n\r\n      var children = el.inlineTemplate ? null : genChildren(el, true);\r\n      code = \"_c('\" + (el.tag) + \"'\" + (data ? (\",\" + data) : '') + (children ? (\",\" + children) : '') + \")\";\r\n    }\r\n    // module transforms\r\n    for (var i = 0; i < transforms$1.length; i++) {\r\n      code = transforms$1[i](el, code);\r\n    }\r\n    return code\r\n  }\r\n}\r\n\r\n// hoist static sub-trees out\r\nfunction genStatic (el) {\r\n  el.staticProcessed = true;\r\n  staticRenderFns.push((\"with(this){return \" + (genElement(el)) + \"}\"));\r\n  return (\"_m(\" + (staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + \")\")\r\n}\r\n\r\n// v-once\r\nfunction genOnce (el) {\r\n  el.onceProcessed = true;\r\n  if (el.if && !el.ifProcessed) {\r\n    return genIf(el)\r\n  } else if (el.staticInFor) {\r\n    var key = '';\r\n    var parent = el.parent;\r\n    while (parent) {\r\n      if (parent.for) {\r\n        key = parent.key;\r\n        break\r\n      }\r\n      parent = parent.parent;\r\n    }\r\n    if (!key) {\r\n      process.env.NODE_ENV !== 'production' && warn$3(\r\n        \"v-once can only be used inside v-for that is keyed. \"\r\n      );\r\n      return genElement(el)\r\n    }\r\n    return (\"_o(\" + (genElement(el)) + \",\" + (onceCount++) + (key ? (\",\" + key) : \"\") + \")\")\r\n  } else {\r\n    return genStatic(el)\r\n  }\r\n}\r\n\r\nfunction genIf (el) {\r\n  el.ifProcessed = true; // avoid recursion\r\n  return genIfConditions(el.ifConditions.slice())\r\n}\r\n\r\nfunction genIfConditions (conditions) {\r\n  if (!conditions.length) {\r\n    return '_e()'\r\n  }\r\n\r\n  var condition = conditions.shift();\r\n  if (condition.exp) {\r\n    return (\"(\" + (condition.exp) + \")?\" + (genTernaryExp(condition.block)) + \":\" + (genIfConditions(conditions)))\r\n  } else {\r\n    return (\"\" + (genTernaryExp(condition.block)))\r\n  }\r\n\r\n  // v-if with v-once should generate code like (a)?_m(0):_m(1)\r\n  function genTernaryExp (el) {\r\n    return el.once ? genOnce(el) : genElement(el)\r\n  }\r\n}\r\n\r\nfunction genFor (el) {\r\n  var exp = el.for;\r\n  var alias = el.alias;\r\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\r\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\r\n\r\n  if (\r\n    process.env.NODE_ENV !== 'production' &&\r\n    maybeComponent(el) && el.tag !== 'slot' && el.tag !== 'template' && !el.key\r\n  ) {\r\n    warn$3(\r\n      \"<\" + (el.tag) + \" v-for=\\\"\" + alias + \" in \" + exp + \"\\\">: component lists rendered with \" +\r\n      \"v-for should have explicit keys. \" +\r\n      \"See https://vuejs.org/guide/list.html#key for more info.\",\r\n      true /* tip */\r\n    );\r\n  }\r\n\r\n  el.forProcessed = true; // avoid recursion\r\n  return \"_l((\" + exp + \"),\" +\r\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\r\n      \"return \" + (genElement(el)) +\r\n    '})'\r\n}\r\n\r\nfunction genData (el) {\r\n  var data = '{';\r\n\r\n  // directives first.\r\n  // directives may mutate the el's other properties before they are generated.\r\n  var dirs = genDirectives(el);\r\n  if (dirs) { data += dirs + ','; }\r\n\r\n  // key\r\n  if (el.key) {\r\n    data += \"key:\" + (el.key) + \",\";\r\n  }\r\n  // ref\r\n  if (el.ref) {\r\n    data += \"ref:\" + (el.ref) + \",\";\r\n  }\r\n  if (el.refInFor) {\r\n    data += \"refInFor:true,\";\r\n  }\r\n  // pre\r\n  if (el.pre) {\r\n    data += \"pre:true,\";\r\n  }\r\n  // record original tag name for components using \"is\" attribute\r\n  if (el.component) {\r\n    data += \"tag:\\\"\" + (el.tag) + \"\\\",\";\r\n  }\r\n  // module data generation functions\r\n  for (var i = 0; i < dataGenFns.length; i++) {\r\n    data += dataGenFns[i](el);\r\n  }\r\n  // attributes\r\n  if (el.attrs) {\r\n    data += \"attrs:{\" + (genProps(el.attrs)) + \"},\";\r\n  }\r\n  // DOM props\r\n  if (el.props) {\r\n    data += \"domProps:{\" + (genProps(el.props)) + \"},\";\r\n  }\r\n  // event handlers\r\n  if (el.events) {\r\n    data += (genHandlers(el.events)) + \",\";\r\n  }\r\n  if (el.nativeEvents) {\r\n    data += (genHandlers(el.nativeEvents, true)) + \",\";\r\n  }\r\n  // slot target\r\n  if (el.slotTarget) {\r\n    data += \"slot:\" + (el.slotTarget) + \",\";\r\n  }\r\n  // scoped slots\r\n  if (el.scopedSlots) {\r\n    data += (genScopedSlots(el.scopedSlots)) + \",\";\r\n  }\r\n  // component v-model\r\n  if (el.model) {\r\n    data += \"model:{value:\" + (el.model.value) + \",callback:\" + (el.model.callback) + \",expression:\" + (el.model.expression) + \"},\";\r\n  }\r\n  // inline-template\r\n  if (el.inlineTemplate) {\r\n    var inlineTemplate = genInlineTemplate(el);\r\n    if (inlineTemplate) {\r\n      data += inlineTemplate + \",\";\r\n    }\r\n  }\r\n  data = data.replace(/,$/, '') + '}';\r\n  // v-bind data wrap\r\n  if (el.wrapData) {\r\n    data = el.wrapData(data);\r\n  }\r\n  return data\r\n}\r\n\r\nfunction genDirectives (el) {\r\n  var dirs = el.directives;\r\n  if (!dirs) { return }\r\n  var res = 'directives:[';\r\n  var hasRuntime = false;\r\n  var i, l, dir, needRuntime;\r\n  for (i = 0, l = dirs.length; i < l; i++) {\r\n    dir = dirs[i];\r\n    needRuntime = true;\r\n    var gen = platformDirectives$1[dir.name] || baseDirectives[dir.name];\r\n    if (gen) {\r\n      // compile-time directive that manipulates AST.\r\n      // returns true if it also needs a runtime counterpart.\r\n      needRuntime = !!gen(el, dir, warn$3);\r\n    }\r\n    if (needRuntime) {\r\n      hasRuntime = true;\r\n      res += \"{name:\\\"\" + (dir.name) + \"\\\",rawName:\\\"\" + (dir.rawName) + \"\\\"\" + (dir.value ? (\",value:(\" + (dir.value) + \"),expression:\" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (\",arg:\\\"\" + (dir.arg) + \"\\\"\") : '') + (dir.modifiers ? (\",modifiers:\" + (JSON.stringify(dir.modifiers))) : '') + \"},\";\r\n    }\r\n  }\r\n  if (hasRuntime) {\r\n    return res.slice(0, -1) + ']'\r\n  }\r\n}\r\n\r\nfunction genInlineTemplate (el) {\r\n  var ast = el.children[0];\r\n  if (process.env.NODE_ENV !== 'production' && (\r\n    el.children.length > 1 || ast.type !== 1\r\n  )) {\r\n    warn$3('Inline-template components must have exactly one child element.');\r\n  }\r\n  if (ast.type === 1) {\r\n    var inlineRenderFns = generate(ast, currentOptions);\r\n    return (\"inlineTemplate:{render:function(){\" + (inlineRenderFns.render) + \"},staticRenderFns:[\" + (inlineRenderFns.staticRenderFns.map(function (code) { return (\"function(){\" + code + \"}\"); }).join(',')) + \"]}\")\r\n  }\r\n}\r\n\r\nfunction genScopedSlots (slots) {\r\n  return (\"scopedSlots:_u([\" + (Object.keys(slots).map(function (key) { return genScopedSlot(key, slots[key]); }).join(',')) + \"])\")\r\n}\r\n\r\nfunction genScopedSlot (key, el) {\r\n  return \"[\" + key + \",function(\" + (String(el.attrsMap.scope)) + \"){\" +\r\n    \"return \" + (el.tag === 'template'\r\n      ? genChildren(el) || 'void 0'\r\n      : genElement(el)) + \"}]\"\r\n}\r\n\r\nfunction genChildren (el, checkSkip) {\r\n  var children = el.children;\r\n  if (children.length) {\r\n    var el$1 = children[0];\r\n    // optimize single v-for\r\n    if (children.length === 1 &&\r\n        el$1.for &&\r\n        el$1.tag !== 'template' &&\r\n        el$1.tag !== 'slot') {\r\n      return genElement(el$1)\r\n    }\r\n    var normalizationType = checkSkip ? getNormalizationType(children) : 0;\r\n    return (\"[\" + (children.map(genNode).join(',')) + \"]\" + (normalizationType ? (\",\" + normalizationType) : ''))\r\n  }\r\n}\r\n\r\n// determine the normalization needed for the children array.\r\n// 0: no normalization needed\r\n// 1: simple normalization needed (possible 1-level deep nested array)\r\n// 2: full normalization needed\r\nfunction getNormalizationType (children) {\r\n  var res = 0;\r\n  for (var i = 0; i < children.length; i++) {\r\n    var el = children[i];\r\n    if (el.type !== 1) {\r\n      continue\r\n    }\r\n    if (needsNormalization(el) ||\r\n        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {\r\n      res = 2;\r\n      break\r\n    }\r\n    if (maybeComponent(el) ||\r\n        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {\r\n      res = 1;\r\n    }\r\n  }\r\n  return res\r\n}\r\n\r\nfunction needsNormalization (el) {\r\n  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'\r\n}\r\n\r\nfunction maybeComponent (el) {\r\n  return !isPlatformReservedTag$1(el.tag)\r\n}\r\n\r\nfunction genNode (node) {\r\n  if (node.type === 1) {\r\n    return genElement(node)\r\n  } else {\r\n    return genText(node)\r\n  }\r\n}\r\n\r\nfunction genText (text) {\r\n  return (\"_v(\" + (text.type === 2\r\n    ? text.expression // no need for () because already wrapped in _s()\r\n    : transformSpecialNewlines(JSON.stringify(text.text))) + \")\")\r\n}\r\n\r\nfunction genSlot (el) {\r\n  var slotName = el.slotName || '\"default\"';\r\n  var children = genChildren(el);\r\n  var res = \"_t(\" + slotName + (children ? (\",\" + children) : '');\r\n  var attrs = el.attrs && (\"{\" + (el.attrs.map(function (a) { return ((camelize(a.name)) + \":\" + (a.value)); }).join(',')) + \"}\");\r\n  var bind$$1 = el.attrsMap['v-bind'];\r\n  if ((attrs || bind$$1) && !children) {\r\n    res += \",null\";\r\n  }\r\n  if (attrs) {\r\n    res += \",\" + attrs;\r\n  }\r\n  if (bind$$1) {\r\n    res += (attrs ? '' : ',null') + \",\" + bind$$1;\r\n  }\r\n  return res + ')'\r\n}\r\n\r\n// componentName is el.component, take it as argument to shun flow's pessimistic refinement\r\nfunction genComponent (componentName, el) {\r\n  var children = el.inlineTemplate ? null : genChildren(el, true);\r\n  return (\"_c(\" + componentName + \",\" + (genData(el)) + (children ? (\",\" + children) : '') + \")\")\r\n}\r\n\r\nfunction genProps (props) {\r\n  var res = '';\r\n  for (var i = 0; i < props.length; i++) {\r\n    var prop = props[i];\r\n    res += \"\\\"\" + (prop.name) + \"\\\":\" + (transformSpecialNewlines(prop.value)) + \",\";\r\n  }\r\n  return res.slice(0, -1)\r\n}\r\n\r\n// #3895, #4268\r\nfunction transformSpecialNewlines (text) {\r\n  return text\r\n    .replace(/\\u2028/g, '\\\\u2028')\r\n    .replace(/\\u2029/g, '\\\\u2029')\r\n}\r\n\r\n/*  */\r\n\r\n// these keywords should not appear inside expressions, but operators like\r\n// typeof, instanceof and in are allowed\r\nvar prohibitedKeywordRE = new RegExp('\\\\b' + (\r\n  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\r\n  'super,throw,while,yield,delete,export,import,return,switch,default,' +\r\n  'extends,finally,continue,debugger,function,arguments'\r\n).split(',').join('\\\\b|\\\\b') + '\\\\b');\r\n\r\n// these unary operators should not be used as property/method names\r\nvar unaryOperatorsRE = new RegExp('\\\\b' + (\r\n  'delete,typeof,void'\r\n).split(',').join('\\\\s*\\\\([^\\\\)]*\\\\)|\\\\b') + '\\\\s*\\\\([^\\\\)]*\\\\)');\r\n\r\n// check valid identifier for v-for\r\nvar identRE = /[A-Za-z_$][\\w$]*/;\r\n\r\n// strip strings in expressions\r\nvar stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\r\n\r\n// detect problematic expressions in a template\r\nfunction detectErrors (ast) {\r\n  var errors = [];\r\n  if (ast) {\r\n    checkNode(ast, errors);\r\n  }\r\n  return errors\r\n}\r\n\r\nfunction checkNode (node, errors) {\r\n  if (node.type === 1) {\r\n    for (var name in node.attrsMap) {\r\n      if (dirRE.test(name)) {\r\n        var value = node.attrsMap[name];\r\n        if (value) {\r\n          if (name === 'v-for') {\r\n            checkFor(node, (\"v-for=\\\"\" + value + \"\\\"\"), errors);\r\n          } else if (onRE.test(name)) {\r\n            checkEvent(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\r\n          } else {\r\n            checkExpression(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (node.children) {\r\n      for (var i = 0; i < node.children.length; i++) {\r\n        checkNode(node.children[i], errors);\r\n      }\r\n    }\r\n  } else if (node.type === 2) {\r\n    checkExpression(node.expression, node.text, errors);\r\n  }\r\n}\r\n\r\nfunction checkEvent (exp, text, errors) {\r\n  var keywordMatch = exp.replace(stripStringRE, '').match(unaryOperatorsRE);\r\n  if (keywordMatch) {\r\n    errors.push(\r\n      \"avoid using JavaScript unary operator as property name: \" +\r\n      \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + (text.trim())\r\n    );\r\n  }\r\n  checkExpression(exp, text, errors);\r\n}\r\n\r\nfunction checkFor (node, text, errors) {\r\n  checkExpression(node.for || '', text, errors);\r\n  checkIdentifier(node.alias, 'v-for alias', text, errors);\r\n  checkIdentifier(node.iterator1, 'v-for iterator', text, errors);\r\n  checkIdentifier(node.iterator2, 'v-for iterator', text, errors);\r\n}\r\n\r\nfunction checkIdentifier (ident, type, text, errors) {\r\n  if (typeof ident === 'string' && !identRE.test(ident)) {\r\n    errors.push((\"invalid \" + type + \" \\\"\" + ident + \"\\\" in expression: \" + (text.trim())));\r\n  }\r\n}\r\n\r\nfunction checkExpression (exp, text, errors) {\r\n  try {\r\n    new Function((\"return \" + exp));\r\n  } catch (e) {\r\n    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);\r\n    if (keywordMatch) {\r\n      errors.push(\r\n        \"avoid using JavaScript keyword as property name: \" +\r\n        \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + (text.trim())\r\n      );\r\n    } else {\r\n      errors.push((\"invalid expression: \" + (text.trim())));\r\n    }\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nfunction baseCompile (\r\n  template,\r\n  options\r\n) {\r\n  var ast = parse(template.trim(), options);\r\n  optimize(ast, options);\r\n  var code = generate(ast, options);\r\n  return {\r\n    ast: ast,\r\n    render: code.render,\r\n    staticRenderFns: code.staticRenderFns\r\n  }\r\n}\r\n\r\nfunction makeFunction (code, errors) {\r\n  try {\r\n    return new Function(code)\r\n  } catch (err) {\r\n    errors.push({ err: err, code: code });\r\n    return noop\r\n  }\r\n}\r\n\r\nfunction createCompiler (baseOptions) {\r\n  var functionCompileCache = Object.create(null);\r\n\r\n  function compile (\r\n    template,\r\n    options\r\n  ) {\r\n    var finalOptions = Object.create(baseOptions);\r\n    var errors = [];\r\n    var tips = [];\r\n    finalOptions.warn = function (msg, tip$$1) {\r\n      (tip$$1 ? tips : errors).push(msg);\r\n    };\r\n\r\n    if (options) {\r\n      // merge custom modules\r\n      if (options.modules) {\r\n        finalOptions.modules = (baseOptions.modules || []).concat(options.modules);\r\n      }\r\n      // merge custom directives\r\n      if (options.directives) {\r\n        finalOptions.directives = extend(\r\n          Object.create(baseOptions.directives),\r\n          options.directives\r\n        );\r\n      }\r\n      // copy other options\r\n      for (var key in options) {\r\n        if (key !== 'modules' && key !== 'directives') {\r\n          finalOptions[key] = options[key];\r\n        }\r\n      }\r\n    }\r\n\r\n    var compiled = baseCompile(template, finalOptions);\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      errors.push.apply(errors, detectErrors(compiled.ast));\r\n    }\r\n    compiled.errors = errors;\r\n    compiled.tips = tips;\r\n    return compiled\r\n  }\r\n\r\n  function compileToFunctions (\r\n    template,\r\n    options,\r\n    vm\r\n  ) {\r\n    options = options || {};\r\n\r\n    /* istanbul ignore if */\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      // detect possible CSP restriction\r\n      try {\r\n        new Function('return 1');\r\n      } catch (e) {\r\n        if (e.toString().match(/unsafe-eval|CSP/)) {\r\n          warn(\r\n            'It seems you are using the standalone build of Vue.js in an ' +\r\n            'environment with Content Security Policy that prohibits unsafe-eval. ' +\r\n            'The template compiler cannot work in this environment. Consider ' +\r\n            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +\r\n            'templates into render functions.'\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    // check cache\r\n    var key = options.delimiters\r\n      ? String(options.delimiters) + template\r\n      : template;\r\n    if (functionCompileCache[key]) {\r\n      return functionCompileCache[key]\r\n    }\r\n\r\n    // compile\r\n    var compiled = compile(template, options);\r\n\r\n    // check compilation errors/tips\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if (compiled.errors && compiled.errors.length) {\r\n        warn(\r\n          \"Error compiling template:\\n\\n\" + template + \"\\n\\n\" +\r\n          compiled.errors.map(function (e) { return (\"- \" + e); }).join('\\n') + '\\n',\r\n          vm\r\n        );\r\n      }\r\n      if (compiled.tips && compiled.tips.length) {\r\n        compiled.tips.forEach(function (msg) { return tip(msg, vm); });\r\n      }\r\n    }\r\n\r\n    // turn code into functions\r\n    var res = {};\r\n    var fnGenErrors = [];\r\n    res.render = makeFunction(compiled.render, fnGenErrors);\r\n    var l = compiled.staticRenderFns.length;\r\n    res.staticRenderFns = new Array(l);\r\n    for (var i = 0; i < l; i++) {\r\n      res.staticRenderFns[i] = makeFunction(compiled.staticRenderFns[i], fnGenErrors);\r\n    }\r\n\r\n    // check function generation errors.\r\n    // this should only happen if there is a bug in the compiler itself.\r\n    // mostly for codegen development use\r\n    /* istanbul ignore if */\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {\r\n        warn(\r\n          \"Failed to generate render function:\\n\\n\" +\r\n          fnGenErrors.map(function (ref) {\r\n            var err = ref.err;\r\n            var code = ref.code;\r\n\r\n            return ((err.toString()) + \" in\\n\\n\" + code + \"\\n\");\r\n        }).join('\\n'),\r\n          vm\r\n        );\r\n      }\r\n    }\r\n\r\n    return (functionCompileCache[key] = res)\r\n  }\r\n\r\n  return {\r\n    compile: compile,\r\n    compileToFunctions: compileToFunctions\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nfunction transformNode (el, options) {\r\n  var warn = options.warn || baseWarn;\r\n  var staticClass = getAndRemoveAttr(el, 'class');\r\n  if (process.env.NODE_ENV !== 'production' && staticClass) {\r\n    var expression = parseText(staticClass, options.delimiters);\r\n    if (expression) {\r\n      warn(\r\n        \"class=\\\"\" + staticClass + \"\\\": \" +\r\n        'Interpolation inside attributes has been removed. ' +\r\n        'Use v-bind or the colon shorthand instead. For example, ' +\r\n        'instead of <div class=\"{{ val }}\">, use <div :class=\"val\">.'\r\n      );\r\n    }\r\n  }\r\n  if (staticClass) {\r\n    el.staticClass = JSON.stringify(staticClass);\r\n  }\r\n  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\r\n  if (classBinding) {\r\n    el.classBinding = classBinding;\r\n  }\r\n}\r\n\r\nfunction genData$1 (el) {\r\n  var data = '';\r\n  if (el.staticClass) {\r\n    data += \"staticClass:\" + (el.staticClass) + \",\";\r\n  }\r\n  if (el.classBinding) {\r\n    data += \"class:\" + (el.classBinding) + \",\";\r\n  }\r\n  return data\r\n}\r\n\r\nvar klass$1 = {\r\n  staticKeys: ['staticClass'],\r\n  transformNode: transformNode,\r\n  genData: genData$1\r\n};\r\n\r\n/*  */\r\n\r\nfunction transformNode$1 (el, options) {\r\n  var warn = options.warn || baseWarn;\r\n  var staticStyle = getAndRemoveAttr(el, 'style');\r\n  if (staticStyle) {\r\n    /* istanbul ignore if */\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      var expression = parseText(staticStyle, options.delimiters);\r\n      if (expression) {\r\n        warn(\r\n          \"style=\\\"\" + staticStyle + \"\\\": \" +\r\n          'Interpolation inside attributes has been removed. ' +\r\n          'Use v-bind or the colon shorthand instead. For example, ' +\r\n          'instead of <div style=\"{{ val }}\">, use <div :style=\"val\">.'\r\n        );\r\n      }\r\n    }\r\n    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\r\n  }\r\n\r\n  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\r\n  if (styleBinding) {\r\n    el.styleBinding = styleBinding;\r\n  }\r\n}\r\n\r\nfunction genData$2 (el) {\r\n  var data = '';\r\n  if (el.staticStyle) {\r\n    data += \"staticStyle:\" + (el.staticStyle) + \",\";\r\n  }\r\n  if (el.styleBinding) {\r\n    data += \"style:(\" + (el.styleBinding) + \"),\";\r\n  }\r\n  return data\r\n}\r\n\r\nvar style$1 = {\r\n  staticKeys: ['staticStyle'],\r\n  transformNode: transformNode$1,\r\n  genData: genData$2\r\n};\r\n\r\nvar modules$1 = [\r\n  klass$1,\r\n  style$1\r\n];\r\n\r\n/*  */\r\n\r\nfunction text (el, dir) {\r\n  if (dir.value) {\r\n    addProp(el, 'textContent', (\"_s(\" + (dir.value) + \")\"));\r\n  }\r\n}\r\n\r\n/*  */\r\n\r\nfunction html (el, dir) {\r\n  if (dir.value) {\r\n    addProp(el, 'innerHTML', (\"_s(\" + (dir.value) + \")\"));\r\n  }\r\n}\r\n\r\nvar directives$1 = {\r\n  model: model,\r\n  text: text,\r\n  html: html\r\n};\r\n\r\n/*  */\r\n\r\nvar baseOptions = {\r\n  expectHTML: true,\r\n  modules: modules$1,\r\n  directives: directives$1,\r\n  isPreTag: isPreTag,\r\n  isUnaryTag: isUnaryTag,\r\n  mustUseProp: mustUseProp,\r\n  canBeLeftOpenTag: canBeLeftOpenTag,\r\n  isReservedTag: isReservedTag,\r\n  getTagNamespace: getTagNamespace,\r\n  staticKeys: genStaticKeys(modules$1)\r\n};\r\n\r\nvar ref$1 = createCompiler(baseOptions);\r\nvar compileToFunctions = ref$1.compileToFunctions;\r\n\r\n/*  */\r\n\r\nvar idToTemplate = cached(function (id) {\r\n  var el = query(id);\r\n  return el && el.innerHTML\r\n});\r\n\r\nvar mount = Vue$3.prototype.$mount;\r\nVue$3.prototype.$mount = function (\r\n  el,\r\n  hydrating\r\n) {\r\n  el = el && query(el);\r\n\r\n  /* istanbul ignore if */\r\n  if (el === document.body || el === document.documentElement) {\r\n    process.env.NODE_ENV !== 'production' && warn(\r\n      \"Do not mount Vue to <html> or <body> - mount to normal elements instead.\"\r\n    );\r\n    return this\r\n  }\r\n\r\n  var options = this.$options;\r\n  // resolve template/el and convert to render function\r\n  if (!options.render) {\r\n    var template = options.template;\r\n    if (template) {\r\n      if (typeof template === 'string') {\r\n        if (template.charAt(0) === '#') {\r\n          template = idToTemplate(template);\r\n          /* istanbul ignore if */\r\n          if (process.env.NODE_ENV !== 'production' && !template) {\r\n            warn(\r\n              (\"Template element not found or is empty: \" + (options.template)),\r\n              this\r\n            );\r\n          }\r\n        }\r\n      } else if (template.nodeType) {\r\n        template = template.innerHTML;\r\n      } else {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n          warn('invalid template option:' + template, this);\r\n        }\r\n        return this\r\n      }\r\n    } else if (el) {\r\n      template = getOuterHTML(el);\r\n    }\r\n    if (template) {\r\n      /* istanbul ignore if */\r\n      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\r\n        mark('compile');\r\n      }\r\n\r\n      var ref = compileToFunctions(template, {\r\n        shouldDecodeNewlines: shouldDecodeNewlines,\r\n        delimiters: options.delimiters\r\n      }, this);\r\n      var render = ref.render;\r\n      var staticRenderFns = ref.staticRenderFns;\r\n      options.render = render;\r\n      options.staticRenderFns = staticRenderFns;\r\n\r\n      /* istanbul ignore if */\r\n      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\r\n        mark('compile end');\r\n        measure(((this._name) + \" compile\"), 'compile', 'compile end');\r\n      }\r\n    }\r\n  }\r\n  return mount.call(this, el, hydrating)\r\n};\r\n\r\n/**\r\n * Get outerHTML of elements, taking care\r\n * of SVG elements in IE as well.\r\n */\r\nfunction getOuterHTML (el) {\r\n  if (el.outerHTML) {\r\n    return el.outerHTML\r\n  } else {\r\n    var container = document.createElement('div');\r\n    container.appendChild(el.cloneNode(true));\r\n    return container.innerHTML\r\n  }\r\n}\r\n\r\nVue$3.compile = compileToFunctions;\r\n\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (Vue$3);\r\n\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(7), __webpack_require__(13)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'app',\n  data() {\n    return {\n      msg: 'Welcome to Your Vue.js App'\n    };\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vQXBwLnZ1ZT84YmE1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0JBO1FBRUE7U0FDQTs7V0FHQTtBQUZBO0FBR0E7QUFOQSIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxyXG4gIDxkaXYgaWQ9XCJhcHBcIj5cclxuICAgIDxpbWcgc3JjPVwiLi9hc3NldHMvbG9nby5wbmdcIj5cclxuICAgIDxoMT48L2gxPlxyXG4gICAgPGgyPkVzc2VudGlhbCBMaW5rczwvaDI+XHJcbiAgICA8dWw+XHJcbiAgICAgIDxsaT48YSBocmVmPVwiaHR0cHM6Ly92dWVqcy5vcmdcIiB0YXJnZXQ9XCJfYmxhbmtcIj5Db3JlIERvY3M8L2E+PC9saT5cclxuICAgICAgPGxpPjxhIGhyZWY9XCJodHRwczovL2ZvcnVtLnZ1ZWpzLm9yZ1wiIHRhcmdldD1cIl9ibGFua1wiPkZvcnVtPC9hPjwvbGk+XHJcbiAgICAgIDxsaT48YSBocmVmPVwiaHR0cHM6Ly9naXR0ZXIuaW0vdnVlanMvdnVlXCIgdGFyZ2V0PVwiX2JsYW5rXCI+R2l0dGVyIENoYXQ8L2E+PC9saT5cclxuICAgICAgPGxpPjxhIGhyZWY9XCJodHRwczovL3R3aXR0ZXIuY29tL3Z1ZWpzXCIgdGFyZ2V0PVwiX2JsYW5rXCI+VHdpdHRlcjwvYT48L2xpPlxyXG4gICAgPC91bD5cclxuICAgIDxoMj5FY29zeXN0ZW08L2gyPlxyXG4gICAgPHVsPlxyXG4gICAgICA8bGk+PGEgaHJlZj1cImh0dHA6Ly9yb3V0ZXIudnVlanMub3JnL1wiIHRhcmdldD1cIl9ibGFua1wiPnZ1ZS1yb3V0ZXI8L2E+PC9saT5cclxuICAgICAgPGxpPjxhIGhyZWY9XCJodHRwOi8vdnVleC52dWVqcy5vcmcvXCIgdGFyZ2V0PVwiX2JsYW5rXCI+dnVleDwvYT48L2xpPlxyXG4gICAgICA8bGk+PGEgaHJlZj1cImh0dHA6Ly92dWUtbG9hZGVyLnZ1ZWpzLm9yZy9cIiB0YXJnZXQ9XCJfYmxhbmtcIj52dWUtbG9hZGVyPC9hPjwvbGk+XHJcbiAgICAgIDxsaT48YSBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL2F3ZXNvbWUtdnVlXCIgdGFyZ2V0PVwiX2JsYW5rXCI+YXdlc29tZS12dWU8L2E+PC9saT5cclxuICAgIDwvdWw+XHJcbiAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgbmFtZTogJ2FwcCcsXHJcbiAgZGF0YSAoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBtc2c6ICdXZWxjb21lIHRvIFlvdXIgVnVlLmpzIEFwcCdcclxuICAgIH1cclxuICB9XHJcbn1cclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGU+XHJcbiNhcHAge1xyXG4gIGZvbnQtZmFtaWx5OiAnQXZlbmlyJywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjtcclxuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcclxuICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBjb2xvcjogIzJjM2U1MDtcclxuICBtYXJnaW4tdG9wOiA2MHB4O1xyXG59XHJcblxyXG5oMSwgaDIge1xyXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XHJcbn1cclxuXHJcbnVsIHtcclxuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XHJcbiAgcGFkZGluZzogMDtcclxufVxyXG5cclxubGkge1xyXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICBtYXJnaW46IDAgMTBweDtcclxufVxyXG5cclxuYSB7XHJcbiAgY29sb3I6ICM0MmI5ODM7XHJcbn1cclxuPC9zdHlsZT5cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIEFwcC52dWU/M2NkMGIwNmIiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _vue = __webpack_require__(1);\n\nvar _vue2 = _interopRequireDefault(_vue);\n\nvar _App = __webpack_require__(0);\n\nvar _App2 = _interopRequireDefault(_App);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nnew _vue2.default({\n  el: '#app',\n  render: function render(h) {\n    return h(_App2.default);\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi9qcy9tYWluLmpzP2E1NjUiXSwibmFtZXMiOlsiZWwiLCJyZW5kZXIiLCJoIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0FBQ0E7Ozs7OztBQUVBLGtCQUFRO0FBQ05BLE1BQUksTUFERTtBQUVOQyxVQUFRO0FBQUEsV0FBS0MsZ0JBQUw7QUFBQTtBQUZGLENBQVIiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWdWUgZnJvbSAndnVlJ1xyXG5pbXBvcnQgQXBwIGZyb20gJy4vQXBwLnZ1ZSdcclxuXHJcbm5ldyBWdWUoe1xyXG4gIGVsOiAnI2FwcCcsXHJcbiAgcmVuZGVyOiBoID0+IGgoQXBwKVxyXG59KVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbWFpbi9qcy9tYWluLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(5)();\n// imports\n\n\n// module\nexports.push([module.i, \"\\n#app {\\r\\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\\r\\n  -webkit-font-smoothing: antialiased;\\r\\n  -moz-osx-font-smoothing: grayscale;\\r\\n  text-align: center;\\r\\n  color: #2c3e50;\\r\\n  margin-top: 60px;\\n}\\nh1, h2 {\\r\\n  font-weight: normal;\\n}\\nul {\\r\\n  list-style-type: none;\\r\\n  padding: 0;\\n}\\nli {\\r\\n  display: inline-block;\\r\\n  margin: 0 10px;\\n}\\na {\\r\\n  color: #42b983;\\n}\\r\\n\", \"\", {\"version\":3,\"sources\":[\"/./src/main/js/App.vue?3cd0b06b\"],\"names\":[],\"mappings\":\";AAiCA;EACA,oDAAA;EACA,oCAAA;EACA,mCAAA;EACA,mBAAA;EACA,eAAA;EACA,iBAAA;CACA;AAEA;EACA,oBAAA;CACA;AAEA;EACA,sBAAA;EACA,WAAA;CACA;AAEA;EACA,sBAAA;EACA,eAAA;CACA;AAEA;EACA,eAAA;CACA\",\"file\":\"App.vue\",\"sourcesContent\":[\"<template>\\r\\n  <div id=\\\"app\\\">\\r\\n    <img src=\\\"./assets/logo.png\\\">\\r\\n    <h1></h1>\\r\\n    <h2>Essential Links</h2>\\r\\n    <ul>\\r\\n      <li><a href=\\\"https://vuejs.org\\\" target=\\\"_blank\\\">Core Docs</a></li>\\r\\n      <li><a href=\\\"https://forum.vuejs.org\\\" target=\\\"_blank\\\">Forum</a></li>\\r\\n      <li><a href=\\\"https://gitter.im/vuejs/vue\\\" target=\\\"_blank\\\">Gitter Chat</a></li>\\r\\n      <li><a href=\\\"https://twitter.com/vuejs\\\" target=\\\"_blank\\\">Twitter</a></li>\\r\\n    </ul>\\r\\n    <h2>Ecosystem</h2>\\r\\n    <ul>\\r\\n      <li><a href=\\\"http://router.vuejs.org/\\\" target=\\\"_blank\\\">vue-router</a></li>\\r\\n      <li><a href=\\\"http://vuex.vuejs.org/\\\" target=\\\"_blank\\\">vuex</a></li>\\r\\n      <li><a href=\\\"http://vue-loader.vuejs.org/\\\" target=\\\"_blank\\\">vue-loader</a></li>\\r\\n      <li><a href=\\\"https://github.com/vuejs/awesome-vue\\\" target=\\\"_blank\\\">awesome-vue</a></li>\\r\\n    </ul>\\r\\n  </div>\\r\\n</template>\\r\\n\\r\\n<script>\\r\\nexport default {\\r\\n  name: 'app',\\r\\n  data () {\\r\\n    return {\\r\\n      msg: 'Welcome to Your Vue.js App'\\r\\n    }\\r\\n  }\\r\\n}\\r\\n</script>\\r\\n\\r\\n<style>\\r\\n#app {\\r\\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\\r\\n  -webkit-font-smoothing: antialiased;\\r\\n  -moz-osx-font-smoothing: grayscale;\\r\\n  text-align: center;\\r\\n  color: #2c3e50;\\r\\n  margin-top: 60px;\\r\\n}\\r\\n\\r\\nh1, h2 {\\r\\n  font-weight: normal;\\r\\n}\\r\\n\\r\\nul {\\r\\n  list-style-type: none;\\r\\n  padding: 0;\\r\\n}\\r\\n\\r\\nli {\\r\\n  display: inline-block;\\r\\n  margin: 0 10px;\\r\\n}\\r\\n\\r\\na {\\r\\n  color: #42b983;\\r\\n}\\r\\n</style>\\r\\n\"],\"sourceRoot\":\"webpack://\"}]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi9qcy9BcHAudnVlPzNhMDIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7O0FBR0E7QUFDQSxpQ0FBa0MsMERBQTBELDBDQUEwQyx5Q0FBeUMseUJBQXlCLHFCQUFxQix1QkFBdUIsR0FBRyxVQUFVLDBCQUEwQixHQUFHLE1BQU0sNEJBQTRCLGlCQUFpQixHQUFHLE1BQU0sNEJBQTRCLHFCQUFxQixHQUFHLEtBQUsscUJBQXFCLEdBQUcsWUFBWSxrRkFBa0YsTUFBTSxXQUFXLFdBQVcsV0FBVyxXQUFXLFVBQVUsV0FBVyxLQUFLLEtBQUssV0FBVyxLQUFLLEtBQUssV0FBVyxVQUFVLEtBQUssS0FBSyxXQUFXLFVBQVUsS0FBSyxLQUFLLFVBQVUsMCtCQUEwK0IsaUNBQWlDLGdCQUFnQixvREFBb0QsT0FBTyxLQUFLLHNDQUFzQywwREFBMEQsMENBQTBDLHlDQUF5Qyx5QkFBeUIscUJBQXFCLHVCQUF1QixLQUFLLGdCQUFnQiwwQkFBMEIsS0FBSyxZQUFZLDRCQUE0QixpQkFBaUIsS0FBSyxZQUFZLDRCQUE0QixxQkFBcUIsS0FBSyxXQUFXLHFCQUFxQixLQUFLLDZDQUE2Qzs7QUFFaHhFIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKCk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcXG4jYXBwIHtcXHJcXG4gIGZvbnQtZmFtaWx5OiAnQXZlbmlyJywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjtcXHJcXG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xcclxcbiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcXHJcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gIGNvbG9yOiAjMmMzZTUwO1xcclxcbiAgbWFyZ2luLXRvcDogNjBweDtcXG59XFxuaDEsIGgyIHtcXHJcXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxufVxcbnVsIHtcXHJcXG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcXHJcXG4gIHBhZGRpbmc6IDA7XFxufVxcbmxpIHtcXHJcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXHJcXG4gIG1hcmdpbjogMCAxMHB4O1xcbn1cXG5hIHtcXHJcXG4gIGNvbG9yOiAjNDJiOTgzO1xcbn1cXHJcXG5cIiwgXCJcIiwge1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wiLy4vc3JjL21haW4vanMvQXBwLnZ1ZT8zY2QwYjA2YlwiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiO0FBaUNBO0VBQ0Esb0RBQUE7RUFDQSxvQ0FBQTtFQUNBLG1DQUFBO0VBQ0EsbUJBQUE7RUFDQSxlQUFBO0VBQ0EsaUJBQUE7Q0FDQTtBQUVBO0VBQ0Esb0JBQUE7Q0FDQTtBQUVBO0VBQ0Esc0JBQUE7RUFDQSxXQUFBO0NBQ0E7QUFFQTtFQUNBLHNCQUFBO0VBQ0EsZUFBQTtDQUNBO0FBRUE7RUFDQSxlQUFBO0NBQ0FcIixcImZpbGVcIjpcIkFwcC52dWVcIixcInNvdXJjZXNDb250ZW50XCI6W1wiPHRlbXBsYXRlPlxcclxcbiAgPGRpdiBpZD1cXFwiYXBwXFxcIj5cXHJcXG4gICAgPGltZyBzcmM9XFxcIi4vYXNzZXRzL2xvZ28ucG5nXFxcIj5cXHJcXG4gICAgPGgxPjwvaDE+XFxyXFxuICAgIDxoMj5Fc3NlbnRpYWwgTGlua3M8L2gyPlxcclxcbiAgICA8dWw+XFxyXFxuICAgICAgPGxpPjxhIGhyZWY9XFxcImh0dHBzOi8vdnVlanMub3JnXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+Q29yZSBEb2NzPC9hPjwvbGk+XFxyXFxuICAgICAgPGxpPjxhIGhyZWY9XFxcImh0dHBzOi8vZm9ydW0udnVlanMub3JnXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+Rm9ydW08L2E+PC9saT5cXHJcXG4gICAgICA8bGk+PGEgaHJlZj1cXFwiaHR0cHM6Ly9naXR0ZXIuaW0vdnVlanMvdnVlXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+R2l0dGVyIENoYXQ8L2E+PC9saT5cXHJcXG4gICAgICA8bGk+PGEgaHJlZj1cXFwiaHR0cHM6Ly90d2l0dGVyLmNvbS92dWVqc1xcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPlR3aXR0ZXI8L2E+PC9saT5cXHJcXG4gICAgPC91bD5cXHJcXG4gICAgPGgyPkVjb3N5c3RlbTwvaDI+XFxyXFxuICAgIDx1bD5cXHJcXG4gICAgICA8bGk+PGEgaHJlZj1cXFwiaHR0cDovL3JvdXRlci52dWVqcy5vcmcvXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+dnVlLXJvdXRlcjwvYT48L2xpPlxcclxcbiAgICAgIDxsaT48YSBocmVmPVxcXCJodHRwOi8vdnVleC52dWVqcy5vcmcvXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+dnVleDwvYT48L2xpPlxcclxcbiAgICAgIDxsaT48YSBocmVmPVxcXCJodHRwOi8vdnVlLWxvYWRlci52dWVqcy5vcmcvXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+dnVlLWxvYWRlcjwvYT48L2xpPlxcclxcbiAgICAgIDxsaT48YSBocmVmPVxcXCJodHRwczovL2dpdGh1Yi5jb20vdnVlanMvYXdlc29tZS12dWVcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5hd2Vzb21lLXZ1ZTwvYT48L2xpPlxcclxcbiAgICA8L3VsPlxcclxcbiAgPC9kaXY+XFxyXFxuPC90ZW1wbGF0ZT5cXHJcXG5cXHJcXG48c2NyaXB0PlxcclxcbmV4cG9ydCBkZWZhdWx0IHtcXHJcXG4gIG5hbWU6ICdhcHAnLFxcclxcbiAgZGF0YSAoKSB7XFxyXFxuICAgIHJldHVybiB7XFxyXFxuICAgICAgbXNnOiAnV2VsY29tZSB0byBZb3VyIFZ1ZS5qcyBBcHAnXFxyXFxuICAgIH1cXHJcXG4gIH1cXHJcXG59XFxyXFxuPC9zY3JpcHQ+XFxyXFxuXFxyXFxuPHN0eWxlPlxcclxcbiNhcHAge1xcclxcbiAgZm9udC1mYW1pbHk6ICdBdmVuaXInLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmO1xcclxcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XFxyXFxuICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xcclxcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgY29sb3I6ICMyYzNlNTA7XFxyXFxuICBtYXJnaW4tdG9wOiA2MHB4O1xcclxcbn1cXHJcXG5cXHJcXG5oMSwgaDIge1xcclxcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXHJcXG59XFxyXFxuXFxyXFxudWwge1xcclxcbiAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xcclxcbiAgcGFkZGluZzogMDtcXHJcXG59XFxyXFxuXFxyXFxubGkge1xcclxcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgbWFyZ2luOiAwIDEwcHg7XFxyXFxufVxcclxcblxcclxcbmEge1xcclxcbiAgY29sb3I6ICM0MmI5ODM7XFxyXFxufVxcclxcbjwvc3R5bGU+XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwid2VicGFjazovL1wifV0pO1xuXG4vLyBleHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi9+L3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtMzkwMDNiNmZcIixcInNjb3BlZFwiOmZhbHNlLFwiaGFzSW5saW5lQ29uZmlnXCI6ZmFsc2V9IS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc3JjL21haW4vanMvQXBwLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

eval("/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n\tvar list = [];\r\n\r\n\t// return the list of modules as css string\r\n\tlist.toString = function toString() {\r\n\t\tvar result = [];\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar item = this[i];\r\n\t\t\tif(item[2]) {\r\n\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(item[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result.join(\"\");\r\n\t};\r\n\r\n\t// import a list of modules into the list\r\n\tlist.i = function(modules, mediaQuery) {\r\n\t\tif(typeof modules === \"string\")\r\n\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\tvar alreadyImportedModules = {};\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar id = this[i][0];\r\n\t\t\tif(typeof id === \"number\")\r\n\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t}\r\n\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\tvar item = modules[i];\r\n\t\t\t// skip already imported module\r\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t}\r\n\t\t\t\tlist.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn list;\r\n};\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzP2RhMDQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBO0FBQ0Esd0NBQXdDLGdCQUFnQjtBQUN4RCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxyXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcclxuKi9cclxuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcclxuXHR2YXIgbGlzdCA9IFtdO1xyXG5cclxuXHQvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXHJcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xyXG5cdFx0dmFyIHJlc3VsdCA9IFtdO1xyXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGl0ZW0gPSB0aGlzW2ldO1xyXG5cdFx0XHRpZihpdGVtWzJdKSB7XHJcblx0XHRcdFx0cmVzdWx0LnB1c2goXCJAbWVkaWEgXCIgKyBpdGVtWzJdICsgXCJ7XCIgKyBpdGVtWzFdICsgXCJ9XCIpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHJlc3VsdC5wdXNoKGl0ZW1bMV0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gcmVzdWx0LmpvaW4oXCJcIik7XHJcblx0fTtcclxuXHJcblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcclxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XHJcblx0XHRpZih0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIilcclxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xyXG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XHJcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcclxuXHRcdFx0XHRhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XHJcblx0XHR9XHJcblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpdGVtID0gbW9kdWxlc1tpXTtcclxuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxyXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xyXG5cdFx0XHQvLyAgd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxyXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxyXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xyXG5cdFx0XHRcdGlmKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcclxuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xyXG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XHJcblx0XHRcdFx0XHRpdGVtWzJdID0gXCIoXCIgKyBpdGVtWzJdICsgXCIpIGFuZCAoXCIgKyBtZWRpYVF1ZXJ5ICsgXCIpXCI7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcblx0cmV0dXJuIGxpc3Q7XHJcbn07XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1xuLy8gbW9kdWxlIGlkID0gNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__.p + \"logo.png?82b9c7a5a3f405032b1db71a25f67021\";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi9qcy9hc3NldHMvbG9nby5wbmc/OWU5MyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwibG9nby5wbmc/ODJiOWM3YTVhM2Y0MDUwMzJiMWRiNzFhMjVmNjcwMjFcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9tYWluL2pzL2Fzc2V0cy9sb2dvLnBuZ1xuLy8gbW9kdWxlIGlkID0gNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 7 */
/***/ (function(module, exports) {

eval("// shim for using process in browser\r\nvar process = module.exports = {};\r\n\r\n// cached from whatever global is present so that test runners that stub it\r\n// don't break things.  But we need to wrap it in a try catch in case it is\r\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\r\n// function because try/catches deoptimize in certain engines.\r\n\r\nvar cachedSetTimeout;\r\nvar cachedClearTimeout;\r\n\r\nfunction defaultSetTimout() {\r\n    throw new Error('setTimeout has not been defined');\r\n}\r\nfunction defaultClearTimeout () {\r\n    throw new Error('clearTimeout has not been defined');\r\n}\r\n(function () {\r\n    try {\r\n        if (typeof setTimeout === 'function') {\r\n            cachedSetTimeout = setTimeout;\r\n        } else {\r\n            cachedSetTimeout = defaultSetTimout;\r\n        }\r\n    } catch (e) {\r\n        cachedSetTimeout = defaultSetTimout;\r\n    }\r\n    try {\r\n        if (typeof clearTimeout === 'function') {\r\n            cachedClearTimeout = clearTimeout;\r\n        } else {\r\n            cachedClearTimeout = defaultClearTimeout;\r\n        }\r\n    } catch (e) {\r\n        cachedClearTimeout = defaultClearTimeout;\r\n    }\r\n} ())\r\nfunction runTimeout(fun) {\r\n    if (cachedSetTimeout === setTimeout) {\r\n        //normal enviroments in sane situations\r\n        return setTimeout(fun, 0);\r\n    }\r\n    // if setTimeout wasn't available but was latter defined\r\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\r\n        cachedSetTimeout = setTimeout;\r\n        return setTimeout(fun, 0);\r\n    }\r\n    try {\r\n        // when when somebody has screwed with setTimeout but no I.E. maddness\r\n        return cachedSetTimeout(fun, 0);\r\n    } catch(e){\r\n        try {\r\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\r\n            return cachedSetTimeout.call(null, fun, 0);\r\n        } catch(e){\r\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\r\n            return cachedSetTimeout.call(this, fun, 0);\r\n        }\r\n    }\r\n\r\n\r\n}\r\nfunction runClearTimeout(marker) {\r\n    if (cachedClearTimeout === clearTimeout) {\r\n        //normal enviroments in sane situations\r\n        return clearTimeout(marker);\r\n    }\r\n    // if clearTimeout wasn't available but was latter defined\r\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\r\n        cachedClearTimeout = clearTimeout;\r\n        return clearTimeout(marker);\r\n    }\r\n    try {\r\n        // when when somebody has screwed with setTimeout but no I.E. maddness\r\n        return cachedClearTimeout(marker);\r\n    } catch (e){\r\n        try {\r\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\r\n            return cachedClearTimeout.call(null, marker);\r\n        } catch (e){\r\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\r\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\r\n            return cachedClearTimeout.call(this, marker);\r\n        }\r\n    }\r\n\r\n\r\n\r\n}\r\nvar queue = [];\r\nvar draining = false;\r\nvar currentQueue;\r\nvar queueIndex = -1;\r\n\r\nfunction cleanUpNextTick() {\r\n    if (!draining || !currentQueue) {\r\n        return;\r\n    }\r\n    draining = false;\r\n    if (currentQueue.length) {\r\n        queue = currentQueue.concat(queue);\r\n    } else {\r\n        queueIndex = -1;\r\n    }\r\n    if (queue.length) {\r\n        drainQueue();\r\n    }\r\n}\r\n\r\nfunction drainQueue() {\r\n    if (draining) {\r\n        return;\r\n    }\r\n    var timeout = runTimeout(cleanUpNextTick);\r\n    draining = true;\r\n\r\n    var len = queue.length;\r\n    while(len) {\r\n        currentQueue = queue;\r\n        queue = [];\r\n        while (++queueIndex < len) {\r\n            if (currentQueue) {\r\n                currentQueue[queueIndex].run();\r\n            }\r\n        }\r\n        queueIndex = -1;\r\n        len = queue.length;\r\n    }\r\n    currentQueue = null;\r\n    draining = false;\r\n    runClearTimeout(timeout);\r\n}\r\n\r\nprocess.nextTick = function (fun) {\r\n    var args = new Array(arguments.length - 1);\r\n    if (arguments.length > 1) {\r\n        for (var i = 1; i < arguments.length; i++) {\r\n            args[i - 1] = arguments[i];\r\n        }\r\n    }\r\n    queue.push(new Item(fun, args));\r\n    if (queue.length === 1 && !draining) {\r\n        runTimeout(drainQueue);\r\n    }\r\n};\r\n\r\n// v8 likes predictible objects\r\nfunction Item(fun, array) {\r\n    this.fun = fun;\r\n    this.array = array;\r\n}\r\nItem.prototype.run = function () {\r\n    this.fun.apply(null, this.array);\r\n};\r\nprocess.title = 'browser';\r\nprocess.browser = true;\r\nprocess.env = {};\r\nprocess.argv = [];\r\nprocess.version = ''; // empty string to avoid regexp issues\r\nprocess.versions = {};\r\n\r\nfunction noop() {}\r\n\r\nprocess.on = noop;\r\nprocess.addListener = noop;\r\nprocess.once = noop;\r\nprocess.off = noop;\r\nprocess.removeListener = noop;\r\nprocess.removeAllListeners = noop;\r\nprocess.emit = noop;\r\n\r\nprocess.binding = function (name) {\r\n    throw new Error('process.binding is not supported');\r\n};\r\n\r\nprocess.cwd = function () { return '/' };\r\nprocess.chdir = function (dir) {\r\n    throw new Error('process.chdir is not supported');\r\n};\r\nprocess.umask = function() { return 0; };\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 8 */
/***/ (function(module, exports) {

eval("// this module is a runtime utility for cleaner component module output and will\r\n// be included in the final webpack user bundle\r\n\r\nmodule.exports = function normalizeComponent (\r\n  rawScriptExports,\r\n  compiledTemplate,\r\n  scopeId,\r\n  cssModules\r\n) {\r\n  var esModule\r\n  var scriptExports = rawScriptExports = rawScriptExports || {}\r\n\r\n  // ES6 modules interop\r\n  var type = typeof rawScriptExports.default\r\n  if (type === 'object' || type === 'function') {\r\n    esModule = rawScriptExports\r\n    scriptExports = rawScriptExports.default\r\n  }\r\n\r\n  // Vue.extend constructor export interop\r\n  var options = typeof scriptExports === 'function'\r\n    ? scriptExports.options\r\n    : scriptExports\r\n\r\n  // render functions\r\n  if (compiledTemplate) {\r\n    options.render = compiledTemplate.render\r\n    options.staticRenderFns = compiledTemplate.staticRenderFns\r\n  }\r\n\r\n  // scopedId\r\n  if (scopeId) {\r\n    options._scopeId = scopeId\r\n  }\r\n\r\n  // inject cssModules\r\n  if (cssModules) {\r\n    var computed = Object.create(options.computed || null)\r\n    Object.keys(cssModules).forEach(function (key) {\r\n      var module = cssModules[key]\r\n      computed[key] = function () { return module }\r\n    })\r\n    options.computed = computed\r\n  }\r\n\r\n  return {\r\n    esModule: esModule,\r\n    exports: scriptExports,\r\n    options: options\r\n  }\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyLmpzP2Q0ZjMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkMsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0aGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxyXG4vLyBiZSBpbmNsdWRlZCBpbiB0aGUgZmluYWwgd2VicGFjayB1c2VyIGJ1bmRsZVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQgKFxyXG4gIHJhd1NjcmlwdEV4cG9ydHMsXHJcbiAgY29tcGlsZWRUZW1wbGF0ZSxcclxuICBzY29wZUlkLFxyXG4gIGNzc01vZHVsZXNcclxuKSB7XHJcbiAgdmFyIGVzTW9kdWxlXHJcbiAgdmFyIHNjcmlwdEV4cG9ydHMgPSByYXdTY3JpcHRFeHBvcnRzID0gcmF3U2NyaXB0RXhwb3J0cyB8fCB7fVxyXG5cclxuICAvLyBFUzYgbW9kdWxlcyBpbnRlcm9wXHJcbiAgdmFyIHR5cGUgPSB0eXBlb2YgcmF3U2NyaXB0RXhwb3J0cy5kZWZhdWx0XHJcbiAgaWYgKHR5cGUgPT09ICdvYmplY3QnIHx8IHR5cGUgPT09ICdmdW5jdGlvbicpIHtcclxuICAgIGVzTW9kdWxlID0gcmF3U2NyaXB0RXhwb3J0c1xyXG4gICAgc2NyaXB0RXhwb3J0cyA9IHJhd1NjcmlwdEV4cG9ydHMuZGVmYXVsdFxyXG4gIH1cclxuXHJcbiAgLy8gVnVlLmV4dGVuZCBjb25zdHJ1Y3RvciBleHBvcnQgaW50ZXJvcFxyXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcclxuICAgID8gc2NyaXB0RXhwb3J0cy5vcHRpb25zXHJcbiAgICA6IHNjcmlwdEV4cG9ydHNcclxuXHJcbiAgLy8gcmVuZGVyIGZ1bmN0aW9uc1xyXG4gIGlmIChjb21waWxlZFRlbXBsYXRlKSB7XHJcbiAgICBvcHRpb25zLnJlbmRlciA9IGNvbXBpbGVkVGVtcGxhdGUucmVuZGVyXHJcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IGNvbXBpbGVkVGVtcGxhdGUuc3RhdGljUmVuZGVyRm5zXHJcbiAgfVxyXG5cclxuICAvLyBzY29wZWRJZFxyXG4gIGlmIChzY29wZUlkKSB7XHJcbiAgICBvcHRpb25zLl9zY29wZUlkID0gc2NvcGVJZFxyXG4gIH1cclxuXHJcbiAgLy8gaW5qZWN0IGNzc01vZHVsZXNcclxuICBpZiAoY3NzTW9kdWxlcykge1xyXG4gICAgdmFyIGNvbXB1dGVkID0gT2JqZWN0LmNyZWF0ZShvcHRpb25zLmNvbXB1dGVkIHx8IG51bGwpXHJcbiAgICBPYmplY3Qua2V5cyhjc3NNb2R1bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgdmFyIG1vZHVsZSA9IGNzc01vZHVsZXNba2V5XVxyXG4gICAgICBjb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cclxuICAgIH0pXHJcbiAgICBvcHRpb25zLmNvbXB1dGVkID0gY29tcHV0ZWRcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBlc01vZHVsZTogZXNNb2R1bGUsXHJcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxyXG4gICAgb3B0aW9uczogb3B0aW9uc1xyXG4gIH1cclxufVxyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXIuanNcbi8vIG1vZHVsZSBpZCA9IDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _vm._m(0)\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    attrs: {\n      \"id\": \"app\"\n    }\n  }, [_c('img', {\n    attrs: {\n      \"src\": __webpack_require__(6)\n    }\n  }), _vm._v(\" \"), _c('h1'), _vm._v(\" \"), _c('h2', [_vm._v(\"Essential Links\")]), _vm._v(\" \"), _c('ul', [_c('li', [_c('a', {\n    attrs: {\n      \"href\": \"https://vuejs.org\",\n      \"target\": \"_blank\"\n    }\n  }, [_vm._v(\"Core Docs\")])]), _vm._v(\" \"), _c('li', [_c('a', {\n    attrs: {\n      \"href\": \"https://forum.vuejs.org\",\n      \"target\": \"_blank\"\n    }\n  }, [_vm._v(\"Forum\")])]), _vm._v(\" \"), _c('li', [_c('a', {\n    attrs: {\n      \"href\": \"https://gitter.im/vuejs/vue\",\n      \"target\": \"_blank\"\n    }\n  }, [_vm._v(\"Gitter Chat\")])]), _vm._v(\" \"), _c('li', [_c('a', {\n    attrs: {\n      \"href\": \"https://twitter.com/vuejs\",\n      \"target\": \"_blank\"\n    }\n  }, [_vm._v(\"Twitter\")])])]), _vm._v(\" \"), _c('h2', [_vm._v(\"Ecosystem\")]), _vm._v(\" \"), _c('ul', [_c('li', [_c('a', {\n    attrs: {\n      \"href\": \"http://router.vuejs.org/\",\n      \"target\": \"_blank\"\n    }\n  }, [_vm._v(\"vue-router\")])]), _vm._v(\" \"), _c('li', [_c('a', {\n    attrs: {\n      \"href\": \"http://vuex.vuejs.org/\",\n      \"target\": \"_blank\"\n    }\n  }, [_vm._v(\"vuex\")])]), _vm._v(\" \"), _c('li', [_c('a', {\n    attrs: {\n      \"href\": \"http://vue-loader.vuejs.org/\",\n      \"target\": \"_blank\"\n    }\n  }, [_vm._v(\"vue-loader\")])]), _vm._v(\" \"), _c('li', [_c('a', {\n    attrs: {\n      \"href\": \"https://github.com/vuejs/awesome-vue\",\n      \"target\": \"_blank\"\n    }\n  }, [_vm._v(\"awesome-vue\")])])])])\n}]}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-39003b6f\", module.exports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi9qcy9BcHAudnVlP2U2M2EiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCLG1CQUFtQixhQUFhLDBCQUEwQjtBQUMxRTtBQUNBLENBQUMsK0JBQStCLGFBQWEsMEJBQTBCO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24gKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7XG4gIHJldHVybiBfdm0uX20oMClcbn0sc3RhdGljUmVuZGVyRm5zOiBbZnVuY3Rpb24gKCl7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7XG4gIHJldHVybiBfYygnZGl2Jywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcImlkXCI6IFwiYXBwXCJcbiAgICB9XG4gIH0sIFtfYygnaW1nJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcInNyY1wiOiByZXF1aXJlKFwiLi9hc3NldHMvbG9nby5wbmdcIilcbiAgICB9XG4gIH0pLCBfdm0uX3YoXCIgXCIpLCBfYygnaDEnKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ2gyJywgW192bS5fdihcIkVzc2VudGlhbCBMaW5rc1wiKV0pLCBfdm0uX3YoXCIgXCIpLCBfYygndWwnLCBbX2MoJ2xpJywgW19jKCdhJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcImhyZWZcIjogXCJodHRwczovL3Z1ZWpzLm9yZ1wiLFxuICAgICAgXCJ0YXJnZXRcIjogXCJfYmxhbmtcIlxuICAgIH1cbiAgfSwgW192bS5fdihcIkNvcmUgRG9jc1wiKV0pXSksIF92bS5fdihcIiBcIiksIF9jKCdsaScsIFtfYygnYScsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJocmVmXCI6IFwiaHR0cHM6Ly9mb3J1bS52dWVqcy5vcmdcIixcbiAgICAgIFwidGFyZ2V0XCI6IFwiX2JsYW5rXCJcbiAgICB9XG4gIH0sIFtfdm0uX3YoXCJGb3J1bVwiKV0pXSksIF92bS5fdihcIiBcIiksIF9jKCdsaScsIFtfYygnYScsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJocmVmXCI6IFwiaHR0cHM6Ly9naXR0ZXIuaW0vdnVlanMvdnVlXCIsXG4gICAgICBcInRhcmdldFwiOiBcIl9ibGFua1wiXG4gICAgfVxuICB9LCBbX3ZtLl92KFwiR2l0dGVyIENoYXRcIildKV0pLCBfdm0uX3YoXCIgXCIpLCBfYygnbGknLCBbX2MoJ2EnLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwiaHJlZlwiOiBcImh0dHBzOi8vdHdpdHRlci5jb20vdnVlanNcIixcbiAgICAgIFwidGFyZ2V0XCI6IFwiX2JsYW5rXCJcbiAgICB9XG4gIH0sIFtfdm0uX3YoXCJUd2l0dGVyXCIpXSldKV0pLCBfdm0uX3YoXCIgXCIpLCBfYygnaDInLCBbX3ZtLl92KFwiRWNvc3lzdGVtXCIpXSksIF92bS5fdihcIiBcIiksIF9jKCd1bCcsIFtfYygnbGknLCBbX2MoJ2EnLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly9yb3V0ZXIudnVlanMub3JnL1wiLFxuICAgICAgXCJ0YXJnZXRcIjogXCJfYmxhbmtcIlxuICAgIH1cbiAgfSwgW192bS5fdihcInZ1ZS1yb3V0ZXJcIildKV0pLCBfdm0uX3YoXCIgXCIpLCBfYygnbGknLCBbX2MoJ2EnLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwiaHJlZlwiOiBcImh0dHA6Ly92dWV4LnZ1ZWpzLm9yZy9cIixcbiAgICAgIFwidGFyZ2V0XCI6IFwiX2JsYW5rXCJcbiAgICB9XG4gIH0sIFtfdm0uX3YoXCJ2dWV4XCIpXSldKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ2xpJywgW19jKCdhJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcImhyZWZcIjogXCJodHRwOi8vdnVlLWxvYWRlci52dWVqcy5vcmcvXCIsXG4gICAgICBcInRhcmdldFwiOiBcIl9ibGFua1wiXG4gICAgfVxuICB9LCBbX3ZtLl92KFwidnVlLWxvYWRlclwiKV0pXSksIF92bS5fdihcIiBcIiksIF9jKCdsaScsIFtfYygnYScsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJocmVmXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL2F3ZXNvbWUtdnVlXCIsXG4gICAgICBcInRhcmdldFwiOiBcIl9ibGFua1wiXG4gICAgfVxuICB9LCBbX3ZtLl92KFwiYXdlc29tZS12dWVcIildKV0pXSldKVxufV19XG5tb2R1bGUuZXhwb3J0cy5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcbmlmIChtb2R1bGUuaG90KSB7XG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKG1vZHVsZS5ob3QuZGF0YSkge1xuICAgICByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpLnJlcmVuZGVyKFwiZGF0YS12LTM5MDAzYjZmXCIsIG1vZHVsZS5leHBvcnRzKVxuICB9XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtMzkwMDNiNmZcIn0hLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9tYWluL2pzL0FwcC52dWVcbi8vIG1vZHVsZSBpZCA9IDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(4);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(11)(\"97c2de9c\", content, false);\n// Hot Module Replacement\nif(false) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../../node_modules/css-loader/index.js?sourceMap!../../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"id\\\":\\\"data-v-39003b6f\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./App.vue\", function() {\n     var newContent = require(\"!!../../../node_modules/css-loader/index.js?sourceMap!../../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"id\\\":\\\"data-v-39003b6f\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./App.vue\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi9qcy9BcHAudnVlP2E4ZDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQSxtQ0FBaU47QUFDak47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBJQUEwSSxzRUFBc0U7QUFDaE4sbUpBQW1KLHNFQUFzRTtBQUN6TjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxnQ0FBZ0MsVUFBVSxFQUFFO0FBQzVDIiwiZmlsZSI6IjEwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzP3NvdXJjZU1hcCEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi0zOTAwM2I2ZlxcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vQXBwLnZ1ZVwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpKFwiOTdjMmRlOWNcIiwgY29udGVudCwgZmFsc2UpO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcImlkXFxcIjpcXFwiZGF0YS12LTM5MDAzYjZmXFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9BcHAudnVlXCIsIGZ1bmN0aW9uKCkge1xuICAgICB2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzP3NvdXJjZU1hcCEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi0zOTAwM2I2ZlxcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vQXBwLnZ1ZVwiKTtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1zdHlsZS1sb2FkZXIhLi9+L2Nzcy1sb2FkZXI/c291cmNlTWFwIS4vfi92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LTM5MDAzYjZmXCIsXCJzY29wZWRcIjpmYWxzZSxcImhhc0lubGluZUNvbmZpZ1wiOmZhbHNlfSEuL34vdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9tYWluL2pzL0FwcC52dWVcbi8vIG1vZHVsZSBpZCA9IDEwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\r\n  MIT License http://www.opensource.org/licenses/mit-license.php\r\n  Author Tobias Koppers @sokra\r\n  Modified by Evan You @yyx990803\r\n*/\r\n\r\nvar hasDocument = typeof document !== 'undefined'\r\n\r\nif (typeof DEBUG !== 'undefined' && DEBUG) {\r\n  if (!hasDocument) {\r\n    throw new Error(\r\n    'vue-style-loader cannot be used in a non-browser environment. ' +\r\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\r\n  ) }\r\n}\r\n\r\nvar listToStyles = __webpack_require__(12)\r\n\r\n/*\r\ntype StyleObject = {\r\n  id: number;\r\n  parts: Array<StyleObjectPart>\r\n}\r\n\r\ntype StyleObjectPart = {\r\n  css: string;\r\n  media: string;\r\n  sourceMap: ?string\r\n}\r\n*/\r\n\r\nvar stylesInDom = {/*\r\n  [id: number]: {\r\n    id: number,\r\n    refs: number,\r\n    parts: Array<(obj?: StyleObjectPart) => void>\r\n  }\r\n*/}\r\n\r\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\r\nvar singletonElement = null\r\nvar singletonCounter = 0\r\nvar isProduction = false\r\nvar noop = function () {}\r\n\r\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n// tags it will allow on a page\r\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\r\n\r\nmodule.exports = function (parentId, list, _isProduction) {\r\n  isProduction = _isProduction\r\n\r\n  var styles = listToStyles(parentId, list)\r\n  addStylesToDom(styles)\r\n\r\n  return function update (newList) {\r\n    var mayRemove = []\r\n    for (var i = 0; i < styles.length; i++) {\r\n      var item = styles[i]\r\n      var domStyle = stylesInDom[item.id]\r\n      domStyle.refs--\r\n      mayRemove.push(domStyle)\r\n    }\r\n    if (newList) {\r\n      styles = listToStyles(parentId, newList)\r\n      addStylesToDom(styles)\r\n    } else {\r\n      styles = []\r\n    }\r\n    for (var i = 0; i < mayRemove.length; i++) {\r\n      var domStyle = mayRemove[i]\r\n      if (domStyle.refs === 0) {\r\n        for (var j = 0; j < domStyle.parts.length; j++) {\r\n          domStyle.parts[j]()\r\n        }\r\n        delete stylesInDom[domStyle.id]\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\r\n  for (var i = 0; i < styles.length; i++) {\r\n    var item = styles[i]\r\n    var domStyle = stylesInDom[item.id]\r\n    if (domStyle) {\r\n      domStyle.refs++\r\n      for (var j = 0; j < domStyle.parts.length; j++) {\r\n        domStyle.parts[j](item.parts[j])\r\n      }\r\n      for (; j < item.parts.length; j++) {\r\n        domStyle.parts.push(addStyle(item.parts[j]))\r\n      }\r\n      if (domStyle.parts.length > item.parts.length) {\r\n        domStyle.parts.length = item.parts.length\r\n      }\r\n    } else {\r\n      var parts = []\r\n      for (var j = 0; j < item.parts.length; j++) {\r\n        parts.push(addStyle(item.parts[j]))\r\n      }\r\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\r\n    }\r\n  }\r\n}\r\n\r\nfunction createStyleElement () {\r\n  var styleElement = document.createElement('style')\r\n  styleElement.type = 'text/css'\r\n  head.appendChild(styleElement)\r\n  return styleElement\r\n}\r\n\r\nfunction addStyle (obj /* StyleObjectPart */) {\r\n  var update, remove\r\n  var styleElement = document.querySelector('style[data-vue-ssr-id~=\"' + obj.id + '\"]')\r\n\r\n  if (styleElement) {\r\n    if (isProduction) {\r\n      // has SSR styles and in production mode.\r\n      // simply do nothing.\r\n      return noop\r\n    } else {\r\n      // has SSR styles but in dev mode.\r\n      // for some reason Chrome can't handle source map in server-rendered\r\n      // style tags - source maps in <style> only works if the style tag is\r\n      // created and inserted dynamically. So we remove the server rendered\r\n      // styles and inject new ones.\r\n      styleElement.parentNode.removeChild(styleElement)\r\n    }\r\n  }\r\n\r\n  if (isOldIE) {\r\n    // use singleton mode for IE9.\r\n    var styleIndex = singletonCounter++\r\n    styleElement = singletonElement || (singletonElement = createStyleElement())\r\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\r\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\r\n  } else {\r\n    // use multi-style-tag mode in all other cases\r\n    styleElement = createStyleElement()\r\n    update = applyToTag.bind(null, styleElement)\r\n    remove = function () {\r\n      styleElement.parentNode.removeChild(styleElement)\r\n    }\r\n  }\r\n\r\n  update(obj)\r\n\r\n  return function updateStyle (newObj /* StyleObjectPart */) {\r\n    if (newObj) {\r\n      if (newObj.css === obj.css &&\r\n          newObj.media === obj.media &&\r\n          newObj.sourceMap === obj.sourceMap) {\r\n        return\r\n      }\r\n      update(obj = newObj)\r\n    } else {\r\n      remove()\r\n    }\r\n  }\r\n}\r\n\r\nvar replaceText = (function () {\r\n  var textStore = []\r\n\r\n  return function (index, replacement) {\r\n    textStore[index] = replacement\r\n    return textStore.filter(Boolean).join('\\n')\r\n  }\r\n})()\r\n\r\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\r\n  var css = remove ? '' : obj.css\r\n\r\n  if (styleElement.styleSheet) {\r\n    styleElement.styleSheet.cssText = replaceText(index, css)\r\n  } else {\r\n    var cssNode = document.createTextNode(css)\r\n    var childNodes = styleElement.childNodes\r\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\r\n    if (childNodes.length) {\r\n      styleElement.insertBefore(cssNode, childNodes[index])\r\n    } else {\r\n      styleElement.appendChild(cssNode)\r\n    }\r\n  }\r\n}\r\n\r\nfunction applyToTag (styleElement, obj) {\r\n  var css = obj.css\r\n  var media = obj.media\r\n  var sourceMap = obj.sourceMap\r\n\r\n  if (media) {\r\n    styleElement.setAttribute('media', media)\r\n  }\r\n\r\n  if (sourceMap) {\r\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\r\n    // this makes source maps inside style tags work properly in Chrome\r\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\r\n    // http://stackoverflow.com/a/26603875\r\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\r\n  }\r\n\r\n  if (styleElement.styleSheet) {\r\n    styleElement.styleSheet.cssText = css\r\n  } else {\r\n    while (styleElement.firstChild) {\r\n      styleElement.removeChild(styleElement.firstChild)\r\n    }\r\n    styleElement.appendChild(document.createTextNode(css))\r\n  }\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 12 */
/***/ (function(module, exports) {

eval("/**\r\n * Translates the list format produced by css-loader into something\r\n * easier to manipulate.\r\n */\r\nmodule.exports = function listToStyles (parentId, list) {\r\n  var styles = []\r\n  var newStyles = {}\r\n  for (var i = 0; i < list.length; i++) {\r\n    var item = list[i]\r\n    var id = item[0]\r\n    var css = item[1]\r\n    var media = item[2]\r\n    var sourceMap = item[3]\r\n    var part = {\r\n      id: parentId + ':' + i,\r\n      css: css,\r\n      media: media,\r\n      sourceMap: sourceMap\r\n    }\r\n    if (!newStyles[id]) {\r\n      styles.push(newStyles[id] = { id: id, parts: [part] })\r\n    } else {\r\n      newStyles[id].parts.push(part)\r\n    }\r\n  }\r\n  return styles\r\n}\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2xpc3RUb1N0eWxlcy5qcz9lNmFjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGlCQUFpQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsd0JBQXdCO0FBQzNELEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjEyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIFRyYW5zbGF0ZXMgdGhlIGxpc3QgZm9ybWF0IHByb2R1Y2VkIGJ5IGNzcy1sb2FkZXIgaW50byBzb21ldGhpbmdcclxuICogZWFzaWVyIHRvIG1hbmlwdWxhdGUuXHJcbiAqL1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAocGFyZW50SWQsIGxpc3QpIHtcclxuICB2YXIgc3R5bGVzID0gW11cclxuICB2YXIgbmV3U3R5bGVzID0ge31cclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgIHZhciBpdGVtID0gbGlzdFtpXVxyXG4gICAgdmFyIGlkID0gaXRlbVswXVxyXG4gICAgdmFyIGNzcyA9IGl0ZW1bMV1cclxuICAgIHZhciBtZWRpYSA9IGl0ZW1bMl1cclxuICAgIHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdXHJcbiAgICB2YXIgcGFydCA9IHtcclxuICAgICAgaWQ6IHBhcmVudElkICsgJzonICsgaSxcclxuICAgICAgY3NzOiBjc3MsXHJcbiAgICAgIG1lZGlhOiBtZWRpYSxcclxuICAgICAgc291cmNlTWFwOiBzb3VyY2VNYXBcclxuICAgIH1cclxuICAgIGlmICghbmV3U3R5bGVzW2lkXSkge1xyXG4gICAgICBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0geyBpZDogaWQsIHBhcnRzOiBbcGFydF0gfSlcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KVxyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gc3R5bGVzXHJcbn1cclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2xpc3RUb1N0eWxlcy5qc1xuLy8gbW9kdWxlIGlkID0gMTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 13 */
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IDEzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ })
/******/ ]);